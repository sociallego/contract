{
  "language": "Solidity",
  "sources": {
    "contracts/breakInGame.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\r\n\r\ninterface INFTMinter {\r\n    function getNFTAttributes(uint256 NFTID)\r\n        external\r\n        returns (\r\n            uint256 agility,\r\n            uint256 strength,\r\n            uint256 charm,\r\n            uint256 sneak,\r\n            uint256 health\r\n        );\r\n\r\n    function changeNFTAttributes(\r\n        uint256 NFTID,\r\n        uint256 health,\r\n        uint256 agility,\r\n        uint256 strength,\r\n        uint256 sneak,\r\n        uint256 charm\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract BreakInGame is VRFConsumerBase, Ownable, KeeperCompatibleInterface {\r\n    bytes32 internal keyHash;\r\n    uint256 internal fee;\r\n\r\n    uint256 public randomResult;\r\n\r\n    address keeperRegistryAddress;\r\n\r\n    modifier onlyKeeper() {\r\n        require(msg.sender == keeperRegistryAddress);\r\n        _;\r\n    }\r\n    uint256 hospitalBill = 1000 * 10**18;\r\n    uint256 public lastCheckIn = block.timestamp;\r\n    uint256 public checkInTimeInterval = 864000; //default to six months\r\n    address public nextOwner;\r\n\r\n    INFTMinter IBreakInNFTMinter;\r\n    IERC721 breakInNFT; //address of breakInNFTs\r\n    IERC20 socialLegoToken; //address of SocialLego token\r\n\r\n    constructor(\r\n        address _vrfCoordinator,\r\n        address _link,\r\n        address _keeperRegistryAddress,\r\n        address _breakInNFT,\r\n        address _socialLegoToken\r\n    ) VRFConsumerBase(_vrfCoordinator, _link) {\r\n        keyHash = 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4;\r\n        fee = 0.1 * 10**18; // 0.1 LINK (Varies by network)\r\n\r\n        keeperRegistryAddress = _keeperRegistryAddress;\r\n        IBreakInNFTMinter = INFTMinter(_breakInNFT);\r\n        breakInNFT = IERC721(_breakInNFT);\r\n        socialLegoToken = IERC20(_socialLegoToken);\r\n    }\r\n\r\n    struct scenarios {\r\n        string name;\r\n        uint256 riskBaseDifficulty;\r\n        uint256 payoutAmountBase;\r\n    }\r\n    struct NFTCharacter {\r\n        uint256 born;\r\n        uint256 health;\r\n        uint256 agility;\r\n        uint256 strength;\r\n        uint256 sneak;\r\n        uint256 charm;\r\n        uint256 characterID;\r\n    }\r\n    struct depostedCharacter {\r\n        uint256 NFTID;\r\n        bool isDeposited;\r\n        bool arrested;\r\n        uint256 freetoPlayAgain;\r\n        bool playingPVP;\r\n        uint256 canStopPlayingPVP;\r\n        uint256 lootingTimeout;\r\n        uint256 health;\r\n        uint256 agility;\r\n        uint256 strength;\r\n        uint256 sneak;\r\n        uint256 charm;\r\n    }\r\n    struct gamePlay {\r\n        address player;\r\n        uint256 scenario;\r\n        uint256 breakInStyle;\r\n        uint256 difficultyLevel;\r\n        uint256 health;\r\n        uint256 agility;\r\n        uint256 strength;\r\n        uint256 sneak;\r\n        uint256 charm;\r\n    }\r\n    struct jailBreak {\r\n        address player;\r\n        uint256 breakInStyle;\r\n        uint256 health;\r\n        uint256 agility;\r\n        uint256 strength;\r\n        uint256 sneak;\r\n        uint256 charm;\r\n        address targetPlayer; // who you want to break out\r\n    }\r\n    struct PvP {\r\n        address player;\r\n        uint256 breakInStyle;\r\n        uint256 difficultyLevel;\r\n        uint256 health;\r\n        uint256 agility;\r\n        uint256 strength;\r\n        uint256 sneak;\r\n        uint256 charm;\r\n        address targetPlayer; // who you want to steal from\r\n        uint256 targetPlayerHealth;\r\n        uint256 targetPlayerAgility;\r\n        uint256 targetPlayerStrength;\r\n        uint256 targetPlayerSneak;\r\n        uint256 targetPlayerCharm;\r\n    }\r\n\r\n    struct gameModes {\r\n        uint256 gameMode; // 0 if robbing, 1 if jailBreak, 2 if PvP\r\n    }\r\n\r\n    event gameCode(bytes32 requestID, address player, uint256 code);\r\n    uint256 differentGameScenarios;\r\n    mapping(uint256 => scenarios) public gameScenarios; // current gameScenarios for robbing\r\n    mapping(bytes32 => PvP) currentPVPGamePlays; // for if you are trying to steal from a player\r\n    mapping(bytes32 => gamePlay) currentGamePlays; // this is for a standard robbing gameplay\r\n    mapping(bytes32 => gameModes) currentGameMode; // this allows for a quick compare statement to determine which game to play to safe gas\r\n    mapping(bytes32 => jailBreak) currentJailBreaks; // this is for players trying to break out a buddy\r\n    mapping(address => depostedCharacter) public NFTCharacterDepositLedger; // Players deposit their NFT into this contract to Play\r\n    mapping(address => uint256) public jewelDepositLedger; // Players must deposit their loot to play PvP\r\n\r\n    function changeHospitalBill(uint256 newHospitalBill) public onlyOwner {\r\n        hospitalBill = newHospitalBill;\r\n        lastCheckIn = block.timestamp;\r\n    }\r\n\r\n    function addScenario(\r\n        string memory name,\r\n        uint16 riskBaseDifficulty,\r\n        uint256 payoutAmountBase\r\n    ) public onlyOwner {\r\n        uint256 gameScenarioID = differentGameScenarios;\r\n        gameScenarios[gameScenarioID].name = name;\r\n        gameScenarios[gameScenarioID].riskBaseDifficulty = riskBaseDifficulty;\r\n        gameScenarios[gameScenarioID].payoutAmountBase = payoutAmountBase;\r\n        differentGameScenarios += 1;\r\n    }\r\n\r\n    function modifyScenario(\r\n        uint256 scenarioNumber,\r\n        string memory name,\r\n        uint16 riskBaseDifficulty,\r\n        uint16 payoutAmountBase\r\n    ) public onlyOwner {\r\n        gameScenarios[scenarioNumber].riskBaseDifficulty = riskBaseDifficulty; // scenarios can be removed by effectily raising the riskbase difficult level so high no one would bother playing it and making payoutAmountBase 0\r\n        gameScenarios[scenarioNumber].payoutAmountBase = payoutAmountBase;\r\n        gameScenarios[scenarioNumber].name = name;\r\n    }\r\n\r\n    function depositNFT(uint256 NFTID) public {\r\n        // users Must Deposit a character to play\r\n        require(\r\n            NFTCharacterDepositLedger[msg.sender].isDeposited != true,\r\n            \"Character Already Deposited\"\r\n        );\r\n        breakInNFT.transferFrom(msg.sender, address(this), NFTID);\r\n        NFTCharacterDepositLedger[msg.sender].NFTID = NFTID;\r\n        NFTCharacterDepositLedger[msg.sender].isDeposited = true; //\r\n        (\r\n            NFTCharacterDepositLedger[msg.sender].agility,\r\n            NFTCharacterDepositLedger[msg.sender].strength,\r\n            NFTCharacterDepositLedger[msg.sender].charm,\r\n            NFTCharacterDepositLedger[msg.sender].sneak,\r\n            NFTCharacterDepositLedger[msg.sender].health\r\n        ) = IBreakInNFTMinter.getNFTAttributes(\r\n            NFTCharacterDepositLedger[msg.sender].NFTID\r\n        );\r\n    }\r\n\r\n    function withdrawNFT() public {\r\n        require(\r\n            NFTCharacterDepositLedger[msg.sender].isDeposited == true,\r\n            \"No Character Deposited\"\r\n        );\r\n        require(\r\n            NFTCharacterDepositLedger[msg.sender].arrested == false,\r\n            \"Character in Prison\"\r\n        );\r\n        IBreakInNFTMinter.changeNFTAttributes(\r\n            NFTCharacterDepositLedger[msg.sender].NFTID, // modify attributes of player if experience was gained or health lost\r\n            NFTCharacterDepositLedger[msg.sender].health,\r\n            NFTCharacterDepositLedger[msg.sender].agility,\r\n            NFTCharacterDepositLedger[msg.sender].strength,\r\n            NFTCharacterDepositLedger[msg.sender].sneak,\r\n            NFTCharacterDepositLedger[msg.sender].charm\r\n        );\r\n        breakInNFT.transferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            NFTCharacterDepositLedger[msg.sender].NFTID\r\n        );\r\n        NFTCharacterDepositLedger[msg.sender].isDeposited = false;\r\n    }\r\n\r\n    function depositJewels(uint256 amountToDeposit) public {\r\n        require(\r\n            NFTCharacterDepositLedger[msg.sender].arrested == false,\r\n            \"Character in Prison\"\r\n        );\r\n        socialLegoToken.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amountToDeposit\r\n        );\r\n        jewelDepositLedger[msg.sender] += amountToDeposit;\r\n    }\r\n\r\n    function withdrawJewels(uint256 amountToWithdraw) public {\r\n        require(\r\n            jewelDepositLedger[msg.sender] >= amountToWithdraw,\r\n            \"Trying to withdraw too much money\"\r\n        );\r\n        socialLegoToken.transfer(msg.sender, amountToWithdraw);\r\n        jewelDepositLedger[msg.sender] -= amountToWithdraw;\r\n    }\r\n\r\n    function startPlayPVP() public {\r\n        require(\r\n            NFTCharacterDepositLedger[msg.sender].isDeposited == true,\r\n            \"Character Not deposited\"\r\n        );\r\n        NFTCharacterDepositLedger[msg.sender].playingPVP = true;\r\n        NFTCharacterDepositLedger[msg.sender].canStopPlayingPVP =\r\n            block.timestamp +\r\n            604800; // players must play a minimum 7 days to prevent players entering and exiting quickly;\r\n    }\r\n\r\n    function stopPlayPVP() public {\r\n        require(\r\n            block.timestamp >=\r\n                NFTCharacterDepositLedger[msg.sender].canStopPlayingPVP,\r\n            \"You must wait 7 days since you started playing\"\r\n        );\r\n        NFTCharacterDepositLedger[msg.sender].playingPVP = false;\r\n    }\r\n\r\n    function hospitalVisit() public {\r\n        require(\r\n            NFTCharacterDepositLedger[msg.sender].isDeposited == true,\r\n            \"Character Not Deposited\"\r\n        );\r\n        require(NFTCharacterDepositLedger[msg.sender].health < 100);\r\n        require(jewelDepositLedger[msg.sender] >= (hospitalBill));\r\n        jewelDepositLedger[msg.sender] -= hospitalBill;\r\n        NFTCharacterDepositLedger[msg.sender].health = 100;\r\n    }\r\n\r\n    // Please Hire Me ;)\r\n    function playGame(\r\n        uint256 difficultyLevel,\r\n        uint256 breakInStyle,\r\n        uint256 scenario\r\n    ) public returns (bytes32) {\r\n        require(\r\n            LINK.balanceOf(address(this)) >= fee,\r\n            \"Not enough LINK - fill contract with faucet\"\r\n        );\r\n        require(\r\n            NFTCharacterDepositLedger[msg.sender].isDeposited == true,\r\n            \"No Character Deposited\"\r\n        );\r\n        require(\r\n            NFTCharacterDepositLedger[msg.sender].arrested == false,\r\n            \"Character in Prison\"\r\n        );\r\n        require(scenario < differentGameScenarios, \"No Game Scenario\");\r\n        bytes32 requestID = requestRandomness(keyHash, fee);\r\n        currentGameMode[requestID].gameMode = 0;\r\n        currentGamePlays[requestID].player = msg.sender;\r\n        currentGamePlays[requestID].breakInStyle = breakInStyle;\r\n        currentGamePlays[requestID].difficultyLevel = difficultyLevel;\r\n        currentGamePlays[requestID].scenario = scenario;\r\n        currentGamePlays[requestID].agility = NFTCharacterDepositLedger[\r\n            msg.sender\r\n        ].agility;\r\n        currentGamePlays[requestID].strength = NFTCharacterDepositLedger[\r\n            msg.sender\r\n        ].strength;\r\n        currentGamePlays[requestID].charm = NFTCharacterDepositLedger[\r\n            msg.sender\r\n        ].charm;\r\n        currentGamePlays[requestID].sneak = NFTCharacterDepositLedger[\r\n            msg.sender\r\n        ].sneak;\r\n        currentGamePlays[requestID].health = NFTCharacterDepositLedger[\r\n            msg.sender\r\n        ].health;\r\n        return requestID;\r\n    }\r\n\r\n    function playBreakOut(uint256 breakInStyle, address targetPlayer)\r\n        public\r\n        returns (bytes32)\r\n    {\r\n        require(\r\n            LINK.balanceOf(address(this)) >= fee,\r\n            \"Not enough LINK - fill contract with faucet\"\r\n        );\r\n        require(\r\n            NFTCharacterDepositLedger[targetPlayer].isDeposited == true,\r\n            \"No Target Character Deposited\"\r\n        );\r\n        require(\r\n            NFTCharacterDepositLedger[msg.sender].isDeposited == true,\r\n            \"You have no Character Deposited\"\r\n        );\r\n        require(\r\n            NFTCharacterDepositLedger[targetPlayer].arrested == true,\r\n            \"Character is not in Prison\"\r\n        );\r\n        require(targetPlayer != msg.sender, \"You cannot free yourself\");\r\n        bytes32 requestID = requestRandomness(keyHash, fee);\r\n        currentGameMode[requestID].gameMode = 1;\r\n        currentJailBreaks[requestID].player = msg.sender;\r\n        currentJailBreaks[requestID].breakInStyle = breakInStyle;\r\n        currentJailBreaks[requestID].targetPlayer = targetPlayer;\r\n        currentJailBreaks[requestID].agility = NFTCharacterDepositLedger[\r\n            msg.sender\r\n        ].agility;\r\n        currentJailBreaks[requestID].strength = NFTCharacterDepositLedger[\r\n            msg.sender\r\n        ].strength;\r\n        currentJailBreaks[requestID].charm = NFTCharacterDepositLedger[\r\n            msg.sender\r\n        ].charm;\r\n        currentJailBreaks[requestID].sneak = NFTCharacterDepositLedger[\r\n            msg.sender\r\n        ].sneak;\r\n        currentJailBreaks[requestID].health = NFTCharacterDepositLedger[\r\n            msg.sender\r\n        ].health;\r\n        return requestID;\r\n    }\r\n\r\n    function playPVP(uint256 breakInStyle, address targetPlayer)\r\n        public\r\n        returns (bytes32)\r\n    {\r\n        require(\r\n            LINK.balanceOf(address(this)) >= fee,\r\n            \"Not enough LINK - fill contract with faucet\"\r\n        );\r\n        require(\r\n            NFTCharacterDepositLedger[targetPlayer].isDeposited == true,\r\n            \"No Target Character Deposited\"\r\n        );\r\n        require(\r\n            NFTCharacterDepositLedger[msg.sender].isDeposited == true,\r\n            \"You have no Character Deposited\"\r\n        );\r\n        require(targetPlayer != msg.sender, \"You cannot rob from yourself\");\r\n        require(\r\n            NFTCharacterDepositLedger[msg.sender].lootingTimeout <\r\n                block.timestamp\r\n        ); // only successfully rob someone once a day\r\n        require(\r\n            NFTCharacterDepositLedger[targetPlayer].lootingTimeout <\r\n                block.timestamp\r\n        ); // only get robbed  once a day\r\n        require(jewelDepositLedger[targetPlayer] > (1 * 10**18)); // require targetPlayer has at least 1 jewel to prevent division issues.\r\n        require(\r\n            jewelDepositLedger[msg.sender] >\r\n                (jewelDepositLedger[targetPlayer] / 2)\r\n        ); // you need to have at least 50% jewels of your target character to prvent small characters constantly attacking\r\n        bytes32 requestID = requestRandomness(keyHash, fee);\r\n        currentGameMode[requestID].gameMode = 2;\r\n        currentPVPGamePlays[requestID].player = msg.sender;\r\n        currentPVPGamePlays[requestID].breakInStyle = breakInStyle;\r\n        currentPVPGamePlays[requestID].targetPlayer = targetPlayer;\r\n        currentPVPGamePlays[requestID].agility = NFTCharacterDepositLedger[\r\n            msg.sender\r\n        ].agility;\r\n        currentPVPGamePlays[requestID].strength = NFTCharacterDepositLedger[\r\n            msg.sender\r\n        ].strength;\r\n        currentPVPGamePlays[requestID].charm = NFTCharacterDepositLedger[\r\n            msg.sender\r\n        ].charm;\r\n        currentPVPGamePlays[requestID].sneak = NFTCharacterDepositLedger[\r\n            msg.sender\r\n        ].sneak;\r\n        currentPVPGamePlays[requestID].health = NFTCharacterDepositLedger[\r\n            msg.sender\r\n        ].health;\r\n\r\n        currentPVPGamePlays[requestID]\r\n            .targetPlayerAgility = NFTCharacterDepositLedger[targetPlayer]\r\n            .agility;\r\n        currentPVPGamePlays[requestID]\r\n            .targetPlayerStrength = NFTCharacterDepositLedger[targetPlayer]\r\n            .strength;\r\n        currentPVPGamePlays[requestID]\r\n            .targetPlayerCharm = NFTCharacterDepositLedger[targetPlayer].charm;\r\n        currentPVPGamePlays[requestID]\r\n            .targetPlayerSneak = NFTCharacterDepositLedger[targetPlayer].sneak;\r\n        currentPVPGamePlays[requestID]\r\n            .targetPlayerHealth = NFTCharacterDepositLedger[targetPlayer]\r\n            .health;\r\n\r\n        return requestID;\r\n    }\r\n\r\n    function vrfPlayGame(uint256 randomness, bytes32 requestId) internal {\r\n        // only when randomness is returned can this function be called.\r\n        if ((randomness % 2000) == 1) {\r\n            // 1 in 2000 chance character dies\r\n            NFTCharacterDepositLedger[currentGamePlays[requestId].player]\r\n                .isDeposited = false;\r\n            emit gameCode(requestId, currentGamePlays[requestId].player, 0);\r\n            return;\r\n        }\r\n\r\n        if (((randomness % 143456) % 20) == 1) {\r\n            // 1 in 20 chance character is injured\r\n            uint256 healthDecrease = ((randomness % 123456) % 99); // player can lose up to 99 health every 1 in 20\r\n            if (\r\n                (100 - currentGamePlays[requestId].health + healthDecrease) >\r\n                100\r\n            ) {\r\n                // players don't have to heal if they get injured before but if they get injured again and its greater than 100, they die\r\n                NFTCharacterDepositLedger[currentGamePlays[requestId].player]\r\n                    .isDeposited = false;\r\n                emit gameCode(requestId, currentGamePlays[requestId].player, 0);\r\n                return;\r\n            }\r\n            NFTCharacterDepositLedger[currentGamePlays[requestId].player]\r\n                .health -= healthDecrease;\r\n            emit gameCode(requestId, currentGamePlays[requestId].player, 1);\r\n            return;\r\n        }\r\n        if (((randomness % 23015) % 20) == 1) {\r\n            // 1 in 20 chance character is almost getting arrested\r\n            uint256 agilityRequiredtoEscape = ((randomness % 54321) % 1000); // player still has chance to escape\r\n            if (currentGamePlays[requestId].agility > agilityRequiredtoEscape) {\r\n                if (((randomness % 2214) % 2) == 1) {\r\n                    // gain XP!\r\n                    NFTCharacterDepositLedger[\r\n                        currentGamePlays[requestId].player\r\n                    ].agility += 1;\r\n                }\r\n                emit gameCode(requestId, currentGamePlays[requestId].player, 3);\r\n                return; // escaped but no money given\r\n            } else {\r\n                NFTCharacterDepositLedger[currentGamePlays[requestId].player]\r\n                    .arrested = true;\r\n                NFTCharacterDepositLedger[currentGamePlays[requestId].player]\r\n                    .freetoPlayAgain = block.timestamp + 172800; //player arrested for 2 days.\r\n                emit gameCode(requestId, currentGamePlays[requestId].player, 2);\r\n                return; //  playerArrested\r\n            }\r\n        }\r\n        if (currentGamePlays[requestId].breakInStyle == 0) {\r\n            //player is sneaking in\r\n            uint256 sneakInExperienceRequired = ((randomness % 235674) % 750) +\r\n                currentGamePlays[requestId].difficultyLevel +\r\n                gameScenarios[currentGamePlays[requestId].scenario]\r\n                    .riskBaseDifficulty; // difficulty will be somewhere between 0 to 10000 pluse the difficulty level which will be about 100 to 950\r\n            if (currentGamePlays[requestId].sneak > sneakInExperienceRequired) {\r\n                uint256 totalWon = currentGamePlays[requestId].difficultyLevel *\r\n                    gameScenarios[currentGamePlays[requestId].scenario]\r\n                        .payoutAmountBase;\r\n                jewelDepositLedger[\r\n                    currentGamePlays[requestId].player\r\n                ] += totalWon;\r\n                if (((randomness % 2214) % 2) == 1) {\r\n                    // gain XP!\r\n                    NFTCharacterDepositLedger[\r\n                        currentGamePlays[requestId].player\r\n                    ].sneak += 1;\r\n                }\r\n                emit gameCode(\r\n                    requestId,\r\n                    currentGamePlays[requestId].player,\r\n                    totalWon\r\n                );\r\n                return;\r\n            }\r\n            emit gameCode(requestId, currentGamePlays[requestId].player, 4);\r\n            return;\r\n        }\r\n        if (currentGamePlays[requestId].breakInStyle == 1) {\r\n            // player is breaking in with charm\r\n            uint256 charmInExperienceRequired = ((randomness % 453678) % 750) +\r\n                currentGamePlays[requestId].difficultyLevel +\r\n                gameScenarios[currentGamePlays[requestId].scenario]\r\n                    .riskBaseDifficulty;\r\n            if (currentGamePlays[requestId].charm > charmInExperienceRequired) {\r\n                uint256 totalWon = currentGamePlays[requestId].difficultyLevel *\r\n                    gameScenarios[currentGamePlays[requestId].scenario]\r\n                        .payoutAmountBase;\r\n                jewelDepositLedger[\r\n                    currentGamePlays[requestId].player\r\n                ] += totalWon;\r\n                if (((randomness % 2214) % 2) == 1) {\r\n                    // gain XP!\r\n                    NFTCharacterDepositLedger[\r\n                        currentGamePlays[requestId].player\r\n                    ].charm += 1;\r\n                }\r\n                emit gameCode(\r\n                    requestId,\r\n                    currentGamePlays[requestId].player,\r\n                    totalWon\r\n                );\r\n                return;\r\n            }\r\n            emit gameCode(requestId, currentGamePlays[requestId].player, 4);\r\n            return;\r\n        }\r\n        if (currentGamePlays[requestId].breakInStyle == 2) {\r\n            // player is breaking in with strength\r\n            uint256 strengthInExperienceRequired = ((randomness % 786435) %\r\n                750) +\r\n                currentGamePlays[requestId].difficultyLevel +\r\n                gameScenarios[currentGamePlays[requestId].scenario]\r\n                    .riskBaseDifficulty; // strength is used for daylight robbery\r\n            if (\r\n                currentGamePlays[requestId].strength >\r\n                strengthInExperienceRequired\r\n            ) {\r\n                uint256 totalWon = currentGamePlays[requestId].difficultyLevel *\r\n                    gameScenarios[currentGamePlays[requestId].scenario]\r\n                        .payoutAmountBase;\r\n                jewelDepositLedger[\r\n                    currentGamePlays[requestId].player\r\n                ] += totalWon;\r\n                if (((randomness % 2214) % 2) == 1) {\r\n                    // gain XP!\r\n                    NFTCharacterDepositLedger[\r\n                        currentGamePlays[requestId].player\r\n                    ].strength += 1;\r\n                }\r\n                emit gameCode(\r\n                    requestId,\r\n                    currentGamePlays[requestId].player,\r\n                    totalWon\r\n                );\r\n                return;\r\n            }\r\n            emit gameCode(requestId, currentGamePlays[requestId].player, 4);\r\n            return;\r\n        }\r\n    }\r\n\r\n    function vrfJailBreak(uint256 randomness, bytes32 requestId) internal {\r\n        // only when randomness is returned can this function be called.\r\n        if ((randomness % 1000) == 1) {\r\n            // 5x higher chance of dying because its a jail\r\n            // 1 in 1000 chance character dies\r\n            NFTCharacterDepositLedger[currentJailBreaks[requestId].player]\r\n                .isDeposited = false; //\r\n            emit gameCode(requestId, currentJailBreaks[requestId].player, 0);\r\n            return;\r\n        }\r\n\r\n        if (((randomness % 143456) % 10) == 1) {\r\n            //2x higher chance of getting injured\r\n            // 1 in 100 chance character is injured\r\n            uint256 healthDecrease = ((randomness % 123456) % 99); // player can lose up to 99 health every 1 in 100\r\n            if (\r\n                (100 - currentJailBreaks[requestId].health + healthDecrease) >\r\n                100\r\n            ) {\r\n                // players don't have to heal if they get injured before but if they get injured again and its greater than 100, they die\r\n                NFTCharacterDepositLedger[msg.sender].isDeposited = false; //\r\n                emit gameCode(\r\n                    requestId,\r\n                    currentJailBreaks[requestId].player,\r\n                    0\r\n                );\r\n                return;\r\n            }\r\n            NFTCharacterDepositLedger[currentJailBreaks[requestId].player]\r\n                .health -= healthDecrease;\r\n            emit gameCode(requestId, currentJailBreaks[requestId].player, 1);\r\n            return;\r\n        }\r\n        if (((randomness % 23015) % 5) == 1) {\r\n            // really high chance of getting spotted\r\n            // 1 in 5 chance character is almost getting arrested\r\n            uint256 agilityRequiredtoEscape = ((randomness % 54321) % 1000); // player still has chance to escape\r\n            if (\r\n                currentJailBreaks[requestId].agility > agilityRequiredtoEscape\r\n            ) {\r\n                if (((randomness % 2214) % 2) == 1) {\r\n                    // gain XP!\r\n                    NFTCharacterDepositLedger[\r\n                        currentJailBreaks[requestId].player\r\n                    ].agility += 1;\r\n                }\r\n                emit gameCode(\r\n                    requestId,\r\n                    currentJailBreaks[requestId].player,\r\n                    3\r\n                );\r\n                return; // escaped but no money given\r\n            } else {\r\n                NFTCharacterDepositLedger[msg.sender].arrested = true;\r\n                NFTCharacterDepositLedger[msg.sender].freetoPlayAgain =\r\n                    block.timestamp +\r\n                    259200; //player arrested for 3 days.\r\n                emit gameCode(\r\n                    requestId,\r\n                    currentJailBreaks[requestId].player,\r\n                    2\r\n                );\r\n                return; //  playerArrested\r\n            }\r\n        }\r\n        if (currentJailBreaks[requestId].breakInStyle == 0) {\r\n            //player is sneaking in\r\n            uint256 sneakInExperienceRequired = ((randomness % 235674) % 1000); // difficulty will be somewhere between 0 to 10000\r\n            if (\r\n                currentJailBreaks[requestId].sneak > sneakInExperienceRequired\r\n            ) {\r\n                NFTCharacterDepositLedger[\r\n                    currentJailBreaks[requestId].targetPlayer\r\n                ].arrested = false;\r\n                if (((randomness % 2214) % 2) == 1) {\r\n                    // gain XP!\r\n                    NFTCharacterDepositLedger[\r\n                        currentJailBreaks[requestId].player\r\n                    ].sneak += 1;\r\n                }\r\n                emit gameCode(\r\n                    requestId,\r\n                    currentJailBreaks[requestId].targetPlayer,\r\n                    5\r\n                );\r\n                return;\r\n            }\r\n            emit gameCode(requestId, currentJailBreaks[requestId].player, 4);\r\n            return;\r\n        }\r\n        if (currentJailBreaks[requestId].breakInStyle == 1) {\r\n            // player is breaking in with charm\r\n            uint256 charmInExperienceRequired = ((randomness % 453678) % 1000);\r\n            if (\r\n                currentJailBreaks[requestId].charm > charmInExperienceRequired\r\n            ) {\r\n                NFTCharacterDepositLedger[\r\n                    currentJailBreaks[requestId].targetPlayer\r\n                ].arrested = false;\r\n                if (((randomness % 2214) % 2) == 1) {\r\n                    // gain XP!\r\n                    NFTCharacterDepositLedger[\r\n                        currentJailBreaks[requestId].player\r\n                    ].charm += 1;\r\n                }\r\n                emit gameCode(\r\n                    requestId,\r\n                    currentJailBreaks[requestId].targetPlayer,\r\n                    5\r\n                );\r\n                return;\r\n            }\r\n            emit gameCode(requestId, currentJailBreaks[requestId].player, 4);\r\n            return;\r\n        }\r\n        if (currentJailBreaks[requestId].breakInStyle == 2) {\r\n            // player is breaking in with strength\r\n            uint256 strengthInExperienceRequired = ((randomness % 786435) %\r\n                1000);\r\n            if (\r\n                currentJailBreaks[requestId].strength >\r\n                strengthInExperienceRequired\r\n            ) {\r\n                NFTCharacterDepositLedger[\r\n                    currentJailBreaks[requestId].targetPlayer\r\n                ].arrested = false;\r\n                if (((randomness % 2214) % 4) == 1) {\r\n                    // gain XP!\r\n                    NFTCharacterDepositLedger[\r\n                        currentJailBreaks[requestId].player\r\n                    ].strength += 1;\r\n                }\r\n                emit gameCode(\r\n                    requestId,\r\n                    currentJailBreaks[requestId].targetPlayer,\r\n                    5\r\n                );\r\n                return;\r\n            }\r\n            emit gameCode(requestId, currentJailBreaks[requestId].player, 4);\r\n            return;\r\n        }\r\n    }\r\n\r\n    function vrfPlayPVP(uint256 randomness, bytes32 requestId) internal {\r\n        // only when randomness is returned can this function be called.\r\n        if ((randomness % 100) == 1) {\r\n            //  really high chance of getting killed\r\n            // 1 in 100 chance character dies\r\n            NFTCharacterDepositLedger[currentPVPGamePlays[requestId].player]\r\n                .isDeposited = false; //\r\n            emit gameCode(requestId, currentPVPGamePlays[requestId].player, 0);\r\n            return;\r\n        }\r\n\r\n        if (((randomness % 143456) % 11) == 3) {\r\n            //really high chance of getting injured\r\n            // 1 in 11 chance character is injured\r\n            uint256 healthDecrease = ((randomness % 123456) % 99); // player can lose up to 99 health every 1 in 100\r\n            if (\r\n                (100 - currentPVPGamePlays[requestId].health + healthDecrease) >\r\n                100\r\n            ) {\r\n                // players don't have to heal if they get injured before but if they get injured again and its greater than 100, they die\r\n                NFTCharacterDepositLedger[msg.sender].isDeposited = false; //\r\n                emit gameCode(\r\n                    requestId,\r\n                    currentPVPGamePlays[requestId].player,\r\n                    0\r\n                );\r\n                return;\r\n            }\r\n            NFTCharacterDepositLedger[currentPVPGamePlays[requestId].player]\r\n                .health -= healthDecrease;\r\n            emit gameCode(requestId, currentPVPGamePlays[requestId].player, 1);\r\n            return;\r\n        }\r\n        // no chance of getting arrested since you are a robbing another player\r\n        // There is nothing stopping players with 800 sneak targeting players with 300 sneak.\r\n        // It is assumed that the 800 sneak character will be more vulnerbale to strength attacks.\r\n        // Players have to decide if they want to play more defensivly by equally levelling up each trait\r\n        // or focus on one specfic trait which allows them to attack better but have worse defense.\r\n        // Oh and please hire me.\r\n        if (currentPVPGamePlays[requestId].breakInStyle == 0) {\r\n            //player is sneaking in\r\n            uint256 sneakInExperienceRequired = ((randomness % 235674) % 1000) +\r\n                currentPVPGamePlays[requestId].targetPlayerSneak; // difficulty will be somewhere between 0 to 10000 plus the difficulty level which will be about 100 to 950\r\n            if (\r\n                currentPVPGamePlays[requestId].sneak > sneakInExperienceRequired\r\n            ) {\r\n                uint256 totalWon = jewelDepositLedger[\r\n                    currentPVPGamePlays[requestId].targetPlayer\r\n                ] / 20; // player can only lose 5% max each day\r\n                if (((randomness % 2214) % 2) == 1) {\r\n                    // gain XP!\r\n                    NFTCharacterDepositLedger[\r\n                        currentPVPGamePlays[requestId].player\r\n                    ].sneak += 1;\r\n                }\r\n                jewelDepositLedger[\r\n                    currentPVPGamePlays[requestId].targetPlayer\r\n                ] -= totalWon;\r\n                jewelDepositLedger[\r\n                    currentPVPGamePlays[requestId].player\r\n                ] += totalWon;\r\n                NFTCharacterDepositLedger[currentPVPGamePlays[requestId].player]\r\n                    .lootingTimeout = block.timestamp + 86400; // players can only loot once a day\r\n                NFTCharacterDepositLedger[\r\n                    currentPVPGamePlays[requestId].targetPlayer\r\n                ].lootingTimeout = block.timestamp + 86400; // players can only get looted once a day\r\n                emit gameCode(\r\n                    requestId,\r\n                    currentPVPGamePlays[requestId].player,\r\n                    totalWon\r\n                );\r\n                return;\r\n            }\r\n            emit gameCode(requestId, currentPVPGamePlays[requestId].player, 4);\r\n            return;\r\n        }\r\n        if (currentPVPGamePlays[requestId].breakInStyle == 1) {\r\n            // player is breaking in with charm\r\n            uint256 charmInExperienceRequired = ((randomness % 453678) % 1000) +\r\n                currentPVPGamePlays[requestId].targetPlayerCharm;\r\n            if (\r\n                currentPVPGamePlays[requestId].charm > charmInExperienceRequired\r\n            ) {\r\n                uint256 totalWon = jewelDepositLedger[\r\n                    currentPVPGamePlays[requestId].targetPlayer\r\n                ] / 20;\r\n                if (((randomness % 2214) % 2) == 1) {\r\n                    // gain XP!\r\n                    NFTCharacterDepositLedger[\r\n                        currentPVPGamePlays[requestId].player\r\n                    ].charm += 1;\r\n                }\r\n                jewelDepositLedger[\r\n                    currentPVPGamePlays[requestId].player\r\n                ] += totalWon;\r\n                NFTCharacterDepositLedger[currentPVPGamePlays[requestId].player]\r\n                    .lootingTimeout = block.timestamp + 86400; // players can only loot once a day\r\n                NFTCharacterDepositLedger[\r\n                    currentPVPGamePlays[requestId].targetPlayer\r\n                ].lootingTimeout = block.timestamp + 86400; // players can only get looted once a day\r\n                emit gameCode(\r\n                    requestId,\r\n                    currentPVPGamePlays[requestId].player,\r\n                    totalWon\r\n                );\r\n                return;\r\n            }\r\n            emit gameCode(requestId, currentPVPGamePlays[requestId].player, 4);\r\n            return;\r\n        }\r\n        if (currentPVPGamePlays[requestId].breakInStyle == 2) {\r\n            // player is breaking in with strength\r\n            uint256 strengthInExperienceRequired = ((randomness % 786435) %\r\n                1000) + currentPVPGamePlays[requestId].targetPlayerStrength; // strength is used for daylight robbery\r\n            if (\r\n                currentPVPGamePlays[requestId].strength >\r\n                strengthInExperienceRequired\r\n            ) {\r\n                uint256 totalWon = jewelDepositLedger[\r\n                    currentPVPGamePlays[requestId].targetPlayer\r\n                ] / 20; // player can only lose 5% max each day\r\n                if (((randomness % 2214) % 2) == 1) {\r\n                    // gain XP!\r\n                    NFTCharacterDepositLedger[\r\n                        currentPVPGamePlays[requestId].player\r\n                    ].strength += 1;\r\n                }\r\n                jewelDepositLedger[\r\n                    currentPVPGamePlays[requestId].targetPlayer\r\n                ] -= totalWon;\r\n                jewelDepositLedger[\r\n                    currentPVPGamePlays[requestId].player\r\n                ] += totalWon;\r\n                NFTCharacterDepositLedger[currentPVPGamePlays[requestId].player]\r\n                    .lootingTimeout = block.timestamp + 86400; // players can only loot once a day\r\n                NFTCharacterDepositLedger[\r\n                    currentPVPGamePlays[requestId].targetPlayer\r\n                ].lootingTimeout = block.timestamp + 86400; // players can only get looted once a day\r\n                emit gameCode(\r\n                    requestId,\r\n                    currentPVPGamePlays[requestId].player,\r\n                    totalWon\r\n                );\r\n                return;\r\n            }\r\n            emit gameCode(requestId, currentPVPGamePlays[requestId].player, 4);\r\n            return;\r\n        }\r\n    }\r\n\r\n    function getRandomNumber() internal returns (bytes32 requestId) {\r\n        // internal\r\n        require(\r\n            LINK.balanceOf(address(this)) >= fee,\r\n            \"Not enough LINK - fill contract with faucet\"\r\n        );\r\n        return requestRandomness(keyHash, fee);\r\n    }\r\n\r\n    /**\r\n     * Callback function used by VRF Coordinator\r\n     */\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\r\n        internal\r\n        override\r\n    {\r\n        if (currentGameMode[requestId].gameMode == 0) {\r\n            vrfPlayGame(randomness, requestId);\r\n        }\r\n        if (currentGameMode[requestId].gameMode == 1) {\r\n            vrfJailBreak(randomness, requestId);\r\n        }\r\n        if (currentGameMode[requestId].gameMode == 2) {\r\n            vrfPlayPVP(randomness, requestId);\r\n        }\r\n    }\r\n\r\n    function changeInheritance(address newInheritor) public onlyOwner {\r\n        nextOwner = newInheritor;\r\n    }\r\n\r\n    function ownerCheckIn() public onlyOwner {\r\n        lastCheckIn = block.timestamp;\r\n    }\r\n\r\n    function changeCheckInTime(uint256 newCheckInTimeInterval)\r\n        public\r\n        onlyOwner\r\n    {\r\n        checkInTimeInterval = newCheckInTimeInterval; // let owner change check in case he know he will be away for a while.\r\n    }\r\n\r\n    function passDownInheritance() internal {\r\n        transferOwnership(nextOwner);\r\n    }\r\n\r\n    function checkUpkeep(\r\n        bytes calldata /* checkData */\r\n    )\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bool upkeepNeeded,\r\n            bytes memory /* performData */\r\n        )\r\n    {\r\n        return (\r\n            block.timestamp > (lastCheckIn + checkInTimeInterval),\r\n            bytes(\"\")\r\n        ); // make sure to check in at least once every 6 months\r\n    }\r\n\r\n    function performUpkeep(\r\n        bytes calldata /* performData */\r\n    ) external override onlyKeeper {\r\n        passDownInheritance();\r\n    }\r\n\r\n    function withdraw(uint256 amount) public onlyOwner returns (bool) {\r\n        require(amount <= address(this).balance);\r\n        payable(msg.sender).transfer(amount); //if the owner send to sender\r\n        return true;\r\n    }\r\n\r\n    function withdrawErc20(IERC20 token) public onlyOwner {\r\n        require(\r\n            token.transfer(msg.sender, token.balanceOf(address(this))),\r\n            \"Transfer failed\"\r\n        );\r\n    }\r\n\r\n    receive() external payable {\r\n        // nothing to do but accept money\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface internal immutable LINK;\n  address private immutable vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\n    private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(address _vrfCoordinator, address _link) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  ) internal pure returns (uint256) {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/SocialLegoStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\r\n\r\ncontract onlineStore is KeeperCompatibleInterface, Ownable {\r\n    address keeperRegistryAddress;\r\n    IERC20 socialLegoToken; //address of SocialLego token\r\n\r\n    modifier onlyKeeper() {\r\n        require(msg.sender == keeperRegistryAddress);\r\n        _;\r\n    }\r\n\r\n    uint256 public lastCheckIn = block.timestamp;\r\n    uint256 public checkInTimeInterval = 864000; //default to six months\r\n    address public nextOwner;\r\n\r\n    uint256 public massivePurchaseTokenPrice = 0.001 * 10**18; // 1 Million tokens is 1 Ether\r\n    uint256 public largePurchaseTokenPrice = 0.00015 * 10**18; // 100,000 tokens is 0.15 Ether\r\n    uint256 public mediumPurchaseTokenPrice = 0.00004 * 10**18; // 20,0000 tokens is 0.04 Ether\r\n    uint256 public smallPurchaseTokenPrice = 0.000025 * 10**18; // 10,0000 tokens is 0.025 Ether\r\n\r\n    constructor(address _keeperRegistryAddress, address _socialLegoToken) {\r\n        keeperRegistryAddress = _keeperRegistryAddress;\r\n        socialLegoToken = IERC20(_socialLegoToken);\r\n    }\r\n\r\n    function buyMassiveTokens() public payable {\r\n        // how many tokens they want to purchase\r\n        require(\r\n            socialLegoToken.balanceOf(address(this)) >= 1000000 * 10**10,\r\n            \"Not Enought Tokens in Contract\"\r\n        ); // require this contract to have at least 1,000,000 tokens before executing\r\n        require(\r\n            msg.value >= massivePurchaseTokenPrice,\r\n            \"Send the right amount of eth\"\r\n        ); // there is a bug when calling the contract through moralis that the msg.value did not equal required even though msg.value was correct.\r\n        socialLegoToken.transfer(msg.sender, 1000000 * 10**18); // send a million tokens.\r\n    }\r\n\r\n    function buyLargeTokens() public payable {\r\n        // how many tokens they want to purchase\r\n        require(\r\n            socialLegoToken.balanceOf(address(this)) >= 100000 * 10**10,\r\n            \"Not Enought Tokens in Contract\"\r\n        ); // require this contract to have at least 1,000,000 tokens before executing\r\n        require(\r\n            msg.value >= largePurchaseTokenPrice,\r\n            \"Send the right amount of eth\"\r\n        ); // require this contract to have at least 1,000,000 tokens before executing\r\n        socialLegoToken.transfer(msg.sender, 100000 * 10**18); // send 100,0000 tokens.\r\n    }\r\n\r\n    function buyMediumTokens() public payable {\r\n        // how many tokens they want to purchase\r\n        require(\r\n            socialLegoToken.balanceOf(address(this)) >= 20000 * 10**10,\r\n            \"Not Enought Tokens in Contract\"\r\n        ); // require this contract to have at least 1,000,000 tokens before executing\r\n        require(\r\n            msg.value >= mediumPurchaseTokenPrice,\r\n            \"Send the right amount of eth\"\r\n        ); // require this contract to have at least 1,000,000 tokens before executing\r\n        socialLegoToken.transfer(msg.sender, 20000 * 10**18); // send 20,0000 tokens.\r\n    }\r\n\r\n    function buySmallTokens() public payable {\r\n        // how many tokens they want to purchase\r\n        require(\r\n            socialLegoToken.balanceOf(address(this)) >= 10000 * 10**10,\r\n            \"Not Enought Tokens in Contract\"\r\n        ); // require this contract to have at least 1,000,000 tokens before executing\r\n        require(\r\n            msg.value >= smallPurchaseTokenPrice,\r\n            \"Send the right amount of eth\"\r\n        ); // require this contract to have at least 1,000,000 tokens before executing\r\n        socialLegoToken.transfer(msg.sender, 10000 * 10**18); // send 10,0000 tokens.\r\n    }\r\n\r\n    function withdrawErc20(IERC20 token) public onlyOwner {\r\n        //withdraw all ERC-20 that get accidently sent since this is an only ether store.\r\n        require(\r\n            token.transfer(msg.sender, token.balanceOf(address(this))),\r\n            \"Transfer failed\"\r\n        );\r\n    }\r\n\r\n    function withdraw(uint256 amount) public onlyOwner returns (bool) {\r\n        require(amount <= address(this).balance);\r\n        payable(msg.sender).transfer(amount); //if the owner send to sender\r\n        return true;\r\n    }\r\n\r\n    function setMassiveStorePrice(uint256 newPrice) public onlyOwner {\r\n        require(newPrice <= massivePurchaseTokenPrice * 2, \"too high price\"); // just in case you fat finger a number and accidently set a number too high or too low\r\n        require(newPrice >= massivePurchaseTokenPrice / 2, \"too low price\");\r\n        massivePurchaseTokenPrice = newPrice;\r\n    }\r\n\r\n    function setLargeStorePrice(uint256 newPrice) public onlyOwner {\r\n        require(newPrice <= largePurchaseTokenPrice * 2, \"too high price\"); // just in case you fat finger a number and accidently set a number too high or too low\r\n        require(newPrice >= largePurchaseTokenPrice / 2, \"too low price\");\r\n        largePurchaseTokenPrice = newPrice;\r\n    }\r\n\r\n    function setMediumStorePrice(uint256 newPrice) public onlyOwner {\r\n        require(newPrice <= mediumPurchaseTokenPrice * 2, \"too high price\"); // just in case you fat finger a number and accidently set a number too high or too low\r\n        require(newPrice >= mediumPurchaseTokenPrice / 2, \"too low price\");\r\n        mediumPurchaseTokenPrice = newPrice;\r\n    }\r\n\r\n    function setsmallStorePrice(uint256 newPrice) public onlyOwner {\r\n        require(newPrice <= smallPurchaseTokenPrice * 2, \"too high price\"); // just in case you fat finger a number and accidently set a number too high or too low\r\n        require(newPrice >= smallPurchaseTokenPrice / 2, \"too low price\");\r\n        smallPurchaseTokenPrice = newPrice;\r\n    }\r\n\r\n    function changeInheritance(address newInheritor) public onlyOwner {\r\n        nextOwner = newInheritor;\r\n    }\r\n\r\n    function ownerCheckIn() public onlyOwner {\r\n        lastCheckIn = block.timestamp;\r\n    }\r\n\r\n    function changeCheckInTime(uint256 newCheckInTimeInterval)\r\n        public\r\n        onlyOwner\r\n    {\r\n        checkInTimeInterval = newCheckInTimeInterval; // let owner change check in case he know he will be away for a while.\r\n    }\r\n\r\n    function passDownInheritance() internal {\r\n        transferOwnership(nextOwner);\r\n    }\r\n\r\n    function checkUpkeep(\r\n        bytes calldata /* checkData */\r\n    )\r\n        external\r\n        override\r\n        returns (\r\n            bool upkeepNeeded,\r\n            bytes memory /* performData */\r\n        )\r\n    {\r\n        //upkeepNeeded = (block.timestamp > (lastCheck + 5184000));\r\n        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.\r\n        return (\r\n            block.timestamp > (lastCheckIn + checkInTimeInterval),\r\n            bytes(\"\")\r\n        ); // make sure to check in at least once every 6 months\r\n    }\r\n\r\n    function performUpkeep(\r\n        bytes calldata /* performData */\r\n    ) external override onlyKeeper {\r\n        passDownInheritance();\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/SocialLegoToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract SocialLegoToken is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply = 1 * 10**30;\r\n\r\n    string private _name = \"SocialLego\";\r\n    string private _symbol = \"SL\";\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor() {\r\n        _balances[msg.sender] = _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/breakInNFTMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\r\n\r\ncontract NFTMint is\r\n    ERC721,\r\n    VRFConsumerBase,\r\n    Ownable,\r\n    KeeperCompatibleInterface\r\n{\r\n    bytes32 internal keyHash;\r\n    uint256 internal fee;\r\n\r\n    uint256 public mintFee = 0.002 * 10**18;\r\n    uint256 public randomResult;\r\n\r\n    uint256 public lastCheckIn = block.timestamp;\r\n    uint256 public checkInTimeInterval = 864000; //default to six months\r\n    address public nextOwner;\r\n\r\n    address keeperRegistryAddress;\r\n    address gameAddress;\r\n\r\n    modifier onlyGame() {\r\n        require(msg.sender == gameAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyKeeper() {\r\n        require(msg.sender == keeperRegistryAddress);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _vrfCoordinator,\r\n        address _link,\r\n        address _keeperRegistryAddress\r\n    ) VRFConsumerBase(_vrfCoordinator, _link) ERC721(\"BreakInNFTs\", \"BIN\") {\r\n        keyHash = 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4;\r\n        fee = 0.1 * 10**18; // 0.1 LINK (Varies by network)\r\n\r\n        keeperRegistryAddress = _keeperRegistryAddress;\r\n    }\r\n\r\n    struct NFTCharacter {\r\n        string name;\r\n        uint256 born;\r\n        uint256 health;\r\n        uint256 agility;\r\n        uint256 strength;\r\n        uint256 sneak;\r\n        uint256 charm;\r\n        uint256 characterID;\r\n    }\r\n    struct mintableNFTCharacter {\r\n        uint256 health;\r\n        uint256 agility;\r\n        uint256 strength;\r\n        uint256 sneak;\r\n        uint256 charm;\r\n        string imageURI;\r\n        string name;\r\n        string description;\r\n    }\r\n    uint256 public totalMintableCharacters;\r\n\r\n    mapping(uint256 => mintableNFTCharacter) public mintableNFTCharacterStruct; //\r\n    mapping(bytes32 => NFTCharacter) NFTCharacterStruct; //\r\n    mapping(bytes32 => address) requestToSender; //\r\n    NFTCharacter[] public characters;\r\n\r\n    //anyone can add characters that they want to mint so long as it fits a predefined scheme\r\n    function addCharacterOne(\r\n        uint256 health,\r\n        string memory imageURI,\r\n        string memory name,\r\n        string memory description\r\n    ) public {\r\n        uint256 characterID = totalMintableCharacters;\r\n        mintableNFTCharacterStruct[characterID].health = health;\r\n        mintableNFTCharacterStruct[characterID].agility = 250;\r\n        mintableNFTCharacterStruct[characterID].strength = 250;\r\n        mintableNFTCharacterStruct[characterID].sneak = 500;\r\n        mintableNFTCharacterStruct[characterID].charm = 250;\r\n        mintableNFTCharacterStruct[characterID].imageURI = imageURI;\r\n        mintableNFTCharacterStruct[characterID].name = name;\r\n        mintableNFTCharacterStruct[characterID].description = description;\r\n        totalMintableCharacters += 1;\r\n    }\r\n\r\n    function addCharacterTwo(\r\n        uint256 health,\r\n        string memory imageURI,\r\n        string memory name,\r\n        string memory description\r\n    ) public {\r\n        uint256 characterID = totalMintableCharacters;\r\n        mintableNFTCharacterStruct[characterID].health = health;\r\n        mintableNFTCharacterStruct[characterID].agility = 250;\r\n        mintableNFTCharacterStruct[characterID].strength = 250;\r\n        mintableNFTCharacterStruct[characterID].sneak = 250;\r\n        mintableNFTCharacterStruct[characterID].charm = 500;\r\n        mintableNFTCharacterStruct[characterID].imageURI = imageURI;\r\n        mintableNFTCharacterStruct[characterID].name = name;\r\n        mintableNFTCharacterStruct[characterID].description = description;\r\n        totalMintableCharacters += 1;\r\n    }\r\n\r\n    function addCharacterThree(\r\n        uint256 health,\r\n        string memory imageURI,\r\n        string memory name,\r\n        string memory description\r\n    ) public {\r\n        uint256 characterID = totalMintableCharacters;\r\n        mintableNFTCharacterStruct[characterID].health = health;\r\n        mintableNFTCharacterStruct[characterID].agility = 250;\r\n        mintableNFTCharacterStruct[characterID].strength = 500;\r\n        mintableNFTCharacterStruct[characterID].sneak = 250;\r\n        mintableNFTCharacterStruct[characterID].charm = 250;\r\n        mintableNFTCharacterStruct[characterID].imageURI = imageURI;\r\n        mintableNFTCharacterStruct[characterID].name = name;\r\n        mintableNFTCharacterStruct[characterID].description = description;\r\n        totalMintableCharacters += 1;\r\n    }\r\n\r\n    function getNFTAttributes(uint256 NFTID)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 agility,\r\n            uint256 strength,\r\n            uint256 charm,\r\n            uint256 sneak,\r\n            uint256 health\r\n        )\r\n    {\r\n        return (\r\n            characters[NFTID].agility,\r\n            characters[NFTID].strength,\r\n            characters[NFTID].charm,\r\n            characters[NFTID].sneak,\r\n            characters[NFTID].health\r\n        );\r\n    }\r\n\r\n    function changeDescription(uint256 characterID, string memory description)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        //So I can fill in the character description later. Wouldn't be in mainnet\r\n        mintableNFTCharacterStruct[characterID].description = description;\r\n        return true;\r\n    }\r\n\r\n    function changeImageURI(uint256 characterID, string memory imageURI)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        //Just in case the image changes. Wouldn't be in mainnet\r\n        mintableNFTCharacterStruct[characterID].imageURI = imageURI;\r\n        return true;\r\n    }\r\n\r\n    function mintAnyCharacter(string memory name, uint256 characterID)\r\n        public\r\n        payable\r\n        returns (bytes32)\r\n    {\r\n        require(\r\n            LINK.balanceOf(address(this)) >= fee,\r\n            \"Not enough LINK - fill contract with faucet\"\r\n        );\r\n        require(\r\n            characterID < totalMintableCharacters,\r\n            \"No Character With That ID\"\r\n        );\r\n        require(msg.value >= mintFee, \"Send 0.002 Ether to mint New Character\"); //someone gotta pay for the vrf fee and to prevent spamming of new characters\r\n        bytes32 requestID = requestRandomness(keyHash, fee);\r\n        requestToSender[requestID] = msg.sender;\r\n        NFTCharacterStruct[requestID].name = name;\r\n        NFTCharacterStruct[requestID].health = mintableNFTCharacterStruct[\r\n            characterID\r\n        ].health;\r\n        NFTCharacterStruct[requestID].agility = mintableNFTCharacterStruct[\r\n            characterID\r\n        ].agility;\r\n        NFTCharacterStruct[requestID].strength = mintableNFTCharacterStruct[\r\n            characterID\r\n        ].strength;\r\n        NFTCharacterStruct[requestID].sneak = mintableNFTCharacterStruct[\r\n            characterID\r\n        ].sneak;\r\n        NFTCharacterStruct[requestID].charm = mintableNFTCharacterStruct[\r\n            characterID\r\n        ].charm;\r\n        NFTCharacterStruct[requestID].characterID = characterID;\r\n        return requestID;\r\n    }\r\n\r\n    // Hire me please\r\n    function changeNFTAttributes(\r\n        uint256 NFTID,\r\n        uint256 health,\r\n        uint256 agility,\r\n        uint256 strength,\r\n        uint256 sneak,\r\n        uint256 charm\r\n    ) external onlyGame returns (bool) {\r\n        //allows the game to modify character attributes.\r\n        characters[NFTID].health = health;\r\n        characters[NFTID].agility = agility;\r\n        characters[NFTID].strength = strength;\r\n        characters[NFTID].sneak = sneak;\r\n        characters[NFTID].charm = charm;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Requests randomness\r\n     */\r\n\r\n    function getRandomNumber() internal returns (bytes32 requestId) {\r\n        // internal\r\n        require(\r\n            LINK.balanceOf(address(this)) >= fee,\r\n            \"Not enough LINK - fill contract with faucet\"\r\n        );\r\n        return requestRandomness(keyHash, fee);\r\n    }\r\n\r\n    /**\r\n     * Callback function used by VRF Coordinator\r\n     */\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\r\n        internal\r\n        override\r\n    {\r\n        uint256 newID = characters.length;\r\n        uint256 agility = NFTCharacterStruct[requestId].agility +\r\n            (randomness % 100);\r\n        uint256 strength = NFTCharacterStruct[requestId].strength +\r\n            ((randomness % 123456) % 100);\r\n        uint256 sneak = NFTCharacterStruct[requestId].sneak +\r\n            ((randomness % 654321) % 100);\r\n        uint256 charm = NFTCharacterStruct[requestId].charm +\r\n            ((randomness % 33576) % 100);\r\n        uint256 born = block.timestamp;\r\n        characters.push(\r\n            NFTCharacter(\r\n                NFTCharacterStruct[requestId].name,\r\n                born,\r\n                NFTCharacterStruct[requestId].health,\r\n                agility,\r\n                strength,\r\n                sneak,\r\n                charm,\r\n                NFTCharacterStruct[requestId].characterID\r\n            )\r\n        );\r\n        _safeMint(requestToSender[requestId], newID);\r\n    }\r\n\r\n    function changeMintFee(uint256 newMintFee) public onlyOwner {\r\n        mintFee = newMintFee;\r\n        lastCheckIn = block.timestamp;\r\n    }\r\n\r\n    function changeGameAddress(address newGameAddress) public onlyOwner {\r\n        //this function would be only called once at the begnning to allow only the game to modify character attributes. On mainnet it would include onlyGame\r\n        gameAddress = newGameAddress;\r\n    }\r\n\r\n    function changeInheritance(address newInheritor) public onlyOwner {\r\n        nextOwner = newInheritor;\r\n        lastCheckIn = block.timestamp;\r\n    }\r\n\r\n    function ownerCheckIn() public onlyOwner {\r\n        lastCheckIn = block.timestamp;\r\n    }\r\n\r\n    function changeCheckInTime(uint256 newCheckInTimeInterval)\r\n        public\r\n        onlyOwner\r\n    {\r\n        checkInTimeInterval = newCheckInTimeInterval; // let owner change check in case he know he will be away for a while.\r\n        lastCheckIn = block.timestamp;\r\n    }\r\n\r\n    function passDownInheritance() internal {\r\n        transferOwnership(nextOwner);\r\n    }\r\n\r\n    function checkUpkeep(\r\n        bytes calldata /* checkData */\r\n    )\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bool upkeepNeeded,\r\n            bytes memory /* performData */\r\n        )\r\n    {\r\n        return (\r\n            block.timestamp > (lastCheckIn + checkInTimeInterval),\r\n            bytes(\"\")\r\n        ); // make sure to check in at least once every 6 months\r\n    }\r\n\r\n    function performUpkeep(\r\n        bytes calldata /* performData */\r\n    ) external override onlyKeeper {\r\n        passDownInheritance();\r\n    }\r\n\r\n    function withdraw(uint256 amount) public onlyOwner returns (bool) {\r\n        require(amount <= address(this).balance);\r\n        payable(msg.sender).transfer(amount); //if the owner send to sender\r\n        return true;\r\n    }\r\n\r\n    function withdrawErc20(IERC20 token) public onlyOwner {\r\n        require(\r\n            token.transfer(msg.sender, token.balanceOf(address(this))),\r\n            \"Transfer failed\"\r\n        );\r\n    }\r\n\r\n    receive() external payable {\r\n        // nothing to do but accept money\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/SocialLego.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\r\n\r\ncontract SocialLego is KeeperCompatibleInterface, Ownable {\r\n    address keeperRegistryAddress;\r\n\r\n    modifier onlyKeeper() {\r\n        require(msg.sender == keeperRegistryAddress);\r\n        _;\r\n    }\r\n\r\n    uint256 public lastCheckIn = block.timestamp;\r\n    uint256 public checkInTimeInterval = 864000; //default to six months\r\n    address public nextOwner;\r\n\r\n    struct Comment {\r\n        address commenter;\r\n        string message;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    struct Post {\r\n        uint256 numberOfLikes;\r\n        uint256 timestamp;\r\n        string message;\r\n        string url;\r\n        uint256 totalComments; // list of userPosts. probably can remove\r\n        mapping(uint256 => Comment) commentStructs; // mapping of postkey to post\r\n    }\r\n\r\n    struct userProfile {\r\n        bool exists;\r\n        address userAddress; // Might not need\r\n        string profileImageUrl;\r\n        string userProfileBio;\r\n        string userNickname;\r\n        uint256 followerCount;\r\n        uint256 joinDate;\r\n        uint256 featuredPost;\r\n        uint256 userPosts; // list of userPosts. probably can remove\r\n        mapping(uint256 => Post) postStructs; // mapping of postkey to post\r\n    }\r\n\r\n    mapping(address => userProfile) userProfileStructs; // mapping useraddress to user profile\r\n    address[] userProfileList; // list of user profiles\r\n    event sendMessageEvent(\r\n        address senderAddress,\r\n        address recipientAddress,\r\n        uint256 time,\r\n        string message\r\n    );\r\n    event newPost(address senderAddress, uint256 postID);\r\n\r\n    constructor(address _keeperRegistryAddress) {\r\n        keeperRegistryAddress = _keeperRegistryAddress;\r\n    }\r\n\r\n    function sendMessage(address recipientAddress, string memory message)\r\n        public\r\n    {\r\n        require(\r\n            userProfileStructs[msg.sender].exists == true,\r\n            \"Create an Account to Post\"\r\n        ); // Check to see if they have an account\r\n        emit sendMessageEvent(\r\n            msg.sender,\r\n            recipientAddress,\r\n            block.timestamp,\r\n            message\r\n        );\r\n    }\r\n\r\n    function newProfile(string memory newProfileBio, string memory nickName)\r\n        public\r\n        returns (\r\n            // onlyOwner\r\n            bool success\r\n        )\r\n    {\r\n        require(\r\n            userProfileStructs[msg.sender].exists == false,\r\n            \"Account Already Created\"\r\n        ); // Check to see if they have an account\r\n        userProfileStructs[msg.sender].userProfileBio = newProfileBio;\r\n        userProfileStructs[msg.sender].userNickname = nickName;\r\n        userProfileStructs[msg.sender].followerCount = 0;\r\n        userProfileStructs[msg.sender].exists = true;\r\n        userProfileStructs[msg.sender].joinDate = block.timestamp;\r\n        userProfileStructs[msg.sender].featuredPost = 0;\r\n        userProfileStructs[msg.sender].userProfileBio = \"\";\r\n        userProfileList.push(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function getUserProfile(address userAddress)\r\n        public\r\n        view\r\n        returns (\r\n            string memory profileBio,\r\n            uint256 totalPosts,\r\n            uint256 joinDate,\r\n            uint256 followerCount,\r\n            string memory userNickname,\r\n            uint256 featuredPost,\r\n            string memory profileImageUrl\r\n        )\r\n    {\r\n        return (\r\n            userProfileStructs[userAddress].userProfileBio,\r\n            userProfileStructs[userAddress].userPosts,\r\n            userProfileStructs[userAddress].joinDate,\r\n            userProfileStructs[userAddress].followerCount,\r\n            userProfileStructs[userAddress].userNickname,\r\n            userProfileStructs[userAddress].featuredPost,\r\n            userProfileStructs[userAddress].profileImageUrl\r\n        );\r\n    }\r\n\r\n    function addPost(string memory messageText, string memory url)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            userProfileStructs[msg.sender].exists == true,\r\n            \"Create an Account to Post\"\r\n        ); // Check to see if they have an account\r\n        uint256 postID = (userProfileStructs[msg.sender].userPosts); // ID is just an increment. No need to be random since it is associated to each unique account\r\n        userProfileStructs[msg.sender].userPosts += 1;\r\n        userProfileStructs[msg.sender]\r\n            .postStructs[postID]\r\n            .message = messageText;\r\n        userProfileStructs[msg.sender].postStructs[postID].timestamp = block\r\n            .timestamp;\r\n        userProfileStructs[msg.sender].postStructs[postID].numberOfLikes = 0;\r\n        userProfileStructs[msg.sender].postStructs[postID].url = url;\r\n        emit newPost(msg.sender, postID); // emit a post to be used on the explore page\r\n        return true;\r\n    }\r\n\r\n    function addComment(\r\n        address postOwner,\r\n        uint256 postID,\r\n        string memory commentText\r\n    ) public returns (bool success) {\r\n        require(\r\n            userProfileStructs[msg.sender].exists == true,\r\n            \"Create an Account to Comment\"\r\n        ); // Check to see if they have an account\r\n        require(\r\n            userProfileStructs[postOwner].postStructs[postID].timestamp != 0,\r\n            \"No Post Exists\"\r\n        ); //Check to see if comment exists. Timestamps default to 0\r\n        uint256 commentID = userProfileStructs[postOwner]\r\n            .postStructs[postID]\r\n            .totalComments; // ID is just an increment. No need to be random since it is associated to each unique account\r\n        userProfileStructs[postOwner].postStructs[postID].totalComments += 1;\r\n        userProfileStructs[postOwner]\r\n            .postStructs[postID]\r\n            .commentStructs[commentID]\r\n            .commenter = msg.sender;\r\n        userProfileStructs[postOwner]\r\n            .postStructs[postID]\r\n            .commentStructs[commentID]\r\n            .message = commentText;\r\n        userProfileStructs[postOwner]\r\n            .postStructs[postID]\r\n            .commentStructs[commentID]\r\n            .timestamp = block.timestamp;\r\n        return true;\r\n    }\r\n\r\n    function getComment(\r\n        address postOwner,\r\n        uint256 postID,\r\n        uint256 commentID\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            address commenter,\r\n            string memory message,\r\n            uint256 timestamp,\r\n            string memory userNickname,\r\n            string memory profileImageUrl\r\n        )\r\n    {\r\n        return (\r\n            userProfileStructs[postOwner]\r\n                .postStructs[postID]\r\n                .commentStructs[commentID]\r\n                .commenter,\r\n            userProfileStructs[postOwner]\r\n                .postStructs[postID]\r\n                .commentStructs[commentID]\r\n                .message,\r\n            userProfileStructs[postOwner]\r\n                .postStructs[postID]\r\n                .commentStructs[commentID]\r\n                .timestamp,\r\n            userProfileStructs[\r\n                userProfileStructs[postOwner]\r\n                    .postStructs[postID]\r\n                    .commentStructs[commentID]\r\n                    .commenter\r\n            ].userNickname,\r\n            userProfileStructs[\r\n                userProfileStructs[postOwner]\r\n                    .postStructs[postID]\r\n                    .commentStructs[commentID]\r\n                    .commenter\r\n            ].profileImageUrl\r\n        );\r\n    }\r\n\r\n    // Please Hire me\r\n\r\n    function changeUserBio(string memory bioText)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            userProfileStructs[msg.sender].exists == true,\r\n            \"Create an Account First\"\r\n        ); // Check to see if they have an account\r\n        userProfileStructs[msg.sender].userProfileBio = bioText;\r\n        return true;\r\n    }\r\n\r\n    function changeUserProfilePicture(string memory url)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            userProfileStructs[msg.sender].exists == true,\r\n            \"Create an Account First\"\r\n        ); // Check to see if they have an account\r\n        userProfileStructs[msg.sender].profileImageUrl = url;\r\n        return true;\r\n    }\r\n\r\n    function changeUserNickname(string memory newNickName)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            userProfileStructs[msg.sender].exists == true,\r\n            \"Create an Account First\"\r\n        ); // Check to see if they have an account\r\n        userProfileStructs[msg.sender].userNickname = newNickName;\r\n        return true;\r\n    }\r\n\r\n    function changeFeaturedPost(uint256 postNumber)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            userProfileStructs[msg.sender].exists == true,\r\n            \"Create an Account First\"\r\n        ); // Check to see if they have an account\r\n        userProfileStructs[msg.sender].featuredPost = postNumber;\r\n        return true;\r\n    }\r\n\r\n    function getUserPost(address userAddress, uint256 postKey)\r\n        external\r\n        view\r\n        returns (\r\n            string memory message,\r\n            uint256 numberOfLikes,\r\n            uint256 timestamp,\r\n            string memory url,\r\n            string memory userNickname,\r\n            uint256 totalComments\r\n        )\r\n    {\r\n        return (\r\n            userProfileStructs[userAddress].postStructs[postKey].message,\r\n            userProfileStructs[userAddress].postStructs[postKey].numberOfLikes,\r\n            userProfileStructs[userAddress].postStructs[postKey].timestamp,\r\n            userProfileStructs[userAddress].postStructs[postKey].url,\r\n            userProfileStructs[userAddress].userNickname,\r\n            userProfileStructs[userAddress].postStructs[postKey].totalComments\r\n        ); // stack is too deep if I try to call profileImageUrl as well\r\n    }\r\n\r\n    function getAllUserPosts(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256 userPosts)\r\n    {\r\n        return (userProfileStructs[userAddress].userPosts);\r\n    }\r\n\r\n    function getTotalUsers() public view returns (uint256 totalUsers) {\r\n        return userProfileList.length;\r\n    }\r\n\r\n    function likePost(address userAddress, uint256 postKey)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            userProfileStructs[msg.sender].exists == true,\r\n            \"Create an Account First\"\r\n        ); // Check to see if they have an account\r\n        userProfileStructs[userAddress].postStructs[postKey].numberOfLikes += 1;\r\n        return true;\r\n    }\r\n\r\n    function followUser(address userAddress) public returns (bool success) {\r\n        require(\r\n            userProfileStructs[msg.sender].exists == true,\r\n            \"Create an Account First\"\r\n        ); // Check to see if they have an account\r\n        userProfileStructs[userAddress].followerCount += 1;\r\n        return true;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    // Hire me so I don’t grow to be your competitor ;)\r\n\r\n    function changeInheritance(address newInheritor) public onlyOwner {\r\n        nextOwner = newInheritor;\r\n    }\r\n\r\n    function ownerCheckIn() public onlyOwner {\r\n        lastCheckIn = block.timestamp;\r\n    }\r\n\r\n    function changeCheckInTime(uint256 newCheckInTimeInterval)\r\n        public\r\n        onlyOwner\r\n    {\r\n        checkInTimeInterval = newCheckInTimeInterval; // let owner change check in case he know he will be away for a while.\r\n    }\r\n\r\n    function passDownInheritance() internal {\r\n        transferOwnership(nextOwner);\r\n    }\r\n\r\n    function checkUpkeep(\r\n        bytes calldata /* checkData */\r\n    )\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bool upkeepNeeded,\r\n            bytes memory /* performData */\r\n        )\r\n    {\r\n        return (\r\n            block.timestamp > (lastCheckIn + checkInTimeInterval),\r\n            bytes(\"\")\r\n        ); // make sure to check in at least once every 6 months\r\n    }\r\n\r\n    function performUpkeep(\r\n        bytes calldata /* performData */\r\n    ) external override onlyKeeper {\r\n        passDownInheritance();\r\n    }\r\n\r\n    function withdraw(uint256 amount) public onlyOwner returns (bool) {\r\n        require(amount <= address(this).balance);\r\n        payable(msg.sender).transfer(amount); //if the owner send to sender\r\n        return true;\r\n    }\r\n\r\n    function withdrawErc20(IERC20 token) public onlyOwner {\r\n        require(\r\n            token.transfer(msg.sender, token.balanceOf(address(this))),\r\n            \"Transfer failed\"\r\n        );\r\n    }\r\n\r\n    receive() external payable {\r\n        // nothing to do but accept money\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
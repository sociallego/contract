{
  "address": "0x94e15D2c069B05B015D41D87268dB00743fbf34B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperRegistryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "senderAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "postID",
          "type": "uint256"
        }
      ],
      "name": "newPost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "senderAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipientAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "sendMessageEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "postOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "postID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "commentText",
          "type": "string"
        }
      ],
      "name": "addComment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "messageText",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "addPost",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCheckInTimeInterval",
          "type": "uint256"
        }
      ],
      "name": "changeCheckInTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postNumber",
          "type": "uint256"
        }
      ],
      "name": "changeFeaturedPost",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newInheritor",
          "type": "address"
        }
      ],
      "name": "changeInheritance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "bioText",
          "type": "string"
        }
      ],
      "name": "changeUserBio",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newNickName",
          "type": "string"
        }
      ],
      "name": "changeUserNickname",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "changeUserProfilePicture",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkInTimeInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "followUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getAllUserPosts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userPosts",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "postOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "postID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commentID",
          "type": "uint256"
        }
      ],
      "name": "getComment",
      "outputs": [
        {
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "userNickname",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "profileImageUrl",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalUsers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalUsers",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "postKey",
          "type": "uint256"
        }
      ],
      "name": "getUserPost",
      "outputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "numberOfLikes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "userNickname",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalComments",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserProfile",
      "outputs": [
        {
          "internalType": "string",
          "name": "profileBio",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalPosts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "joinDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "followerCount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "userNickname",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "featuredPost",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "profileImageUrl",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastCheckIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "postKey",
          "type": "uint256"
        }
      ],
      "name": "likePost",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newProfileBio",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nickName",
          "type": "string"
        }
      ],
      "name": "newProfile",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerCheckIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipientAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9e9d3308d521c6872230da14b1d3634e4be6370196a70e165205c898c92016d1",
  "receipt": {
    "to": null,
    "from": "0xDeAdA90a7B242FC396eB277717a31e67A6005c93",
    "contractAddress": "0x94e15D2c069B05B015D41D87268dB00743fbf34B",
    "transactionIndex": 1,
    "gasUsed": "1785754",
    "logsBloom": "0x
    "blockHash": "0xcdcbf24fd50e3b1865d1a7f5b1caf2ec4f2333ec93a562e680f58e195d905784",
    "transactionHash": "0x9e9d3308d521c6872230da14b1d3634e4be6370196a70e165205c898c92016d1",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 31833390,
        "transactionHash": "0x9e9d3308d521c6872230da14b1d3634e4be6370196a70e165205c898c92016d1",
        "address": "0x94e15D2c069B05B015D41D87268dB00743fbf34B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000deada90a7b242fc396eb277717a31e67a6005c93"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xcdcbf24fd50e3b1865d1a7f5b1caf2ec4f2333ec93a562e680f58e195d905784"
      }
    ],
    "blockNumber": 31833390,
    "cumulativeGasUsed": "1839594",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4Cb093f226983713164A62138C3F718A5b595F73"
  ],
  "solcInputHash": "52cd551a9a60518d921f00baa5025adf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"postID\",\"type\":\"uint256\"}],\"name\":\"newPost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"sendMessageEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"postOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"postID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"commentText\",\"type\":\"string\"}],\"name\":\"addComment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"messageText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"addPost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCheckInTimeInterval\",\"type\":\"uint256\"}],\"name\":\"changeCheckInTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postNumber\",\"type\":\"uint256\"}],\"name\":\"changeFeaturedPost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newInheritor\",\"type\":\"address\"}],\"name\":\"changeInheritance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"bioText\",\"type\":\"string\"}],\"name\":\"changeUserBio\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newNickName\",\"type\":\"string\"}],\"name\":\"changeUserNickname\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"changeUserProfilePicture\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkInTimeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"followUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAllUserPosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userPosts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"postOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"postID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commentID\",\"type\":\"uint256\"}],\"name\":\"getComment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"userNickname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"profileImageUrl\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUsers\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"postKey\",\"type\":\"uint256\"}],\"name\":\"getUserPost\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numberOfLikes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"userNickname\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalComments\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserProfile\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"profileBio\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalPosts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"followerCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"userNickname\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"featuredPost\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"profileImageUrl\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCheckIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"postKey\",\"type\":\"uint256\"}],\"name\":\"likePost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newProfileBio\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nickName\",\"type\":\"string\"}],\"name\":\"newProfile\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCheckIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SocialLego.sol\":\"SocialLego\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/SocialLego.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n\\r\\ncontract SocialLego is KeeperCompatibleInterface, Ownable {\\r\\n    address keeperRegistryAddress;\\r\\n\\r\\n    modifier onlyKeeper() {\\r\\n        require(msg.sender == keeperRegistryAddress);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    uint256 public lastCheckIn = block.timestamp;\\r\\n    uint256 public checkInTimeInterval = 864000; //default to six months\\r\\n    address public nextOwner;\\r\\n\\r\\n    struct Comment {\\r\\n        address commenter;\\r\\n        string message;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n\\r\\n    struct Post {\\r\\n        uint256 numberOfLikes;\\r\\n        uint256 timestamp;\\r\\n        string message;\\r\\n        string url;\\r\\n        uint256 totalComments; // list of userPosts. probably can remove\\r\\n        mapping(uint256 => Comment) commentStructs; // mapping of postkey to post\\r\\n    }\\r\\n\\r\\n    struct userProfile {\\r\\n        bool exists;\\r\\n        address userAddress; // Might not need\\r\\n        string profileImageUrl;\\r\\n        string userProfileBio;\\r\\n        string userNickname;\\r\\n        uint256 followerCount;\\r\\n        uint256 joinDate;\\r\\n        uint256 featuredPost;\\r\\n        uint256 userPosts; // list of userPosts. probably can remove\\r\\n        mapping(uint256 => Post) postStructs; // mapping of postkey to post\\r\\n    }\\r\\n\\r\\n    mapping(address => userProfile) userProfileStructs; // mapping useraddress to user profile\\r\\n    address[] userProfileList; // list of user profiles\\r\\n    event sendMessageEvent(\\r\\n        address senderAddress,\\r\\n        address recipientAddress,\\r\\n        uint256 time,\\r\\n        string message\\r\\n    );\\r\\n    event newPost(address senderAddress, uint256 postID);\\r\\n\\r\\n    constructor(address _keeperRegistryAddress) {\\r\\n        keeperRegistryAddress = _keeperRegistryAddress;\\r\\n    }\\r\\n\\r\\n    function sendMessage(address recipientAddress, string memory message)\\r\\n        public\\r\\n    {\\r\\n        require(\\r\\n            userProfileStructs[msg.sender].exists == true,\\r\\n            \\\"Create an Account to Post\\\"\\r\\n        ); // Check to see if they have an account\\r\\n        emit sendMessageEvent(\\r\\n            msg.sender,\\r\\n            recipientAddress,\\r\\n            block.timestamp,\\r\\n            message\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function newProfile(string memory newProfileBio, string memory nickName)\\r\\n        public\\r\\n        returns (\\r\\n            // onlyOwner\\r\\n            bool success\\r\\n        )\\r\\n    {\\r\\n        require(\\r\\n            userProfileStructs[msg.sender].exists == false,\\r\\n            \\\"Account Already Created\\\"\\r\\n        ); // Check to see if they have an account\\r\\n        userProfileStructs[msg.sender].userProfileBio = newProfileBio;\\r\\n        userProfileStructs[msg.sender].userNickname = nickName;\\r\\n        userProfileStructs[msg.sender].followerCount = 0;\\r\\n        userProfileStructs[msg.sender].exists = true;\\r\\n        userProfileStructs[msg.sender].joinDate = block.timestamp;\\r\\n        userProfileStructs[msg.sender].featuredPost = 0;\\r\\n        userProfileStructs[msg.sender].userProfileBio = \\\"\\\";\\r\\n        userProfileList.push(msg.sender);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getUserProfile(address userAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            string memory profileBio,\\r\\n            uint256 totalPosts,\\r\\n            uint256 joinDate,\\r\\n            uint256 followerCount,\\r\\n            string memory userNickname,\\r\\n            uint256 featuredPost,\\r\\n            string memory profileImageUrl\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            userProfileStructs[userAddress].userProfileBio,\\r\\n            userProfileStructs[userAddress].userPosts,\\r\\n            userProfileStructs[userAddress].joinDate,\\r\\n            userProfileStructs[userAddress].followerCount,\\r\\n            userProfileStructs[userAddress].userNickname,\\r\\n            userProfileStructs[userAddress].featuredPost,\\r\\n            userProfileStructs[userAddress].profileImageUrl\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addPost(string memory messageText, string memory url)\\r\\n        public\\r\\n        returns (bool success)\\r\\n    {\\r\\n        require(\\r\\n            userProfileStructs[msg.sender].exists == true,\\r\\n            \\\"Create an Account to Post\\\"\\r\\n        ); // Check to see if they have an account\\r\\n        uint256 postID = (userProfileStructs[msg.sender].userPosts); // ID is just an increment. No need to be random since it is associated to each unique account\\r\\n        userProfileStructs[msg.sender].userPosts += 1;\\r\\n        userProfileStructs[msg.sender]\\r\\n            .postStructs[postID]\\r\\n            .message = messageText;\\r\\n        userProfileStructs[msg.sender].postStructs[postID].timestamp = block\\r\\n            .timestamp;\\r\\n        userProfileStructs[msg.sender].postStructs[postID].numberOfLikes = 0;\\r\\n        userProfileStructs[msg.sender].postStructs[postID].url = url;\\r\\n        emit newPost(msg.sender, postID); // emit a post to be used on the explore page\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function addComment(\\r\\n        address postOwner,\\r\\n        uint256 postID,\\r\\n        string memory commentText\\r\\n    ) public returns (bool success) {\\r\\n        require(\\r\\n            userProfileStructs[msg.sender].exists == true,\\r\\n            \\\"Create an Account to Comment\\\"\\r\\n        ); // Check to see if they have an account\\r\\n        require(\\r\\n            userProfileStructs[postOwner].postStructs[postID].timestamp != 0,\\r\\n            \\\"No Post Exists\\\"\\r\\n        ); //Check to see if comment exists. Timestamps default to 0\\r\\n        uint256 commentID = userProfileStructs[postOwner]\\r\\n            .postStructs[postID]\\r\\n            .totalComments; // ID is just an increment. No need to be random since it is associated to each unique account\\r\\n        userProfileStructs[postOwner].postStructs[postID].totalComments += 1;\\r\\n        userProfileStructs[postOwner]\\r\\n            .postStructs[postID]\\r\\n            .commentStructs[commentID]\\r\\n            .commenter = msg.sender;\\r\\n        userProfileStructs[postOwner]\\r\\n            .postStructs[postID]\\r\\n            .commentStructs[commentID]\\r\\n            .message = commentText;\\r\\n        userProfileStructs[postOwner]\\r\\n            .postStructs[postID]\\r\\n            .commentStructs[commentID]\\r\\n            .timestamp = block.timestamp;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getComment(\\r\\n        address postOwner,\\r\\n        uint256 postID,\\r\\n        uint256 commentID\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            address commenter,\\r\\n            string memory message,\\r\\n            uint256 timestamp,\\r\\n            string memory userNickname,\\r\\n            string memory profileImageUrl\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            userProfileStructs[postOwner]\\r\\n                .postStructs[postID]\\r\\n                .commentStructs[commentID]\\r\\n                .commenter,\\r\\n            userProfileStructs[postOwner]\\r\\n                .postStructs[postID]\\r\\n                .commentStructs[commentID]\\r\\n                .message,\\r\\n            userProfileStructs[postOwner]\\r\\n                .postStructs[postID]\\r\\n                .commentStructs[commentID]\\r\\n                .timestamp,\\r\\n            userProfileStructs[\\r\\n                userProfileStructs[postOwner]\\r\\n                    .postStructs[postID]\\r\\n                    .commentStructs[commentID]\\r\\n                    .commenter\\r\\n            ].userNickname,\\r\\n            userProfileStructs[\\r\\n                userProfileStructs[postOwner]\\r\\n                    .postStructs[postID]\\r\\n                    .commentStructs[commentID]\\r\\n                    .commenter\\r\\n            ].profileImageUrl\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Please Hire me\\r\\n\\r\\n    function changeUserBio(string memory bioText)\\r\\n        public\\r\\n        returns (bool success)\\r\\n    {\\r\\n        require(\\r\\n            userProfileStructs[msg.sender].exists == true,\\r\\n            \\\"Create an Account First\\\"\\r\\n        ); // Check to see if they have an account\\r\\n        userProfileStructs[msg.sender].userProfileBio = bioText;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function changeUserProfilePicture(string memory url)\\r\\n        public\\r\\n        returns (bool success)\\r\\n    {\\r\\n        require(\\r\\n            userProfileStructs[msg.sender].exists == true,\\r\\n            \\\"Create an Account First\\\"\\r\\n        ); // Check to see if they have an account\\r\\n        userProfileStructs[msg.sender].profileImageUrl = url;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function changeUserNickname(string memory newNickName)\\r\\n        public\\r\\n        returns (bool success)\\r\\n    {\\r\\n        require(\\r\\n            userProfileStructs[msg.sender].exists == true,\\r\\n            \\\"Create an Account First\\\"\\r\\n        ); // Check to see if they have an account\\r\\n        userProfileStructs[msg.sender].userNickname = newNickName;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function changeFeaturedPost(uint256 postNumber)\\r\\n        public\\r\\n        returns (bool success)\\r\\n    {\\r\\n        require(\\r\\n            userProfileStructs[msg.sender].exists == true,\\r\\n            \\\"Create an Account First\\\"\\r\\n        ); // Check to see if they have an account\\r\\n        userProfileStructs[msg.sender].featuredPost = postNumber;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getUserPost(address userAddress, uint256 postKey)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string memory message,\\r\\n            uint256 numberOfLikes,\\r\\n            uint256 timestamp,\\r\\n            string memory url,\\r\\n            string memory userNickname,\\r\\n            uint256 totalComments\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            userProfileStructs[userAddress].postStructs[postKey].message,\\r\\n            userProfileStructs[userAddress].postStructs[postKey].numberOfLikes,\\r\\n            userProfileStructs[userAddress].postStructs[postKey].timestamp,\\r\\n            userProfileStructs[userAddress].postStructs[postKey].url,\\r\\n            userProfileStructs[userAddress].userNickname,\\r\\n            userProfileStructs[userAddress].postStructs[postKey].totalComments\\r\\n        ); // stack is too deep if I try to call profileImageUrl as well\\r\\n    }\\r\\n\\r\\n    function getAllUserPosts(address userAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 userPosts)\\r\\n    {\\r\\n        return (userProfileStructs[userAddress].userPosts);\\r\\n    }\\r\\n\\r\\n    function getTotalUsers() public view returns (uint256 totalUsers) {\\r\\n        return userProfileList.length;\\r\\n    }\\r\\n\\r\\n    function likePost(address userAddress, uint256 postKey)\\r\\n        public\\r\\n        returns (bool success)\\r\\n    {\\r\\n        require(\\r\\n            userProfileStructs[msg.sender].exists == true,\\r\\n            \\\"Create an Account First\\\"\\r\\n        ); // Check to see if they have an account\\r\\n        userProfileStructs[userAddress].postStructs[postKey].numberOfLikes += 1;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function followUser(address userAddress) public returns (bool success) {\\r\\n        require(\\r\\n            userProfileStructs[msg.sender].exists == true,\\r\\n            \\\"Create an Account First\\\"\\r\\n        ); // Check to see if they have an account\\r\\n        userProfileStructs[userAddress].followerCount += 1;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    // Hire me so I don\\u2019t grow to be your competitor ;)\\r\\n\\r\\n    function changeInheritance(address newInheritor) public onlyOwner {\\r\\n        nextOwner = newInheritor;\\r\\n    }\\r\\n\\r\\n    function ownerCheckIn() public onlyOwner {\\r\\n        lastCheckIn = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function changeCheckInTime(uint256 newCheckInTimeInterval)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        checkInTimeInterval = newCheckInTimeInterval; // let owner change check in case he know he will be away for a while.\\r\\n    }\\r\\n\\r\\n    function passDownInheritance() internal {\\r\\n        transferOwnership(nextOwner);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes calldata /* checkData */\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            bool upkeepNeeded,\\r\\n            bytes memory /* performData */\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            block.timestamp > (lastCheckIn + checkInTimeInterval),\\r\\n            bytes(\\\"\\\")\\r\\n        ); // make sure to check in at least once every 6 months\\r\\n    }\\r\\n\\r\\n    function performUpkeep(\\r\\n        bytes calldata /* performData */\\r\\n    ) external override onlyKeeper {\\r\\n        passDownInheritance();\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) public onlyOwner returns (bool) {\\r\\n        require(amount <= address(this).balance);\\r\\n        payable(msg.sender).transfer(amount); //if the owner send to sender\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdrawErc20(IERC20 token) public onlyOwner {\\r\\n        require(\\r\\n            token.transfer(msg.sender, token.balanceOf(address(this))),\\r\\n            \\\"Transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        // nothing to do but accept money\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb34dfdf6ddebeb0de6007d48688add325a3836944085c9582fe2f64572bfc7a1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 292,
        "contract": "contracts/SocialLego.sol:SocialLego",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2111,
        "contract": "contracts/SocialLego.sol:SocialLego",
        "label": "keeperRegistryAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2126,
        "contract": "contracts/SocialLego.sol:SocialLego",
        "label": "lastCheckIn",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2129,
        "contract": "contracts/SocialLego.sol:SocialLego",
        "label": "checkInTimeInterval",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2131,
        "contract": "contracts/SocialLego.sol:SocialLego",
        "label": "nextOwner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2183,
        "contract": "contracts/SocialLego.sol:SocialLego",
        "label": "userProfileStructs",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(userProfile)2178_storage)"
      },
      {
        "astId": 2186,
        "contract": "contracts/SocialLego.sol:SocialLego",
        "label": "userProfileList",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(userProfile)2178_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SocialLego.userProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(userProfile)2178_storage"
      },
      "t_mapping(t_uint256,t_struct(Comment)2138_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SocialLego.Comment)",
        "numberOfBytes": "32",
        "value": "t_struct(Comment)2138_storage"
      },
      "t_mapping(t_uint256,t_struct(Post)2154_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SocialLego.Post)",
        "numberOfBytes": "32",
        "value": "t_struct(Post)2154_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Comment)2138_storage": {
        "encoding": "inplace",
        "label": "struct SocialLego.Comment",
        "members": [
          {
            "astId": 2133,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "commenter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2135,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "message",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2137,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Post)2154_storage": {
        "encoding": "inplace",
        "label": "struct SocialLego.Post",
        "members": [
          {
            "astId": 2140,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "numberOfLikes",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2142,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2144,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "message",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2146,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "url",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2148,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "totalComments",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2153,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "commentStructs",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_struct(Comment)2138_storage)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(userProfile)2178_storage": {
        "encoding": "inplace",
        "label": "struct SocialLego.userProfile",
        "members": [
          {
            "astId": 2156,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2158,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "userAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2160,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "profileImageUrl",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2162,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "userProfileBio",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2164,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "userNickname",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2166,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "followerCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2168,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "joinDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2170,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "featuredPost",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2172,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "userPosts",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2177,
            "contract": "contracts/SocialLego.sol:SocialLego",
            "label": "postStructs",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Post)2154_storage)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
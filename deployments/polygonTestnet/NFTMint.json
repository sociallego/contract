{
  "address": "0xd406DC29f5f61004030E8E001e49239Daaf423f1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_keeperRegistryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "addCharacterOne",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "addCharacterThree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "addCharacterTwo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCheckInTimeInterval",
          "type": "uint256"
        }
      ],
      "name": "changeCheckInTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "changeDescription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGameAddress",
          "type": "address"
        }
      ],
      "name": "changeGameAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        }
      ],
      "name": "changeImageURI",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newInheritor",
          "type": "address"
        }
      ],
      "name": "changeInheritance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMintFee",
          "type": "uint256"
        }
      ],
      "name": "changeMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "NFTID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "agility",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sneak",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "charm",
          "type": "uint256"
        }
      ],
      "name": "changeNFTAttributes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "characters",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "born",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "agility",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sneak",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "charm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "characterID",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkInTimeInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "NFTID",
          "type": "uint256"
        }
      ],
      "name": "getNFTAttributes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "agility",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "charm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sneak",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastCheckIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "characterID",
          "type": "uint256"
        }
      ],
      "name": "mintAnyCharacter",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintableNFTCharacterStruct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "agility",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sneak",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "charm",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerCheckIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMintableCharacters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe737afd06ee20b241c36af78b676bf9e9b9cbf9160200613d9b9c574928b34ce",
  "receipt": {
    "to": null,
    "from": "0xDeAdA90a7B242FC396eB277717a31e67A6005c93",
    "contractAddress": "0xd406DC29f5f61004030E8E001e49239Daaf423f1",
    "transactionIndex": 22,
    "gasUsed": "2907554",
    "logsBloom": "0x
    "blockHash": "0x1ff9cbf3631820f8218d217cfaac9e5c8265063cb89733d2a1e98449429701d9",
    "transactionHash": "0xe737afd06ee20b241c36af78b676bf9e9b9cbf9160200613d9b9c574928b34ce",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 26500795,
        "transactionHash": "0xe737afd06ee20b241c36af78b676bf9e9b9cbf9160200613d9b9c574928b34ce",
        "address": "0xd406DC29f5f61004030E8E001e49239Daaf423f1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000deada90a7b242fc396eb277717a31e67a6005c93"
        ],
        "data": "0x",
        "logIndex": 43,
        "blockHash": "0x1ff9cbf3631820f8218d217cfaac9e5c8265063cb89733d2a1e98449429701d9"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 26500795,
        "transactionHash": "0xe737afd06ee20b241c36af78b676bf9e9b9cbf9160200613d9b9c574928b34ce",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000deada90a7b242fc396eb277717a31e67a6005c93",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000016ede0eced3e8c0000000000000000000000000000000000000000000000003e56bb84778703ac000000000000000000000000000000000000000000000dd3819f219d8eba0fbe0000000000000000000000000000000000000000000000003e3fcda38a99c520000000000000000000000000000000000000000000000dd381b60f7e7ba74e4a",
        "logIndex": 44,
        "blockHash": "0x1ff9cbf3631820f8218d217cfaac9e5c8265063cb89733d2a1e98449429701d9"
      }
    ],
    "blockNumber": 26500795,
    "cumulativeGasUsed": "3622098",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",
    "100000000000000",
    "0x6179B349067af80D0c171f43E6d767E4A00775Cd"
  ],
  "solcInputHash": "0fe244a96d5e7d7382f6e351ada9a92a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_keeperRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"addCharacterOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"addCharacterThree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"addCharacterTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCheckInTimeInterval\",\"type\":\"uint256\"}],\"name\":\"changeCheckInTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"changeDescription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGameAddress\",\"type\":\"address\"}],\"name\":\"changeGameAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"}],\"name\":\"changeImageURI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newInheritor\",\"type\":\"address\"}],\"name\":\"changeInheritance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMintFee\",\"type\":\"uint256\"}],\"name\":\"changeMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NFTID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agility\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sneak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charm\",\"type\":\"uint256\"}],\"name\":\"changeNFTAttributes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"characters\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"born\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agility\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sneak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"characterID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkInTimeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NFTID\",\"type\":\"uint256\"}],\"name\":\"getNFTAttributes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"agility\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sneak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCheckIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"characterID\",\"type\":\"uint256\"}],\"name\":\"mintAnyCharacter\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintableNFTCharacterStruct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agility\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sneak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charm\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCheckIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMintableCharacters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/breakInNFTMinter.sol\":\"NFTMint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xff9e7d773545a1a5d73106e72bfb429da79c1cc4d893fb62051df801d2e61469\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/breakInNFTMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n\\r\\ncontract NFTMint is\\r\\n    ERC721,\\r\\n    VRFConsumerBase,\\r\\n    Ownable,\\r\\n    KeeperCompatibleInterface\\r\\n{\\r\\n    bytes32 internal keyHash;\\r\\n    uint256 internal fee;\\r\\n\\r\\n    uint256 public mintFee = 0.002 * 10**18;\\r\\n    uint256 public randomResult;\\r\\n\\r\\n    uint256 public lastCheckIn = block.timestamp;\\r\\n    uint256 public checkInTimeInterval = 864000; //default to six months\\r\\n    address public nextOwner;\\r\\n\\r\\n    address keeperRegistryAddress;\\r\\n    address gameAddress;\\r\\n\\r\\n    modifier onlyGame() {\\r\\n        require(msg.sender == gameAddress);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyKeeper() {\\r\\n        require(msg.sender == keeperRegistryAddress);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _vrfCoordinator,\\r\\n        address _link,\\r\\n        bytes32 _keyHash,\\r\\n        uint256 _fee,\\r\\n        address _keeperRegistryAddress\\r\\n    ) VRFConsumerBase(_vrfCoordinator, _link) ERC721(\\\"BreakInNFTs\\\", \\\"BIN\\\") {\\r\\n        keyHash = _keyHash;\\r\\n        fee = _fee; // (Varies by network)\\r\\n\\r\\n        keeperRegistryAddress = _keeperRegistryAddress;\\r\\n    }\\r\\n\\r\\n    struct NFTCharacter {\\r\\n        string name;\\r\\n        uint256 born;\\r\\n        uint256 health;\\r\\n        uint256 agility;\\r\\n        uint256 strength;\\r\\n        uint256 sneak;\\r\\n        uint256 charm;\\r\\n        uint256 characterID;\\r\\n    }\\r\\n    struct mintableNFTCharacter {\\r\\n        uint256 health;\\r\\n        uint256 agility;\\r\\n        uint256 strength;\\r\\n        uint256 sneak;\\r\\n        uint256 charm;\\r\\n        string imageURI;\\r\\n        string name;\\r\\n        string description;\\r\\n    }\\r\\n    uint256 public totalMintableCharacters;\\r\\n\\r\\n    mapping(uint256 => mintableNFTCharacter) public mintableNFTCharacterStruct; //\\r\\n    mapping(bytes32 => NFTCharacter) NFTCharacterStruct; //\\r\\n    mapping(bytes32 => address) requestToSender; //\\r\\n    NFTCharacter[] public characters;\\r\\n\\r\\n    //anyone can add characters that they want to mint so long as it fits a predefined scheme\\r\\n    function addCharacterOne(\\r\\n        uint256 health,\\r\\n        string memory imageURI,\\r\\n        string memory name,\\r\\n        string memory description\\r\\n    ) public {\\r\\n        uint256 characterID = totalMintableCharacters;\\r\\n        mintableNFTCharacterStruct[characterID].health = health;\\r\\n        mintableNFTCharacterStruct[characterID].agility = 250;\\r\\n        mintableNFTCharacterStruct[characterID].strength = 250;\\r\\n        mintableNFTCharacterStruct[characterID].sneak = 500;\\r\\n        mintableNFTCharacterStruct[characterID].charm = 250;\\r\\n        mintableNFTCharacterStruct[characterID].imageURI = imageURI;\\r\\n        mintableNFTCharacterStruct[characterID].name = name;\\r\\n        mintableNFTCharacterStruct[characterID].description = description;\\r\\n        totalMintableCharacters += 1;\\r\\n    }\\r\\n\\r\\n    function addCharacterTwo(\\r\\n        uint256 health,\\r\\n        string memory imageURI,\\r\\n        string memory name,\\r\\n        string memory description\\r\\n    ) public {\\r\\n        uint256 characterID = totalMintableCharacters;\\r\\n        mintableNFTCharacterStruct[characterID].health = health;\\r\\n        mintableNFTCharacterStruct[characterID].agility = 250;\\r\\n        mintableNFTCharacterStruct[characterID].strength = 250;\\r\\n        mintableNFTCharacterStruct[characterID].sneak = 250;\\r\\n        mintableNFTCharacterStruct[characterID].charm = 500;\\r\\n        mintableNFTCharacterStruct[characterID].imageURI = imageURI;\\r\\n        mintableNFTCharacterStruct[characterID].name = name;\\r\\n        mintableNFTCharacterStruct[characterID].description = description;\\r\\n        totalMintableCharacters += 1;\\r\\n    }\\r\\n\\r\\n    function addCharacterThree(\\r\\n        uint256 health,\\r\\n        string memory imageURI,\\r\\n        string memory name,\\r\\n        string memory description\\r\\n    ) public {\\r\\n        uint256 characterID = totalMintableCharacters;\\r\\n        mintableNFTCharacterStruct[characterID].health = health;\\r\\n        mintableNFTCharacterStruct[characterID].agility = 250;\\r\\n        mintableNFTCharacterStruct[characterID].strength = 500;\\r\\n        mintableNFTCharacterStruct[characterID].sneak = 250;\\r\\n        mintableNFTCharacterStruct[characterID].charm = 250;\\r\\n        mintableNFTCharacterStruct[characterID].imageURI = imageURI;\\r\\n        mintableNFTCharacterStruct[characterID].name = name;\\r\\n        mintableNFTCharacterStruct[characterID].description = description;\\r\\n        totalMintableCharacters += 1;\\r\\n    }\\r\\n\\r\\n    function getNFTAttributes(uint256 NFTID)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 agility,\\r\\n            uint256 strength,\\r\\n            uint256 charm,\\r\\n            uint256 sneak,\\r\\n            uint256 health\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            characters[NFTID].agility,\\r\\n            characters[NFTID].strength,\\r\\n            characters[NFTID].charm,\\r\\n            characters[NFTID].sneak,\\r\\n            characters[NFTID].health\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function changeDescription(uint256 characterID, string memory description)\\r\\n        public\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        //So I can fill in the character description later. Wouldn't be in mainnet\\r\\n        mintableNFTCharacterStruct[characterID].description = description;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function changeImageURI(uint256 characterID, string memory imageURI)\\r\\n        public\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        //Just in case the image changes. Wouldn't be in mainnet\\r\\n        mintableNFTCharacterStruct[characterID].imageURI = imageURI;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mintAnyCharacter(string memory name, uint256 characterID)\\r\\n        public\\r\\n        payable\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        require(\\r\\n            LINK.balanceOf(address(this)) >= fee,\\r\\n            \\\"Not enough LINK - fill contract with faucet\\\"\\r\\n        );\\r\\n        require(\\r\\n            characterID < totalMintableCharacters,\\r\\n            \\\"No Character With That ID\\\"\\r\\n        );\\r\\n        require(msg.value >= mintFee, \\\"Send 0.002 Ether to mint New Character\\\"); //someone gotta pay for the vrf fee and to prevent spamming of new characters\\r\\n        bytes32 requestID = requestRandomness(keyHash, fee);\\r\\n        requestToSender[requestID] = msg.sender;\\r\\n        NFTCharacterStruct[requestID].name = name;\\r\\n        NFTCharacterStruct[requestID].health = mintableNFTCharacterStruct[\\r\\n            characterID\\r\\n        ].health;\\r\\n        NFTCharacterStruct[requestID].agility = mintableNFTCharacterStruct[\\r\\n            characterID\\r\\n        ].agility;\\r\\n        NFTCharacterStruct[requestID].strength = mintableNFTCharacterStruct[\\r\\n            characterID\\r\\n        ].strength;\\r\\n        NFTCharacterStruct[requestID].sneak = mintableNFTCharacterStruct[\\r\\n            characterID\\r\\n        ].sneak;\\r\\n        NFTCharacterStruct[requestID].charm = mintableNFTCharacterStruct[\\r\\n            characterID\\r\\n        ].charm;\\r\\n        NFTCharacterStruct[requestID].characterID = characterID;\\r\\n        return requestID;\\r\\n    }\\r\\n\\r\\n    // Hire me please\\r\\n    function changeNFTAttributes(\\r\\n        uint256 NFTID,\\r\\n        uint256 health,\\r\\n        uint256 agility,\\r\\n        uint256 strength,\\r\\n        uint256 sneak,\\r\\n        uint256 charm\\r\\n    ) external onlyGame returns (bool) {\\r\\n        //allows the game to modify character attributes.\\r\\n        characters[NFTID].health = health;\\r\\n        characters[NFTID].agility = agility;\\r\\n        characters[NFTID].strength = strength;\\r\\n        characters[NFTID].sneak = sneak;\\r\\n        characters[NFTID].charm = charm;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Requests randomness\\r\\n     */\\r\\n\\r\\n    function getRandomNumber() internal returns (bytes32 requestId) {\\r\\n        // internal\\r\\n        require(\\r\\n            LINK.balanceOf(address(this)) >= fee,\\r\\n            \\\"Not enough LINK - fill contract with faucet\\\"\\r\\n        );\\r\\n        return requestRandomness(keyHash, fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Callback function used by VRF Coordinator\\r\\n     */\\r\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        uint256 newID = characters.length;\\r\\n        uint256 agility = NFTCharacterStruct[requestId].agility +\\r\\n            (randomness % 100);\\r\\n        uint256 strength = NFTCharacterStruct[requestId].strength +\\r\\n            ((randomness % 123456) % 100);\\r\\n        uint256 sneak = NFTCharacterStruct[requestId].sneak +\\r\\n            ((randomness % 654321) % 100);\\r\\n        uint256 charm = NFTCharacterStruct[requestId].charm +\\r\\n            ((randomness % 33576) % 100);\\r\\n        uint256 born = block.timestamp;\\r\\n        characters.push(\\r\\n            NFTCharacter(\\r\\n                NFTCharacterStruct[requestId].name,\\r\\n                born,\\r\\n                NFTCharacterStruct[requestId].health,\\r\\n                agility,\\r\\n                strength,\\r\\n                sneak,\\r\\n                charm,\\r\\n                NFTCharacterStruct[requestId].characterID\\r\\n            )\\r\\n        );\\r\\n        _safeMint(requestToSender[requestId], newID);\\r\\n    }\\r\\n\\r\\n    function changeMintFee(uint256 newMintFee) public onlyOwner {\\r\\n        mintFee = newMintFee;\\r\\n        lastCheckIn = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function changeGameAddress(address newGameAddress) public onlyOwner {\\r\\n        //this function would be only called once at the begnning to allow only the game to modify character attributes. On mainnet it would include onlyGame\\r\\n        gameAddress = newGameAddress;\\r\\n    }\\r\\n\\r\\n    function changeInheritance(address newInheritor) public onlyOwner {\\r\\n        nextOwner = newInheritor;\\r\\n        lastCheckIn = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function ownerCheckIn() public onlyOwner {\\r\\n        lastCheckIn = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function changeCheckInTime(uint256 newCheckInTimeInterval)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        checkInTimeInterval = newCheckInTimeInterval; // let owner change check in case he know he will be away for a while.\\r\\n        lastCheckIn = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function passDownInheritance() internal {\\r\\n        transferOwnership(nextOwner);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes calldata /* checkData */\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            bool upkeepNeeded,\\r\\n            bytes memory /* performData */\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            block.timestamp > (lastCheckIn + checkInTimeInterval),\\r\\n            bytes(\\\"\\\")\\r\\n        ); // make sure to check in at least once every 6 months\\r\\n    }\\r\\n\\r\\n    function performUpkeep(\\r\\n        bytes calldata /* performData */\\r\\n    ) external override onlyKeeper {\\r\\n        passDownInheritance();\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) public onlyOwner returns (bool) {\\r\\n        require(amount <= address(this).balance);\\r\\n        payable(msg.sender).transfer(amount); //if the owner send to sender\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdrawErc20(IERC20 token) public onlyOwner {\\r\\n        require(\\r\\n            token.transfer(msg.sender, token.balanceOf(address(this))),\\r\\n            \\\"Transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        // nothing to do but accept money\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd7592c1556fc9192f6dbf6ebe6ee543ecca8ead386227197cb255b37c425e6c7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405266071afd498d0000600a5542600c55620d2f00600d553480156200002757600080fd5b50604051620032c2380380620032c28339810160408190526200004a9162000226565b604080518082018252600b81526a427265616b496e4e46547360a81b6020808301918252835180850190945260038452622124a760e91b908401528151889388939290916200009c9160009162000163565b508051620000b290600190602084019062000163565b5050506001600160601b0319606092831b811660a052911b16608052620000e0620000da3390565b62000111565b600892909255600955600f80546001600160a01b0319166001600160a01b0390921691909117905550620002c19050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001719062000284565b90600052602060002090601f016020900481019282620001955760008555620001e0565b82601f10620001b057805160ff1916838001178555620001e0565b82800160010185558215620001e0579182015b82811115620001e0578251825591602001919060010190620001c3565b50620001ee929150620001f2565b5090565b5b80821115620001ee5760008155600101620001f3565b80516001600160a01b03811681146200022157600080fd5b919050565b600080600080600060a086880312156200023f57600080fd5b6200024a8662000209565b94506200025a6020870162000209565b93506040860151925060608601519150620002786080870162000209565b90509295509295909350565b600181811c908216806200029957607f821691505b60208210811415620002bb57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c60a05160601c612fc7620002fb600039600081816115330152611e95015260008181610c810152611e660152612fc76000f3fe6080604052600436106102555760003560e01c806370a0823111610139578063c02c2dbe116100b6578063de6a06ed1161007a578063de6a06ed1461071c578063dffd60541461073c578063e929d6691461075c578063e985e9c51461077c578063ea7d2796146107c5578063f2fde38b146107e557600080fd5b8063c02c2dbe14610690578063c7e42b1b146106b0578063c87b56dd146106d0578063d5c6c556146106f0578063db78dabd1461070657600080fd5b806394985ddd116100fd57806394985ddd146105fb57806395d89b411461061b578063a22cb46514610630578063ac92ef4314610650578063b88d4fde1461067057600080fd5b806370a0823114610572578063715018a61461059257806375b80d98146105a75780638da5cb5b146105c75780638fec3719146105e557600080fd5b8063424b6e4d116101d25780634810bc59116101965780634810bc59146104905780635966572f146104c45780636352211e146104e457806369f3331d146105045780636a33a989146105245780636e04ff0d1461054457600080fd5b8063424b6e4d146103be57806342619f66146103f257806342842e0e146104085780634585e33b1461042857806347c4ef251461044857600080fd5b80631d56cc65116102195780631d56cc651461033657806323b872dd146103565780632e1a7d4d1461037657806339dd4f6d146103965780633fc91708146103ab57600080fd5b806301ffc9a71461026157806306fdde0314610296578063081812fc146102b8578063095ea7b3146102f057806313966db51461031257600080fd5b3661025c57005b600080fd5b34801561026d57600080fd5b5061028161027c366004612972565b610805565b60405190151581526020015b60405180910390f35b3480156102a257600080fd5b506102ab610857565b60405161028d9190612c88565b3480156102c457600080fd5b506102d86102d3366004612a63565b6108e9565b6040516001600160a01b03909116815260200161028d565b3480156102fc57600080fd5b5061031061030b366004612907565b610983565b005b34801561031e57600080fd5b50610328600a5481565b60405190815260200161028d565b34801561034257600080fd5b50610281610351366004612b62565b610a99565b34801561036257600080fd5b50610310610371366004612818565b610b8c565b34801561038257600080fd5b50610281610391366004612a63565b610bbd565b3480156103a257600080fd5b50610310610c2d565b6103286103b9366004612a1e565b610c5d565b3480156103ca57600080fd5b506103de6103d9366004612a63565b610eba565b60405161028d989796959493929190612dbe565b3480156103fe57600080fd5b50610328600b5481565b34801561041457600080fd5b50610310610423366004612818565b61109a565b34801561043457600080fd5b506103106104433660046129ac565b6110b5565b34801561045457600080fd5b50610468610463366004612a63565b6110d8565b604080519586526020860194909452928401919091526060830152608082015260a00161028d565b34801561049c57600080fd5b506104b06104ab366004612a63565b6111ac565b60405161028d989796959493929190612c9b565b3480156104d057600080fd5b506103106104df3660046127c2565b61128c565b3480156104f057600080fd5b506102d86104ff366004612a63565b6112dc565b34801561051057600080fd5b50600e546102d8906001600160a01b031681565b34801561053057600080fd5b5061031061053f366004612adc565b611353565b34801561055057600080fd5b5061056461055f3660046129ac565b611407565b60405161028d929190612c6d565b34801561057e57600080fd5b5061032861058d3660046127c2565b611438565b34801561059e57600080fd5b506103106114bf565b3480156105b357600080fd5b506103106105c2366004612a63565b6114f5565b3480156105d357600080fd5b506007546001600160a01b03166102d8565b3480156105f157600080fd5b5061032860115481565b34801561060757600080fd5b50610310610616366004612950565b611528565b34801561062757600080fd5b506102ab6115aa565b34801561063c57600080fd5b5061031061064b3660046128d9565b6115b9565b34801561065c57600080fd5b5061028161066b366004612a95565b61167e565b34801561067c57600080fd5b5061031061068b366004612859565b6116da565b34801561069c57600080fd5b506103106106ab366004612adc565b611712565b3480156106bc57600080fd5b506103106106cb3660046127c2565b61175a565b3480156106dc57600080fd5b506102ab6106eb366004612a63565b6118c4565b3480156106fc57600080fd5b50610328600d5481565b34801561071257600080fd5b50610328600c5481565b34801561072857600080fd5b50610281610737366004612a95565b6119ac565b34801561074857600080fd5b506103106107573660046127c2565b6119fe565b34801561076857600080fd5b50610310610777366004612a63565b611a4a565b34801561078857600080fd5b506102816107973660046127df565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156107d157600080fd5b506103106107e0366004612adc565b611a7d565b3480156107f157600080fd5b506103106108003660046127c2565b611ac5565b60006001600160e01b031982166380ac58cd60e01b148061083657506001600160e01b03198216635b5e139f60e01b145b8061085157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461086690612e96565b80601f016020809104026020016040519081016040528092919081815260200182805461089290612e96565b80156108df5780601f106108b4576101008083540402835291602001916108df565b820191906000526020600020905b8154815290600101906020018083116108c257829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166109675760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061098e826112dc565b9050806001600160a01b0316836001600160a01b031614156109fc5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161095e565b336001600160a01b0382161480610a185750610a188133610797565b610a8a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161095e565b610a948383611b5d565b505050565b6010546000906001600160a01b03163314610ab357600080fd5b8560158881548110610ac757610ac7612f2c565b9060005260206000209060080201600201819055508460158881548110610af057610af0612f2c565b9060005260206000209060080201600301819055508360158881548110610b1957610b19612f2c565b9060005260206000209060080201600401819055508260158881548110610b4257610b42612f2c565b9060005260206000209060080201600501819055508160158881548110610b6b57610b6b612f2c565b60009182526020909120600660089092020101555060019695505050505050565b610b963382611bcb565b610bb25760405162461bcd60e51b815260040161095e90612d6d565b610a94838383611cc2565b6007546000906001600160a01b03163314610bea5760405162461bcd60e51b815260040161095e90612d38565b47821115610bf757600080fd5b604051339083156108fc029084906000818181858888f19350505050158015610c24573d6000803e3d6000fd5b50600192915050565b6007546001600160a01b03163314610c575760405162461bcd60e51b815260040161095e90612d38565b42600c55565b6009546040516370a0823160e01b8152306004820152600091906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610cc357600080fd5b505afa158015610cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfb9190612a7c565b1015610d5d5760405162461bcd60e51b815260206004820152602b60248201527f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060448201526a1dda5d1a0819985d58d95d60aa1b606482015260840161095e565b6011548210610dae5760405162461bcd60e51b815260206004820152601960248201527f4e6f204368617261637465722057697468205468617420494400000000000000604482015260640161095e565b600a54341015610e0f5760405162461bcd60e51b815260206004820152602660248201527f53656e6420302e30303220457468657220746f206d696e74204e6577204368616044820152653930b1ba32b960d11b606482015260840161095e565b6000610e1f600854600954611e62565b600081815260146020908152604080832080546001600160a01b03191633179055601382529091208651929350610e5a929091870190612693565b50600083815260126020908152604080832080548585526013909352922060028082019290925560018301546003808301919091559183015460048083019190915591830154600582015591015460068201556007019290925550919050565b6012602052806000526040600020600091509050806000015490806001015490806002015490806003015490806004015490806005018054610efb90612e96565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2790612e96565b8015610f745780601f10610f4957610100808354040283529160200191610f74565b820191906000526020600020905b815481529060010190602001808311610f5757829003601f168201915b505050505090806006018054610f8990612e96565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb590612e96565b80156110025780601f10610fd757610100808354040283529160200191611002565b820191906000526020600020905b815481529060010190602001808311610fe557829003601f168201915b50505050509080600701805461101790612e96565b80601f016020809104026020016040519081016040528092919081815260200182805461104390612e96565b80156110905780601f1061106557610100808354040283529160200191611090565b820191906000526020600020905b81548152906001019060200180831161107357829003601f168201915b5050505050905088565b610a94838383604051806020016040528060008152506116da565b600f546001600160a01b031633146110cc57600080fd5b6110d4611fed565b5050565b6000806000806000601586815481106110f3576110f3612f2c565b9060005260206000209060080201600301546015878154811061111857611118612f2c565b9060005260206000209060080201600401546015888154811061113d5761113d612f2c565b9060005260206000209060080201600601546015898154811061116257611162612f2c565b90600052602060002090600802016005015460158a8154811061118757611187612f2c565b9060005260206000209060080201600201549450945094509450945091939590929450565b601581815481106111bc57600080fd5b90600052602060002090600802016000915090508060000180546111df90612e96565b80601f016020809104026020016040519081016040528092919081815260200182805461120b90612e96565b80156112585780601f1061122d57610100808354040283529160200191611258565b820191906000526020600020905b81548152906001019060200180831161123b57829003601f168201915b5050505050908060010154908060020154908060030154908060040154908060050154908060060154908060070154905088565b6007546001600160a01b031633146112b65760405162461bcd60e51b815260040161095e90612d38565b600e80546001600160a01b0319166001600160a01b039290921691909117905542600c55565b6000818152600260205260408120546001600160a01b0316806108515760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161095e565b601154600081815260126020908152604090912086815560fa60018201819055600282018190556101f460038301556004820155855161139b92600590920191870190612693565b50600081815260126020908152604090912084516113c192600690920191860190612693565b50600081815260126020908152604090912083516113e792600790920191850190612693565b506001601160008282546113fb9190612e27565b90915550505050505050565b60006060600d54600c5461141b9190612e27565b421160405180602001604052806000815250915091509250929050565b60006001600160a01b0382166114a35760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161095e565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b031633146114e95760405162461bcd60e51b815260040161095e90612d38565b6114f36000612002565b565b6007546001600160a01b0316331461151f5760405162461bcd60e51b815260040161095e90612d38565b600d5542600c55565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115a05760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015260640161095e565b6110d48282612054565b60606001805461086690612e96565b6001600160a01b0382163314156116125760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161095e565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6007546000906001600160a01b031633146116ab5760405162461bcd60e51b815260040161095e90612d38565b600083815260126020908152604090912083516116d092600590920191850190612693565b5060019392505050565b6116e43383611bcb565b6117005760405162461bcd60e51b815260040161095e90612d6d565b61170c848484846122c9565b50505050565b601154600081815260126020908152604090912086815560fa600182018190556002820181905560038201556101f46004820155855161139b92600590920191870190612693565b6007546001600160a01b031633146117845760405162461bcd60e51b815260040161095e90612d38565b6040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a082319060240160206040518083038186803b1580156117cd57600080fd5b505afa1580156117e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118059190612a7c565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561184b57600080fd5b505af115801561185f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118839190612933565b6118c15760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161095e565b50565b6000818152600260205260409020546060906001600160a01b03166119435760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161095e565b600061195a60408051602081019091526000815290565b9050600081511161197a57604051806020016040528060008152506119a5565b80611984846122fc565b604051602001611995929190612bd1565b6040516020818303038152906040525b9392505050565b6007546000906001600160a01b031633146119d95760405162461bcd60e51b815260040161095e90612d38565b600083815260126020908152604090912083516116d092600790920191850190612693565b6007546001600160a01b03163314611a285760405162461bcd60e51b815260040161095e90612d38565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b6007546001600160a01b03163314611a745760405162461bcd60e51b815260040161095e90612d38565b600a5542600c55565b601154600081815260126020908152604090912086815560fa600182018190556101f46002830155600382018190556004820155855161139b92600590920191870190612693565b6007546001600160a01b03163314611aef5760405162461bcd60e51b815260040161095e90612d38565b6001600160a01b038116611b545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161095e565b6118c181612002565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611b92826112dc565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611c445760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161095e565b6000611c4f836112dc565b9050806001600160a01b0316846001600160a01b03161480611c8a5750836001600160a01b0316611c7f846108e9565b6001600160a01b0316145b80611cba57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611cd5826112dc565b6001600160a01b031614611d3d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161095e565b6001600160a01b038216611d9f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161095e565b611daa600082611b5d565b6001600160a01b0383166000908152600360205260408120805460019290611dd3908490612e53565b90915550506001600160a01b0382166000908152600360205260408120805460019290611e01908490612e27565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f000000000000000000000000000000000000000000000000000000000000000084866000604051602001611ed2929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401611eff93929190612c3d565b602060405180830381600087803b158015611f1957600080fd5b505af1158015611f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f519190612933565b50600083815260066020818152604080842054815180840189905280830186905230606082015260808082018390528351808303909101815260a090910190925281519183019190912093879052919052611fad906001612e27565b600085815260066020526040902055611cba8482604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600e546114f3906001600160a01b0316611ac5565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6015546000612064606484612eec565b6000858152601360205260409020600301546120809190612e27565b9050600060646120936201e24086612eec565b61209d9190612eec565b6000868152601360205260409020600401546120b99190612e27565b9050600060646120cc6209fbf187612eec565b6120d69190612eec565b6000878152601360205260409020600501546120f29190612e27565b90506000606461210461832888612eec565b61210e9190612eec565b60008881526013602052604090206006015461212a9190612e27565b604080516101008101825260008a81526013602052919091208054929350429260159291829161215990612e96565b80601f016020809104026020016040519081016040528092919081815260200182805461218590612e96565b80156121d25780601f106121a7576101008083540402835291602001916121d2565b820191906000526020600020905b8154815290600101906020018083116121b557829003601f168201915b5050509183525050602080820185905260008c815260138083526040808320600281015491860191909152606085018c9052608085018b905260a085018a905260c085018990529083526007015460e090930192909252835460018101855593825290819020825180519394600802909101926122529284920190612693565b5060208281015160018301556040808401516002840155606084015160038401556080840151600484015560a0840151600584015560c0840151600684015560e09093015160079092019190915560008a8152601490915220546122bf906001600160a01b0316876123fa565b5050505050505050565b6122d4848484611cc2565b6122e084848484612414565b61170c5760405162461bcd60e51b815260040161095e90612ce6565b6060816123205750506040805180820190915260018152600360fc1b602082015290565b8160005b811561234a578061233481612ed1565b91506123439050600a83612e3f565b9150612324565b60008167ffffffffffffffff81111561236557612365612f42565b6040519080825280601f01601f19166020018201604052801561238f576020820181803683370190505b5090505b8415611cba576123a4600183612e53565b91506123b1600a86612eec565b6123bc906030612e27565b60f81b8183815181106123d1576123d1612f2c565b60200101906001600160f81b031916908160001a9053506123f3600a86612e3f565b9450612393565b6110d482826040518060200160405280600081525061251e565b60006001600160a01b0384163b1561251657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612458903390899088908890600401612c00565b602060405180830381600087803b15801561247257600080fd5b505af19250505080156124a2575060408051601f3d908101601f1916820190925261249f9181019061298f565b60015b6124fc573d8080156124d0576040519150601f19603f3d011682016040523d82523d6000602084013e6124d5565b606091505b5080516124f45760405162461bcd60e51b815260040161095e90612ce6565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611cba565b506001611cba565b6125288383612551565b6125356000848484612414565b610a945760405162461bcd60e51b815260040161095e90612ce6565b6001600160a01b0382166125a75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161095e565b6000818152600260205260409020546001600160a01b03161561260c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161095e565b6001600160a01b0382166000908152600360205260408120805460019290612635908490612e27565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461269f90612e96565b90600052602060002090601f0160209004810192826126c15760008555612707565b82601f106126da57805160ff1916838001178555612707565b82800160010185558215612707579182015b828111156127075782518255916020019190600101906126ec565b50612713929150612717565b5090565b5b808211156127135760008155600101612718565b600067ffffffffffffffff8084111561274757612747612f42565b604051601f8501601f19908116603f0116810190828211818310171561276f5761276f612f42565b8160405280935085815286868601111561278857600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126127b357600080fd5b6119a58383356020850161272c565b6000602082840312156127d457600080fd5b81356119a581612f58565b600080604083850312156127f257600080fd5b82356127fd81612f58565b9150602083013561280d81612f58565b809150509250929050565b60008060006060848603121561282d57600080fd5b833561283881612f58565b9250602084013561284881612f58565b929592945050506040919091013590565b6000806000806080858703121561286f57600080fd5b843561287a81612f58565b9350602085013561288a81612f58565b925060408501359150606085013567ffffffffffffffff8111156128ad57600080fd5b8501601f810187136128be57600080fd5b6128cd8782356020840161272c565b91505092959194509250565b600080604083850312156128ec57600080fd5b82356128f781612f58565b9150602083013561280d81612f6d565b6000806040838503121561291a57600080fd5b823561292581612f58565b946020939093013593505050565b60006020828403121561294557600080fd5b81516119a581612f6d565b6000806040838503121561296357600080fd5b50508035926020909101359150565b60006020828403121561298457600080fd5b81356119a581612f7b565b6000602082840312156129a157600080fd5b81516119a581612f7b565b600080602083850312156129bf57600080fd5b823567ffffffffffffffff808211156129d757600080fd5b818501915085601f8301126129eb57600080fd5b8135818111156129fa57600080fd5b866020828501011115612a0c57600080fd5b60209290920196919550909350505050565b60008060408385031215612a3157600080fd5b823567ffffffffffffffff811115612a4857600080fd5b612a54858286016127a2565b95602094909401359450505050565b600060208284031215612a7557600080fd5b5035919050565b600060208284031215612a8e57600080fd5b5051919050565b60008060408385031215612aa857600080fd5b82359150602083013567ffffffffffffffff811115612ac657600080fd5b612ad2858286016127a2565b9150509250929050565b60008060008060808587031215612af257600080fd5b84359350602085013567ffffffffffffffff80821115612b1157600080fd5b612b1d888389016127a2565b94506040870135915080821115612b3357600080fd5b612b3f888389016127a2565b93506060870135915080821115612b5557600080fd5b506128cd878288016127a2565b60008060008060008060c08789031215612b7b57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60008151808452612bbd816020860160208601612e6a565b601f01601f19169290920160200192915050565b60008351612be3818460208801612e6a565b835190830190612bf7818360208801612e6a565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612c3390830184612ba5565b9695505050505050565b60018060a01b0384168152826020820152606060408201526000612c646060830184612ba5565b95945050505050565b8215158152604060208201526000611cba6040830184612ba5565b6020815260006119a56020830184612ba5565b6000610100808352612caf8184018c612ba5565b602084019a909a52505060408101969096526060860194909452608085019290925260a084015260c083015260e090910152919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60006101008a83528960208401528860408401528760608401528660808401528060a0840152612df081840187612ba5565b905082810360c0840152612e048186612ba5565b905082810360e0840152612e188185612ba5565b9b9a5050505050505050505050565b60008219821115612e3a57612e3a612f00565b500190565b600082612e4e57612e4e612f16565b500490565b600082821015612e6557612e65612f00565b500390565b60005b83811015612e85578181015183820152602001612e6d565b8381111561170c5750506000910152565b600181811c90821680612eaa57607f821691505b60208210811415612ecb57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612ee557612ee5612f00565b5060010190565b600082612efb57612efb612f16565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146118c157600080fd5b80151581146118c157600080fd5b6001600160e01b0319811681146118c157600080fdfea26469706673582212206bbe7c44dcfcbbbfb9283c5aeaecdd84a2ed0df58ca0949f451622c21fca59f164736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106102555760003560e01c806370a0823111610139578063c02c2dbe116100b6578063de6a06ed1161007a578063de6a06ed1461071c578063dffd60541461073c578063e929d6691461075c578063e985e9c51461077c578063ea7d2796146107c5578063f2fde38b146107e557600080fd5b8063c02c2dbe14610690578063c7e42b1b146106b0578063c87b56dd146106d0578063d5c6c556146106f0578063db78dabd1461070657600080fd5b806394985ddd116100fd57806394985ddd146105fb57806395d89b411461061b578063a22cb46514610630578063ac92ef4314610650578063b88d4fde1461067057600080fd5b806370a0823114610572578063715018a61461059257806375b80d98146105a75780638da5cb5b146105c75780638fec3719146105e557600080fd5b8063424b6e4d116101d25780634810bc59116101965780634810bc59146104905780635966572f146104c45780636352211e146104e457806369f3331d146105045780636a33a989146105245780636e04ff0d1461054457600080fd5b8063424b6e4d146103be57806342619f66146103f257806342842e0e146104085780634585e33b1461042857806347c4ef251461044857600080fd5b80631d56cc65116102195780631d56cc651461033657806323b872dd146103565780632e1a7d4d1461037657806339dd4f6d146103965780633fc91708146103ab57600080fd5b806301ffc9a71461026157806306fdde0314610296578063081812fc146102b8578063095ea7b3146102f057806313966db51461031257600080fd5b3661025c57005b600080fd5b34801561026d57600080fd5b5061028161027c366004612972565b610805565b60405190151581526020015b60405180910390f35b3480156102a257600080fd5b506102ab610857565b60405161028d9190612c88565b3480156102c457600080fd5b506102d86102d3366004612a63565b6108e9565b6040516001600160a01b03909116815260200161028d565b3480156102fc57600080fd5b5061031061030b366004612907565b610983565b005b34801561031e57600080fd5b50610328600a5481565b60405190815260200161028d565b34801561034257600080fd5b50610281610351366004612b62565b610a99565b34801561036257600080fd5b50610310610371366004612818565b610b8c565b34801561038257600080fd5b50610281610391366004612a63565b610bbd565b3480156103a257600080fd5b50610310610c2d565b6103286103b9366004612a1e565b610c5d565b3480156103ca57600080fd5b506103de6103d9366004612a63565b610eba565b60405161028d989796959493929190612dbe565b3480156103fe57600080fd5b50610328600b5481565b34801561041457600080fd5b50610310610423366004612818565b61109a565b34801561043457600080fd5b506103106104433660046129ac565b6110b5565b34801561045457600080fd5b50610468610463366004612a63565b6110d8565b604080519586526020860194909452928401919091526060830152608082015260a00161028d565b34801561049c57600080fd5b506104b06104ab366004612a63565b6111ac565b60405161028d989796959493929190612c9b565b3480156104d057600080fd5b506103106104df3660046127c2565b61128c565b3480156104f057600080fd5b506102d86104ff366004612a63565b6112dc565b34801561051057600080fd5b50600e546102d8906001600160a01b031681565b34801561053057600080fd5b5061031061053f366004612adc565b611353565b34801561055057600080fd5b5061056461055f3660046129ac565b611407565b60405161028d929190612c6d565b34801561057e57600080fd5b5061032861058d3660046127c2565b611438565b34801561059e57600080fd5b506103106114bf565b3480156105b357600080fd5b506103106105c2366004612a63565b6114f5565b3480156105d357600080fd5b506007546001600160a01b03166102d8565b3480156105f157600080fd5b5061032860115481565b34801561060757600080fd5b50610310610616366004612950565b611528565b34801561062757600080fd5b506102ab6115aa565b34801561063c57600080fd5b5061031061064b3660046128d9565b6115b9565b34801561065c57600080fd5b5061028161066b366004612a95565b61167e565b34801561067c57600080fd5b5061031061068b366004612859565b6116da565b34801561069c57600080fd5b506103106106ab366004612adc565b611712565b3480156106bc57600080fd5b506103106106cb3660046127c2565b61175a565b3480156106dc57600080fd5b506102ab6106eb366004612a63565b6118c4565b3480156106fc57600080fd5b50610328600d5481565b34801561071257600080fd5b50610328600c5481565b34801561072857600080fd5b50610281610737366004612a95565b6119ac565b34801561074857600080fd5b506103106107573660046127c2565b6119fe565b34801561076857600080fd5b50610310610777366004612a63565b611a4a565b34801561078857600080fd5b506102816107973660046127df565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156107d157600080fd5b506103106107e0366004612adc565b611a7d565b3480156107f157600080fd5b506103106108003660046127c2565b611ac5565b60006001600160e01b031982166380ac58cd60e01b148061083657506001600160e01b03198216635b5e139f60e01b145b8061085157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461086690612e96565b80601f016020809104026020016040519081016040528092919081815260200182805461089290612e96565b80156108df5780601f106108b4576101008083540402835291602001916108df565b820191906000526020600020905b8154815290600101906020018083116108c257829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166109675760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061098e826112dc565b9050806001600160a01b0316836001600160a01b031614156109fc5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161095e565b336001600160a01b0382161480610a185750610a188133610797565b610a8a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161095e565b610a948383611b5d565b505050565b6010546000906001600160a01b03163314610ab357600080fd5b8560158881548110610ac757610ac7612f2c565b9060005260206000209060080201600201819055508460158881548110610af057610af0612f2c565b9060005260206000209060080201600301819055508360158881548110610b1957610b19612f2c565b9060005260206000209060080201600401819055508260158881548110610b4257610b42612f2c565b9060005260206000209060080201600501819055508160158881548110610b6b57610b6b612f2c565b60009182526020909120600660089092020101555060019695505050505050565b610b963382611bcb565b610bb25760405162461bcd60e51b815260040161095e90612d6d565b610a94838383611cc2565b6007546000906001600160a01b03163314610bea5760405162461bcd60e51b815260040161095e90612d38565b47821115610bf757600080fd5b604051339083156108fc029084906000818181858888f19350505050158015610c24573d6000803e3d6000fd5b50600192915050565b6007546001600160a01b03163314610c575760405162461bcd60e51b815260040161095e90612d38565b42600c55565b6009546040516370a0823160e01b8152306004820152600091906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610cc357600080fd5b505afa158015610cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfb9190612a7c565b1015610d5d5760405162461bcd60e51b815260206004820152602b60248201527f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060448201526a1dda5d1a0819985d58d95d60aa1b606482015260840161095e565b6011548210610dae5760405162461bcd60e51b815260206004820152601960248201527f4e6f204368617261637465722057697468205468617420494400000000000000604482015260640161095e565b600a54341015610e0f5760405162461bcd60e51b815260206004820152602660248201527f53656e6420302e30303220457468657220746f206d696e74204e6577204368616044820152653930b1ba32b960d11b606482015260840161095e565b6000610e1f600854600954611e62565b600081815260146020908152604080832080546001600160a01b03191633179055601382529091208651929350610e5a929091870190612693565b50600083815260126020908152604080832080548585526013909352922060028082019290925560018301546003808301919091559183015460048083019190915591830154600582015591015460068201556007019290925550919050565b6012602052806000526040600020600091509050806000015490806001015490806002015490806003015490806004015490806005018054610efb90612e96565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2790612e96565b8015610f745780601f10610f4957610100808354040283529160200191610f74565b820191906000526020600020905b815481529060010190602001808311610f5757829003601f168201915b505050505090806006018054610f8990612e96565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb590612e96565b80156110025780601f10610fd757610100808354040283529160200191611002565b820191906000526020600020905b815481529060010190602001808311610fe557829003601f168201915b50505050509080600701805461101790612e96565b80601f016020809104026020016040519081016040528092919081815260200182805461104390612e96565b80156110905780601f1061106557610100808354040283529160200191611090565b820191906000526020600020905b81548152906001019060200180831161107357829003601f168201915b5050505050905088565b610a94838383604051806020016040528060008152506116da565b600f546001600160a01b031633146110cc57600080fd5b6110d4611fed565b5050565b6000806000806000601586815481106110f3576110f3612f2c565b9060005260206000209060080201600301546015878154811061111857611118612f2c565b9060005260206000209060080201600401546015888154811061113d5761113d612f2c565b9060005260206000209060080201600601546015898154811061116257611162612f2c565b90600052602060002090600802016005015460158a8154811061118757611187612f2c565b9060005260206000209060080201600201549450945094509450945091939590929450565b601581815481106111bc57600080fd5b90600052602060002090600802016000915090508060000180546111df90612e96565b80601f016020809104026020016040519081016040528092919081815260200182805461120b90612e96565b80156112585780601f1061122d57610100808354040283529160200191611258565b820191906000526020600020905b81548152906001019060200180831161123b57829003601f168201915b5050505050908060010154908060020154908060030154908060040154908060050154908060060154908060070154905088565b6007546001600160a01b031633146112b65760405162461bcd60e51b815260040161095e90612d38565b600e80546001600160a01b0319166001600160a01b039290921691909117905542600c55565b6000818152600260205260408120546001600160a01b0316806108515760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161095e565b601154600081815260126020908152604090912086815560fa60018201819055600282018190556101f460038301556004820155855161139b92600590920191870190612693565b50600081815260126020908152604090912084516113c192600690920191860190612693565b50600081815260126020908152604090912083516113e792600790920191850190612693565b506001601160008282546113fb9190612e27565b90915550505050505050565b60006060600d54600c5461141b9190612e27565b421160405180602001604052806000815250915091509250929050565b60006001600160a01b0382166114a35760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161095e565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b031633146114e95760405162461bcd60e51b815260040161095e90612d38565b6114f36000612002565b565b6007546001600160a01b0316331461151f5760405162461bcd60e51b815260040161095e90612d38565b600d5542600c55565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115a05760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015260640161095e565b6110d48282612054565b60606001805461086690612e96565b6001600160a01b0382163314156116125760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161095e565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6007546000906001600160a01b031633146116ab5760405162461bcd60e51b815260040161095e90612d38565b600083815260126020908152604090912083516116d092600590920191850190612693565b5060019392505050565b6116e43383611bcb565b6117005760405162461bcd60e51b815260040161095e90612d6d565b61170c848484846122c9565b50505050565b601154600081815260126020908152604090912086815560fa600182018190556002820181905560038201556101f46004820155855161139b92600590920191870190612693565b6007546001600160a01b031633146117845760405162461bcd60e51b815260040161095e90612d38565b6040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a082319060240160206040518083038186803b1580156117cd57600080fd5b505afa1580156117e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118059190612a7c565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561184b57600080fd5b505af115801561185f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118839190612933565b6118c15760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161095e565b50565b6000818152600260205260409020546060906001600160a01b03166119435760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161095e565b600061195a60408051602081019091526000815290565b9050600081511161197a57604051806020016040528060008152506119a5565b80611984846122fc565b604051602001611995929190612bd1565b6040516020818303038152906040525b9392505050565b6007546000906001600160a01b031633146119d95760405162461bcd60e51b815260040161095e90612d38565b600083815260126020908152604090912083516116d092600790920191850190612693565b6007546001600160a01b03163314611a285760405162461bcd60e51b815260040161095e90612d38565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b6007546001600160a01b03163314611a745760405162461bcd60e51b815260040161095e90612d38565b600a5542600c55565b601154600081815260126020908152604090912086815560fa600182018190556101f46002830155600382018190556004820155855161139b92600590920191870190612693565b6007546001600160a01b03163314611aef5760405162461bcd60e51b815260040161095e90612d38565b6001600160a01b038116611b545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161095e565b6118c181612002565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611b92826112dc565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611c445760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161095e565b6000611c4f836112dc565b9050806001600160a01b0316846001600160a01b03161480611c8a5750836001600160a01b0316611c7f846108e9565b6001600160a01b0316145b80611cba57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611cd5826112dc565b6001600160a01b031614611d3d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161095e565b6001600160a01b038216611d9f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161095e565b611daa600082611b5d565b6001600160a01b0383166000908152600360205260408120805460019290611dd3908490612e53565b90915550506001600160a01b0382166000908152600360205260408120805460019290611e01908490612e27565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f000000000000000000000000000000000000000000000000000000000000000084866000604051602001611ed2929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401611eff93929190612c3d565b602060405180830381600087803b158015611f1957600080fd5b505af1158015611f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f519190612933565b50600083815260066020818152604080842054815180840189905280830186905230606082015260808082018390528351808303909101815260a090910190925281519183019190912093879052919052611fad906001612e27565b600085815260066020526040902055611cba8482604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600e546114f3906001600160a01b0316611ac5565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6015546000612064606484612eec565b6000858152601360205260409020600301546120809190612e27565b9050600060646120936201e24086612eec565b61209d9190612eec565b6000868152601360205260409020600401546120b99190612e27565b9050600060646120cc6209fbf187612eec565b6120d69190612eec565b6000878152601360205260409020600501546120f29190612e27565b90506000606461210461832888612eec565b61210e9190612eec565b60008881526013602052604090206006015461212a9190612e27565b604080516101008101825260008a81526013602052919091208054929350429260159291829161215990612e96565b80601f016020809104026020016040519081016040528092919081815260200182805461218590612e96565b80156121d25780601f106121a7576101008083540402835291602001916121d2565b820191906000526020600020905b8154815290600101906020018083116121b557829003601f168201915b5050509183525050602080820185905260008c815260138083526040808320600281015491860191909152606085018c9052608085018b905260a085018a905260c085018990529083526007015460e090930192909252835460018101855593825290819020825180519394600802909101926122529284920190612693565b5060208281015160018301556040808401516002840155606084015160038401556080840151600484015560a0840151600584015560c0840151600684015560e09093015160079092019190915560008a8152601490915220546122bf906001600160a01b0316876123fa565b5050505050505050565b6122d4848484611cc2565b6122e084848484612414565b61170c5760405162461bcd60e51b815260040161095e90612ce6565b6060816123205750506040805180820190915260018152600360fc1b602082015290565b8160005b811561234a578061233481612ed1565b91506123439050600a83612e3f565b9150612324565b60008167ffffffffffffffff81111561236557612365612f42565b6040519080825280601f01601f19166020018201604052801561238f576020820181803683370190505b5090505b8415611cba576123a4600183612e53565b91506123b1600a86612eec565b6123bc906030612e27565b60f81b8183815181106123d1576123d1612f2c565b60200101906001600160f81b031916908160001a9053506123f3600a86612e3f565b9450612393565b6110d482826040518060200160405280600081525061251e565b60006001600160a01b0384163b1561251657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612458903390899088908890600401612c00565b602060405180830381600087803b15801561247257600080fd5b505af19250505080156124a2575060408051601f3d908101601f1916820190925261249f9181019061298f565b60015b6124fc573d8080156124d0576040519150601f19603f3d011682016040523d82523d6000602084013e6124d5565b606091505b5080516124f45760405162461bcd60e51b815260040161095e90612ce6565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611cba565b506001611cba565b6125288383612551565b6125356000848484612414565b610a945760405162461bcd60e51b815260040161095e90612ce6565b6001600160a01b0382166125a75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161095e565b6000818152600260205260409020546001600160a01b03161561260c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161095e565b6001600160a01b0382166000908152600360205260408120805460019290612635908490612e27565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461269f90612e96565b90600052602060002090601f0160209004810192826126c15760008555612707565b82601f106126da57805160ff1916838001178555612707565b82800160010185558215612707579182015b828111156127075782518255916020019190600101906126ec565b50612713929150612717565b5090565b5b808211156127135760008155600101612718565b600067ffffffffffffffff8084111561274757612747612f42565b604051601f8501601f19908116603f0116810190828211818310171561276f5761276f612f42565b8160405280935085815286868601111561278857600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126127b357600080fd5b6119a58383356020850161272c565b6000602082840312156127d457600080fd5b81356119a581612f58565b600080604083850312156127f257600080fd5b82356127fd81612f58565b9150602083013561280d81612f58565b809150509250929050565b60008060006060848603121561282d57600080fd5b833561283881612f58565b9250602084013561284881612f58565b929592945050506040919091013590565b6000806000806080858703121561286f57600080fd5b843561287a81612f58565b9350602085013561288a81612f58565b925060408501359150606085013567ffffffffffffffff8111156128ad57600080fd5b8501601f810187136128be57600080fd5b6128cd8782356020840161272c565b91505092959194509250565b600080604083850312156128ec57600080fd5b82356128f781612f58565b9150602083013561280d81612f6d565b6000806040838503121561291a57600080fd5b823561292581612f58565b946020939093013593505050565b60006020828403121561294557600080fd5b81516119a581612f6d565b6000806040838503121561296357600080fd5b50508035926020909101359150565b60006020828403121561298457600080fd5b81356119a581612f7b565b6000602082840312156129a157600080fd5b81516119a581612f7b565b600080602083850312156129bf57600080fd5b823567ffffffffffffffff808211156129d757600080fd5b818501915085601f8301126129eb57600080fd5b8135818111156129fa57600080fd5b866020828501011115612a0c57600080fd5b60209290920196919550909350505050565b60008060408385031215612a3157600080fd5b823567ffffffffffffffff811115612a4857600080fd5b612a54858286016127a2565b95602094909401359450505050565b600060208284031215612a7557600080fd5b5035919050565b600060208284031215612a8e57600080fd5b5051919050565b60008060408385031215612aa857600080fd5b82359150602083013567ffffffffffffffff811115612ac657600080fd5b612ad2858286016127a2565b9150509250929050565b60008060008060808587031215612af257600080fd5b84359350602085013567ffffffffffffffff80821115612b1157600080fd5b612b1d888389016127a2565b94506040870135915080821115612b3357600080fd5b612b3f888389016127a2565b93506060870135915080821115612b5557600080fd5b506128cd878288016127a2565b60008060008060008060c08789031215612b7b57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60008151808452612bbd816020860160208601612e6a565b601f01601f19169290920160200192915050565b60008351612be3818460208801612e6a565b835190830190612bf7818360208801612e6a565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612c3390830184612ba5565b9695505050505050565b60018060a01b0384168152826020820152606060408201526000612c646060830184612ba5565b95945050505050565b8215158152604060208201526000611cba6040830184612ba5565b6020815260006119a56020830184612ba5565b6000610100808352612caf8184018c612ba5565b602084019a909a52505060408101969096526060860194909452608085019290925260a084015260c083015260e090910152919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60006101008a83528960208401528860408401528760608401528660808401528060a0840152612df081840187612ba5565b905082810360c0840152612e048186612ba5565b905082810360e0840152612e188185612ba5565b9b9a5050505050505050505050565b60008219821115612e3a57612e3a612f00565b500190565b600082612e4e57612e4e612f16565b500490565b600082821015612e6557612e65612f00565b500390565b60005b83811015612e85578181015183820152602001612e6d565b8381111561170c5750506000910152565b600181811c90821680612eaa57607f821691505b60208210811415612ecb57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612ee557612ee5612f00565b5060010190565b600082612efb57612efb612f16565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146118c157600080fd5b80151581146118c157600080fd5b6001600160e01b0319811681146118c157600080fdfea26469706673582212206bbe7c44dcfcbbbfb9283c5aeaecdd84a2ed0df58ca0949f451622c21fca59f164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 517,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 519,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 523,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 527,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 531,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 537,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 79,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "nonces",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 292,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 7049,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "keyHash",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 7051,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "fee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 7058,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "mintFee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 7060,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "randomResult",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 7064,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "lastCheckIn",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 7067,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "checkInTimeInterval",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 7069,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "nextOwner",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 7071,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "keeperRegistryAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 7073,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "gameAddress",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 7165,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "totalMintableCharacters",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 7170,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "mintableNFTCharacterStruct",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(mintableNFTCharacter)7163_storage)"
      },
      {
        "astId": 7175,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "NFTCharacterStruct",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_bytes32,t_struct(NFTCharacter)7146_storage)"
      },
      {
        "astId": 7179,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "requestToSender",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 7183,
        "contract": "contracts/breakInNFTMinter.sol:NFTMint",
        "label": "characters",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_struct(NFTCharacter)7146_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(NFTCharacter)7146_storage)dyn_storage": {
        "base": "t_struct(NFTCharacter)7146_storage",
        "encoding": "dynamic_array",
        "label": "struct NFTMint.NFTCharacter[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(NFTCharacter)7146_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct NFTMint.NFTCharacter)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTCharacter)7146_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(mintableNFTCharacter)7163_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTMint.mintableNFTCharacter)",
        "numberOfBytes": "32",
        "value": "t_struct(mintableNFTCharacter)7163_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NFTCharacter)7146_storage": {
        "encoding": "inplace",
        "label": "struct NFTMint.NFTCharacter",
        "members": [
          {
            "astId": 7131,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7133,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "born",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7135,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "health",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7137,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "agility",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7139,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "strength",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7141,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "sneak",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7143,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "charm",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7145,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "characterID",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(mintableNFTCharacter)7163_storage": {
        "encoding": "inplace",
        "label": "struct NFTMint.mintableNFTCharacter",
        "members": [
          {
            "astId": 7148,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "health",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7150,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "agility",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7152,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "strength",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7154,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "sneak",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7156,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "charm",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7158,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "imageURI",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 7160,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "name",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 7162,
            "contract": "contracts/breakInNFTMinter.sol:NFTMint",
            "label": "description",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
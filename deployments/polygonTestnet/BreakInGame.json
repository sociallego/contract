{
  "address": "0x91dCD7E847d366a3D664162751A807d60dc829B5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_keeperRegistryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_breakInNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_socialLegoToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "code",
          "type": "uint256"
        }
      ],
      "name": "gameCode",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "NFTCharacterDepositLedger",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "NFTID",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isDeposited",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "arrested",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "freetoPlayAgain",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "playingPVP",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "canStopPlayingPVP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lootingTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "agility",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sneak",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "charm",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "riskBaseDifficulty",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "payoutAmountBase",
          "type": "uint256"
        }
      ],
      "name": "addScenario",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCheckInTimeInterval",
          "type": "uint256"
        }
      ],
      "name": "changeCheckInTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newHospitalBill",
          "type": "uint256"
        }
      ],
      "name": "changeHospitalBill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newInheritor",
          "type": "address"
        }
      ],
      "name": "changeInheritance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkInTimeInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToDeposit",
          "type": "uint256"
        }
      ],
      "name": "depositJewels",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "NFTID",
          "type": "uint256"
        }
      ],
      "name": "depositNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gameScenarios",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "riskBaseDifficulty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payoutAmountBase",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hospitalVisit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "jewelDepositLedger",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastCheckIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "scenarioNumber",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "riskBaseDifficulty",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "payoutAmountBase",
          "type": "uint16"
        }
      ],
      "name": "modifyScenario",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerCheckIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "breakInStyle",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "targetPlayer",
          "type": "address"
        }
      ],
      "name": "playBreakOut",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "difficultyLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "breakInStyle",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scenario",
          "type": "uint256"
        }
      ],
      "name": "playGame",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "breakInStyle",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "targetPlayer",
          "type": "address"
        }
      ],
      "name": "playPVP",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPlayPVP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopPlayPVP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToWithdraw",
          "type": "uint256"
        }
      ],
      "name": "withdrawJewels",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x15e08170510c3f1e089a2e074081fa9e0087de46844655de5bbe82b911e637e9",
  "receipt": {
    "to": null,
    "from": "0xDeAdA90a7B242FC396eB277717a31e67A6005c93",
    "contractAddress": "0x91dCD7E847d366a3D664162751A807d60dc829B5",
    "transactionIndex": 20,
    "gasUsed": "3495260",
    "logsBloom": "0x00000000000000020000000000000000000000000000000000800000000000000000000000000000000000000000000002008020100000000000000000000000000000000000400000000000000000800001000000000000000100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000000000000000000000000000000000000000000000000200000000000000020000000020000000001000000000000000000000100004000000000000000000001000000000000000000000000000000100000000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x39d1798fb689659e1fb8339360e00f1037247ed6150166f40b63ac6f45d2641f",
    "transactionHash": "0x15e08170510c3f1e089a2e074081fa9e0087de46844655de5bbe82b911e637e9",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 26500796,
        "transactionHash": "0x15e08170510c3f1e089a2e074081fa9e0087de46844655de5bbe82b911e637e9",
        "address": "0x91dCD7E847d366a3D664162751A807d60dc829B5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000deada90a7b242fc396eb277717a31e67a6005c93"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0x39d1798fb689659e1fb8339360e00f1037247ed6150166f40b63ac6f45d2641f"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 26500796,
        "transactionHash": "0x15e08170510c3f1e089a2e074081fa9e0087de46844655de5bbe82b911e637e9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000deada90a7b242fc396eb277717a31e67a6005c93",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001b905c874b22a80000000000000000000000000000000000000000000000003e3fcda3890a7a6e000000000000000000000000000000000000000000000dd381e293cb6123b68f0000000000000000000000000000000000000000000000003e243d4701bf57c6000000000000000000000000000000000000000000000dd381fe2427e86ed937",
        "logIndex": 41,
        "blockHash": "0x39d1798fb689659e1fb8339360e00f1037247ed6150166f40b63ac6f45d2641f"
      }
    ],
    "blockNumber": 26500796,
    "cumulativeGasUsed": "3979039",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",
    "100000000000000",
    "0x6179B349067af80D0c171f43E6d767E4A00775Cd",
    "0xd406DC29f5f61004030E8E001e49239Daaf423f1",
    "0x9F110D35EF38857cf684ceC01D19F9806907D47a"
  ],
  "solcInputHash": "0fe244a96d5e7d7382f6e351ada9a92a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_keeperRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_breakInNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_socialLegoToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"}],\"name\":\"gameCode\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"NFTCharacterDepositLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"NFTID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDeposited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"arrested\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"freetoPlayAgain\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"playingPVP\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"canStopPlayingPVP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lootingTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agility\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sneak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charm\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"riskBaseDifficulty\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"payoutAmountBase\",\"type\":\"uint256\"}],\"name\":\"addScenario\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCheckInTimeInterval\",\"type\":\"uint256\"}],\"name\":\"changeCheckInTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newHospitalBill\",\"type\":\"uint256\"}],\"name\":\"changeHospitalBill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newInheritor\",\"type\":\"address\"}],\"name\":\"changeInheritance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkInTimeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToDeposit\",\"type\":\"uint256\"}],\"name\":\"depositJewels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NFTID\",\"type\":\"uint256\"}],\"name\":\"depositNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameScenarios\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"riskBaseDifficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutAmountBase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hospitalVisit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jewelDepositLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCheckIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scenarioNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"riskBaseDifficulty\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"payoutAmountBase\",\"type\":\"uint16\"}],\"name\":\"modifyScenario\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCheckIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"breakInStyle\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetPlayer\",\"type\":\"address\"}],\"name\":\"playBreakOut\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"difficultyLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"breakInStyle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scenario\",\"type\":\"uint256\"}],\"name\":\"playGame\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"breakInStyle\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetPlayer\",\"type\":\"address\"}],\"name\":\"playPVP\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPlayPVP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopPlayPVP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawJewels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/breakInGame.sol\":\"BreakInGame\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xff9e7d773545a1a5d73106e72bfb429da79c1cc4d893fb62051df801d2e61469\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/breakInGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n\\r\\ninterface INFTMinter {\\r\\n    function getNFTAttributes(uint256 NFTID)\\r\\n        external\\r\\n        returns (\\r\\n            uint256 agility,\\r\\n            uint256 strength,\\r\\n            uint256 charm,\\r\\n            uint256 sneak,\\r\\n            uint256 health\\r\\n        );\\r\\n\\r\\n    function changeNFTAttributes(\\r\\n        uint256 NFTID,\\r\\n        uint256 health,\\r\\n        uint256 agility,\\r\\n        uint256 strength,\\r\\n        uint256 sneak,\\r\\n        uint256 charm\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract BreakInGame is VRFConsumerBase, Ownable, KeeperCompatibleInterface {\\r\\n    bytes32 internal keyHash;\\r\\n    uint256 internal fee;\\r\\n\\r\\n    uint256 public randomResult;\\r\\n\\r\\n    address keeperRegistryAddress;\\r\\n\\r\\n    modifier onlyKeeper() {\\r\\n        require(msg.sender == keeperRegistryAddress);\\r\\n        _;\\r\\n    }\\r\\n    uint256 hospitalBill = 1000 * 10**18;\\r\\n    uint256 public lastCheckIn = block.timestamp;\\r\\n    uint256 public checkInTimeInterval = 864000; //default to six months\\r\\n    address public nextOwner;\\r\\n\\r\\n    INFTMinter IBreakInNFTMinter;\\r\\n    IERC721 breakInNFT; //address of breakInNFTs\\r\\n    IERC20 socialLegoToken; //address of SocialLego token\\r\\n\\r\\n    constructor(\\r\\n        address _vrfCoordinator,\\r\\n        address _link,\\r\\n        bytes32 _keyHash,\\r\\n        uint256 _fee,\\r\\n        address _keeperRegistryAddress,\\r\\n        address _breakInNFT,\\r\\n        address _socialLegoToken\\r\\n    ) VRFConsumerBase(_vrfCoordinator, _link) {\\r\\n        keyHash = _keyHash;\\r\\n        fee = _fee; // (Varies by network)\\r\\n\\r\\n        keeperRegistryAddress = _keeperRegistryAddress;\\r\\n        IBreakInNFTMinter = INFTMinter(_breakInNFT);\\r\\n        breakInNFT = IERC721(_breakInNFT);\\r\\n        socialLegoToken = IERC20(_socialLegoToken);\\r\\n    }\\r\\n\\r\\n    struct scenarios {\\r\\n        string name;\\r\\n        uint256 riskBaseDifficulty;\\r\\n        uint256 payoutAmountBase;\\r\\n    }\\r\\n    struct NFTCharacter {\\r\\n        uint256 born;\\r\\n        uint256 health;\\r\\n        uint256 agility;\\r\\n        uint256 strength;\\r\\n        uint256 sneak;\\r\\n        uint256 charm;\\r\\n        uint256 characterID;\\r\\n    }\\r\\n    struct depostedCharacter {\\r\\n        uint256 NFTID;\\r\\n        bool isDeposited;\\r\\n        bool arrested;\\r\\n        uint256 freetoPlayAgain;\\r\\n        bool playingPVP;\\r\\n        uint256 canStopPlayingPVP;\\r\\n        uint256 lootingTimeout;\\r\\n        uint256 health;\\r\\n        uint256 agility;\\r\\n        uint256 strength;\\r\\n        uint256 sneak;\\r\\n        uint256 charm;\\r\\n    }\\r\\n    struct gamePlay {\\r\\n        address player;\\r\\n        uint256 scenario;\\r\\n        uint256 breakInStyle;\\r\\n        uint256 difficultyLevel;\\r\\n        uint256 health;\\r\\n        uint256 agility;\\r\\n        uint256 strength;\\r\\n        uint256 sneak;\\r\\n        uint256 charm;\\r\\n    }\\r\\n    struct jailBreak {\\r\\n        address player;\\r\\n        uint256 breakInStyle;\\r\\n        uint256 health;\\r\\n        uint256 agility;\\r\\n        uint256 strength;\\r\\n        uint256 sneak;\\r\\n        uint256 charm;\\r\\n        address targetPlayer; // who you want to break out\\r\\n    }\\r\\n    struct PvP {\\r\\n        address player;\\r\\n        uint256 breakInStyle;\\r\\n        uint256 difficultyLevel;\\r\\n        uint256 health;\\r\\n        uint256 agility;\\r\\n        uint256 strength;\\r\\n        uint256 sneak;\\r\\n        uint256 charm;\\r\\n        address targetPlayer; // who you want to steal from\\r\\n        uint256 targetPlayerHealth;\\r\\n        uint256 targetPlayerAgility;\\r\\n        uint256 targetPlayerStrength;\\r\\n        uint256 targetPlayerSneak;\\r\\n        uint256 targetPlayerCharm;\\r\\n    }\\r\\n\\r\\n    struct gameModes {\\r\\n        uint256 gameMode; // 0 if robbing, 1 if jailBreak, 2 if PvP\\r\\n    }\\r\\n\\r\\n    event gameCode(bytes32 requestID, address player, uint256 code);\\r\\n    uint256 differentGameScenarios;\\r\\n    mapping(uint256 => scenarios) public gameScenarios; // current gameScenarios for robbing\\r\\n    mapping(bytes32 => PvP) currentPVPGamePlays; // for if you are trying to steal from a player\\r\\n    mapping(bytes32 => gamePlay) currentGamePlays; // this is for a standard robbing gameplay\\r\\n    mapping(bytes32 => gameModes) currentGameMode; // this allows for a quick compare statement to determine which game to play to safe gas\\r\\n    mapping(bytes32 => jailBreak) currentJailBreaks; // this is for players trying to break out a buddy\\r\\n    mapping(address => depostedCharacter) public NFTCharacterDepositLedger; // Players deposit their NFT into this contract to Play\\r\\n    mapping(address => uint256) public jewelDepositLedger; // Players must deposit their loot to play PvP\\r\\n\\r\\n    function changeHospitalBill(uint256 newHospitalBill) public onlyOwner {\\r\\n        hospitalBill = newHospitalBill;\\r\\n        lastCheckIn = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function addScenario(\\r\\n        string memory name,\\r\\n        uint16 riskBaseDifficulty,\\r\\n        uint256 payoutAmountBase\\r\\n    ) public onlyOwner {\\r\\n        uint256 gameScenarioID = differentGameScenarios;\\r\\n        gameScenarios[gameScenarioID].name = name;\\r\\n        gameScenarios[gameScenarioID].riskBaseDifficulty = riskBaseDifficulty;\\r\\n        gameScenarios[gameScenarioID].payoutAmountBase = payoutAmountBase;\\r\\n        differentGameScenarios += 1;\\r\\n    }\\r\\n\\r\\n    function modifyScenario(\\r\\n        uint256 scenarioNumber,\\r\\n        string memory name,\\r\\n        uint16 riskBaseDifficulty,\\r\\n        uint16 payoutAmountBase\\r\\n    ) public onlyOwner {\\r\\n        gameScenarios[scenarioNumber].riskBaseDifficulty = riskBaseDifficulty; // scenarios can be removed by effectily raising the riskbase difficult level so high no one would bother playing it and making payoutAmountBase 0\\r\\n        gameScenarios[scenarioNumber].payoutAmountBase = payoutAmountBase;\\r\\n        gameScenarios[scenarioNumber].name = name;\\r\\n    }\\r\\n\\r\\n    function depositNFT(uint256 NFTID) public {\\r\\n        // users Must Deposit a character to play\\r\\n        require(\\r\\n            NFTCharacterDepositLedger[msg.sender].isDeposited != true,\\r\\n            \\\"Character Already Deposited\\\"\\r\\n        );\\r\\n        breakInNFT.transferFrom(msg.sender, address(this), NFTID);\\r\\n        NFTCharacterDepositLedger[msg.sender].NFTID = NFTID;\\r\\n        NFTCharacterDepositLedger[msg.sender].isDeposited = true; //\\r\\n        (\\r\\n            NFTCharacterDepositLedger[msg.sender].agility,\\r\\n            NFTCharacterDepositLedger[msg.sender].strength,\\r\\n            NFTCharacterDepositLedger[msg.sender].charm,\\r\\n            NFTCharacterDepositLedger[msg.sender].sneak,\\r\\n            NFTCharacterDepositLedger[msg.sender].health\\r\\n        ) = IBreakInNFTMinter.getNFTAttributes(\\r\\n            NFTCharacterDepositLedger[msg.sender].NFTID\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawNFT() public {\\r\\n        require(\\r\\n            NFTCharacterDepositLedger[msg.sender].isDeposited == true,\\r\\n            \\\"No Character Deposited\\\"\\r\\n        );\\r\\n        require(\\r\\n            NFTCharacterDepositLedger[msg.sender].arrested == false,\\r\\n            \\\"Character in Prison\\\"\\r\\n        );\\r\\n        IBreakInNFTMinter.changeNFTAttributes(\\r\\n            NFTCharacterDepositLedger[msg.sender].NFTID, // modify attributes of player if experience was gained or health lost\\r\\n            NFTCharacterDepositLedger[msg.sender].health,\\r\\n            NFTCharacterDepositLedger[msg.sender].agility,\\r\\n            NFTCharacterDepositLedger[msg.sender].strength,\\r\\n            NFTCharacterDepositLedger[msg.sender].sneak,\\r\\n            NFTCharacterDepositLedger[msg.sender].charm\\r\\n        );\\r\\n        breakInNFT.transferFrom(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            NFTCharacterDepositLedger[msg.sender].NFTID\\r\\n        );\\r\\n        NFTCharacterDepositLedger[msg.sender].isDeposited = false;\\r\\n    }\\r\\n\\r\\n    function depositJewels(uint256 amountToDeposit) public {\\r\\n        require(\\r\\n            NFTCharacterDepositLedger[msg.sender].arrested == false,\\r\\n            \\\"Character in Prison\\\"\\r\\n        );\\r\\n        socialLegoToken.transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            amountToDeposit\\r\\n        );\\r\\n        jewelDepositLedger[msg.sender] += amountToDeposit;\\r\\n    }\\r\\n\\r\\n    function withdrawJewels(uint256 amountToWithdraw) public {\\r\\n        require(\\r\\n            jewelDepositLedger[msg.sender] >= amountToWithdraw,\\r\\n            \\\"Trying to withdraw too much money\\\"\\r\\n        );\\r\\n        socialLegoToken.transfer(msg.sender, amountToWithdraw);\\r\\n        jewelDepositLedger[msg.sender] -= amountToWithdraw;\\r\\n    }\\r\\n\\r\\n    function startPlayPVP() public {\\r\\n        require(\\r\\n            NFTCharacterDepositLedger[msg.sender].isDeposited == true,\\r\\n            \\\"Character Not deposited\\\"\\r\\n        );\\r\\n        NFTCharacterDepositLedger[msg.sender].playingPVP = true;\\r\\n        NFTCharacterDepositLedger[msg.sender].canStopPlayingPVP =\\r\\n            block.timestamp +\\r\\n            604800; // players must play a minimum 7 days to prevent players entering and exiting quickly;\\r\\n    }\\r\\n\\r\\n    function stopPlayPVP() public {\\r\\n        require(\\r\\n            block.timestamp >=\\r\\n                NFTCharacterDepositLedger[msg.sender].canStopPlayingPVP,\\r\\n            \\\"You must wait 7 days since you started playing\\\"\\r\\n        );\\r\\n        NFTCharacterDepositLedger[msg.sender].playingPVP = false;\\r\\n    }\\r\\n\\r\\n    function hospitalVisit() public {\\r\\n        require(\\r\\n            NFTCharacterDepositLedger[msg.sender].isDeposited == true,\\r\\n            \\\"Character Not Deposited\\\"\\r\\n        );\\r\\n        require(NFTCharacterDepositLedger[msg.sender].health < 100);\\r\\n        require(jewelDepositLedger[msg.sender] >= (hospitalBill));\\r\\n        jewelDepositLedger[msg.sender] -= hospitalBill;\\r\\n        NFTCharacterDepositLedger[msg.sender].health = 100;\\r\\n    }\\r\\n\\r\\n    // Please Hire Me ;)\\r\\n    function playGame(\\r\\n        uint256 difficultyLevel,\\r\\n        uint256 breakInStyle,\\r\\n        uint256 scenario\\r\\n    ) public returns (bytes32) {\\r\\n        require(\\r\\n            LINK.balanceOf(address(this)) >= fee,\\r\\n            \\\"Not enough LINK - fill contract with faucet\\\"\\r\\n        );\\r\\n        require(\\r\\n            NFTCharacterDepositLedger[msg.sender].isDeposited == true,\\r\\n            \\\"No Character Deposited\\\"\\r\\n        );\\r\\n        require(\\r\\n            NFTCharacterDepositLedger[msg.sender].arrested == false,\\r\\n            \\\"Character in Prison\\\"\\r\\n        );\\r\\n        require(scenario < differentGameScenarios, \\\"No Game Scenario\\\");\\r\\n        bytes32 requestID = requestRandomness(keyHash, fee);\\r\\n        currentGameMode[requestID].gameMode = 0;\\r\\n        currentGamePlays[requestID].player = msg.sender;\\r\\n        currentGamePlays[requestID].breakInStyle = breakInStyle;\\r\\n        currentGamePlays[requestID].difficultyLevel = difficultyLevel;\\r\\n        currentGamePlays[requestID].scenario = scenario;\\r\\n        currentGamePlays[requestID].agility = NFTCharacterDepositLedger[\\r\\n            msg.sender\\r\\n        ].agility;\\r\\n        currentGamePlays[requestID].strength = NFTCharacterDepositLedger[\\r\\n            msg.sender\\r\\n        ].strength;\\r\\n        currentGamePlays[requestID].charm = NFTCharacterDepositLedger[\\r\\n            msg.sender\\r\\n        ].charm;\\r\\n        currentGamePlays[requestID].sneak = NFTCharacterDepositLedger[\\r\\n            msg.sender\\r\\n        ].sneak;\\r\\n        currentGamePlays[requestID].health = NFTCharacterDepositLedger[\\r\\n            msg.sender\\r\\n        ].health;\\r\\n        return requestID;\\r\\n    }\\r\\n\\r\\n    function playBreakOut(uint256 breakInStyle, address targetPlayer)\\r\\n        public\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        require(\\r\\n            LINK.balanceOf(address(this)) >= fee,\\r\\n            \\\"Not enough LINK - fill contract with faucet\\\"\\r\\n        );\\r\\n        require(\\r\\n            NFTCharacterDepositLedger[targetPlayer].isDeposited == true,\\r\\n            \\\"No Target Character Deposited\\\"\\r\\n        );\\r\\n        require(\\r\\n            NFTCharacterDepositLedger[msg.sender].isDeposited == true,\\r\\n            \\\"You have no Character Deposited\\\"\\r\\n        );\\r\\n        require(\\r\\n            NFTCharacterDepositLedger[targetPlayer].arrested == true,\\r\\n            \\\"Character is not in Prison\\\"\\r\\n        );\\r\\n        require(targetPlayer != msg.sender, \\\"You cannot free yourself\\\");\\r\\n        bytes32 requestID = requestRandomness(keyHash, fee);\\r\\n        currentGameMode[requestID].gameMode = 1;\\r\\n        currentJailBreaks[requestID].player = msg.sender;\\r\\n        currentJailBreaks[requestID].breakInStyle = breakInStyle;\\r\\n        currentJailBreaks[requestID].targetPlayer = targetPlayer;\\r\\n        currentJailBreaks[requestID].agility = NFTCharacterDepositLedger[\\r\\n            msg.sender\\r\\n        ].agility;\\r\\n        currentJailBreaks[requestID].strength = NFTCharacterDepositLedger[\\r\\n            msg.sender\\r\\n        ].strength;\\r\\n        currentJailBreaks[requestID].charm = NFTCharacterDepositLedger[\\r\\n            msg.sender\\r\\n        ].charm;\\r\\n        currentJailBreaks[requestID].sneak = NFTCharacterDepositLedger[\\r\\n            msg.sender\\r\\n        ].sneak;\\r\\n        currentJailBreaks[requestID].health = NFTCharacterDepositLedger[\\r\\n            msg.sender\\r\\n        ].health;\\r\\n        return requestID;\\r\\n    }\\r\\n\\r\\n    function playPVP(uint256 breakInStyle, address targetPlayer)\\r\\n        public\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        require(\\r\\n            LINK.balanceOf(address(this)) >= fee,\\r\\n            \\\"Not enough LINK - fill contract with faucet\\\"\\r\\n        );\\r\\n        require(\\r\\n            NFTCharacterDepositLedger[targetPlayer].isDeposited == true,\\r\\n            \\\"No Target Character Deposited\\\"\\r\\n        );\\r\\n        require(\\r\\n            NFTCharacterDepositLedger[msg.sender].isDeposited == true,\\r\\n            \\\"You have no Character Deposited\\\"\\r\\n        );\\r\\n        require(targetPlayer != msg.sender, \\\"You cannot rob from yourself\\\");\\r\\n        require(\\r\\n            NFTCharacterDepositLedger[msg.sender].lootingTimeout <\\r\\n                block.timestamp\\r\\n        ); // only successfully rob someone once a day\\r\\n        require(\\r\\n            NFTCharacterDepositLedger[targetPlayer].lootingTimeout <\\r\\n                block.timestamp\\r\\n        ); // only get robbed  once a day\\r\\n        require(jewelDepositLedger[targetPlayer] > (1 * 10**18)); // require targetPlayer has at least 1 jewel to prevent division issues.\\r\\n        require(\\r\\n            jewelDepositLedger[msg.sender] >\\r\\n                (jewelDepositLedger[targetPlayer] / 2)\\r\\n        ); // you need to have at least 50% jewels of your target character to prvent small characters constantly attacking\\r\\n        bytes32 requestID = requestRandomness(keyHash, fee);\\r\\n        currentGameMode[requestID].gameMode = 2;\\r\\n        currentPVPGamePlays[requestID].player = msg.sender;\\r\\n        currentPVPGamePlays[requestID].breakInStyle = breakInStyle;\\r\\n        currentPVPGamePlays[requestID].targetPlayer = targetPlayer;\\r\\n        currentPVPGamePlays[requestID].agility = NFTCharacterDepositLedger[\\r\\n            msg.sender\\r\\n        ].agility;\\r\\n        currentPVPGamePlays[requestID].strength = NFTCharacterDepositLedger[\\r\\n            msg.sender\\r\\n        ].strength;\\r\\n        currentPVPGamePlays[requestID].charm = NFTCharacterDepositLedger[\\r\\n            msg.sender\\r\\n        ].charm;\\r\\n        currentPVPGamePlays[requestID].sneak = NFTCharacterDepositLedger[\\r\\n            msg.sender\\r\\n        ].sneak;\\r\\n        currentPVPGamePlays[requestID].health = NFTCharacterDepositLedger[\\r\\n            msg.sender\\r\\n        ].health;\\r\\n\\r\\n        currentPVPGamePlays[requestID]\\r\\n            .targetPlayerAgility = NFTCharacterDepositLedger[targetPlayer]\\r\\n            .agility;\\r\\n        currentPVPGamePlays[requestID]\\r\\n            .targetPlayerStrength = NFTCharacterDepositLedger[targetPlayer]\\r\\n            .strength;\\r\\n        currentPVPGamePlays[requestID]\\r\\n            .targetPlayerCharm = NFTCharacterDepositLedger[targetPlayer].charm;\\r\\n        currentPVPGamePlays[requestID]\\r\\n            .targetPlayerSneak = NFTCharacterDepositLedger[targetPlayer].sneak;\\r\\n        currentPVPGamePlays[requestID]\\r\\n            .targetPlayerHealth = NFTCharacterDepositLedger[targetPlayer]\\r\\n            .health;\\r\\n\\r\\n        return requestID;\\r\\n    }\\r\\n\\r\\n    function vrfPlayGame(uint256 randomness, bytes32 requestId) internal {\\r\\n        // only when randomness is returned can this function be called.\\r\\n        if ((randomness % 2000) == 1) {\\r\\n            // 1 in 2000 chance character dies\\r\\n            NFTCharacterDepositLedger[currentGamePlays[requestId].player]\\r\\n                .isDeposited = false;\\r\\n            emit gameCode(requestId, currentGamePlays[requestId].player, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (((randomness % 143456) % 20) == 1) {\\r\\n            // 1 in 20 chance character is injured\\r\\n            uint256 healthDecrease = ((randomness % 123456) % 99); // player can lose up to 99 health every 1 in 20\\r\\n            if (\\r\\n                (100 - currentGamePlays[requestId].health + healthDecrease) >\\r\\n                100\\r\\n            ) {\\r\\n                // players don't have to heal if they get injured before but if they get injured again and its greater than 100, they die\\r\\n                NFTCharacterDepositLedger[currentGamePlays[requestId].player]\\r\\n                    .isDeposited = false;\\r\\n                emit gameCode(requestId, currentGamePlays[requestId].player, 0);\\r\\n                return;\\r\\n            }\\r\\n            NFTCharacterDepositLedger[currentGamePlays[requestId].player]\\r\\n                .health -= healthDecrease;\\r\\n            emit gameCode(requestId, currentGamePlays[requestId].player, 1);\\r\\n            return;\\r\\n        }\\r\\n        if (((randomness % 23015) % 20) == 1) {\\r\\n            // 1 in 20 chance character is almost getting arrested\\r\\n            uint256 agilityRequiredtoEscape = ((randomness % 54321) % 1000); // player still has chance to escape\\r\\n            if (currentGamePlays[requestId].agility > agilityRequiredtoEscape) {\\r\\n                if (((randomness % 2214) % 2) == 1) {\\r\\n                    // gain XP!\\r\\n                    NFTCharacterDepositLedger[\\r\\n                        currentGamePlays[requestId].player\\r\\n                    ].agility += 1;\\r\\n                }\\r\\n                emit gameCode(requestId, currentGamePlays[requestId].player, 3);\\r\\n                return; // escaped but no money given\\r\\n            } else {\\r\\n                NFTCharacterDepositLedger[currentGamePlays[requestId].player]\\r\\n                    .arrested = true;\\r\\n                NFTCharacterDepositLedger[currentGamePlays[requestId].player]\\r\\n                    .freetoPlayAgain = block.timestamp + 172800; //player arrested for 2 days.\\r\\n                emit gameCode(requestId, currentGamePlays[requestId].player, 2);\\r\\n                return; //  playerArrested\\r\\n            }\\r\\n        }\\r\\n        if (currentGamePlays[requestId].breakInStyle == 0) {\\r\\n            //player is sneaking in\\r\\n            uint256 sneakInExperienceRequired = ((randomness % 235674) % 750) +\\r\\n                currentGamePlays[requestId].difficultyLevel +\\r\\n                gameScenarios[currentGamePlays[requestId].scenario]\\r\\n                    .riskBaseDifficulty; // difficulty will be somewhere between 0 to 10000 pluse the difficulty level which will be about 100 to 950\\r\\n            if (currentGamePlays[requestId].sneak > sneakInExperienceRequired) {\\r\\n                uint256 totalWon = currentGamePlays[requestId].difficultyLevel *\\r\\n                    gameScenarios[currentGamePlays[requestId].scenario]\\r\\n                        .payoutAmountBase;\\r\\n                jewelDepositLedger[\\r\\n                    currentGamePlays[requestId].player\\r\\n                ] += totalWon;\\r\\n                if (((randomness % 2214) % 2) == 1) {\\r\\n                    // gain XP!\\r\\n                    NFTCharacterDepositLedger[\\r\\n                        currentGamePlays[requestId].player\\r\\n                    ].sneak += 1;\\r\\n                }\\r\\n                emit gameCode(\\r\\n                    requestId,\\r\\n                    currentGamePlays[requestId].player,\\r\\n                    totalWon\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n            emit gameCode(requestId, currentGamePlays[requestId].player, 4);\\r\\n            return;\\r\\n        }\\r\\n        if (currentGamePlays[requestId].breakInStyle == 1) {\\r\\n            // player is breaking in with charm\\r\\n            uint256 charmInExperienceRequired = ((randomness % 453678) % 750) +\\r\\n                currentGamePlays[requestId].difficultyLevel +\\r\\n                gameScenarios[currentGamePlays[requestId].scenario]\\r\\n                    .riskBaseDifficulty;\\r\\n            if (currentGamePlays[requestId].charm > charmInExperienceRequired) {\\r\\n                uint256 totalWon = currentGamePlays[requestId].difficultyLevel *\\r\\n                    gameScenarios[currentGamePlays[requestId].scenario]\\r\\n                        .payoutAmountBase;\\r\\n                jewelDepositLedger[\\r\\n                    currentGamePlays[requestId].player\\r\\n                ] += totalWon;\\r\\n                if (((randomness % 2214) % 2) == 1) {\\r\\n                    // gain XP!\\r\\n                    NFTCharacterDepositLedger[\\r\\n                        currentGamePlays[requestId].player\\r\\n                    ].charm += 1;\\r\\n                }\\r\\n                emit gameCode(\\r\\n                    requestId,\\r\\n                    currentGamePlays[requestId].player,\\r\\n                    totalWon\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n            emit gameCode(requestId, currentGamePlays[requestId].player, 4);\\r\\n            return;\\r\\n        }\\r\\n        if (currentGamePlays[requestId].breakInStyle == 2) {\\r\\n            // player is breaking in with strength\\r\\n            uint256 strengthInExperienceRequired = ((randomness % 786435) %\\r\\n                750) +\\r\\n                currentGamePlays[requestId].difficultyLevel +\\r\\n                gameScenarios[currentGamePlays[requestId].scenario]\\r\\n                    .riskBaseDifficulty; // strength is used for daylight robbery\\r\\n            if (\\r\\n                currentGamePlays[requestId].strength >\\r\\n                strengthInExperienceRequired\\r\\n            ) {\\r\\n                uint256 totalWon = currentGamePlays[requestId].difficultyLevel *\\r\\n                    gameScenarios[currentGamePlays[requestId].scenario]\\r\\n                        .payoutAmountBase;\\r\\n                jewelDepositLedger[\\r\\n                    currentGamePlays[requestId].player\\r\\n                ] += totalWon;\\r\\n                if (((randomness % 2214) % 2) == 1) {\\r\\n                    // gain XP!\\r\\n                    NFTCharacterDepositLedger[\\r\\n                        currentGamePlays[requestId].player\\r\\n                    ].strength += 1;\\r\\n                }\\r\\n                emit gameCode(\\r\\n                    requestId,\\r\\n                    currentGamePlays[requestId].player,\\r\\n                    totalWon\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n            emit gameCode(requestId, currentGamePlays[requestId].player, 4);\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function vrfJailBreak(uint256 randomness, bytes32 requestId) internal {\\r\\n        // only when randomness is returned can this function be called.\\r\\n        if ((randomness % 1000) == 1) {\\r\\n            // 5x higher chance of dying because its a jail\\r\\n            // 1 in 1000 chance character dies\\r\\n            NFTCharacterDepositLedger[currentJailBreaks[requestId].player]\\r\\n                .isDeposited = false; //\\r\\n            emit gameCode(requestId, currentJailBreaks[requestId].player, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (((randomness % 143456) % 10) == 1) {\\r\\n            //2x higher chance of getting injured\\r\\n            // 1 in 100 chance character is injured\\r\\n            uint256 healthDecrease = ((randomness % 123456) % 99); // player can lose up to 99 health every 1 in 100\\r\\n            if (\\r\\n                (100 - currentJailBreaks[requestId].health + healthDecrease) >\\r\\n                100\\r\\n            ) {\\r\\n                // players don't have to heal if they get injured before but if they get injured again and its greater than 100, they die\\r\\n                NFTCharacterDepositLedger[msg.sender].isDeposited = false; //\\r\\n                emit gameCode(\\r\\n                    requestId,\\r\\n                    currentJailBreaks[requestId].player,\\r\\n                    0\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n            NFTCharacterDepositLedger[currentJailBreaks[requestId].player]\\r\\n                .health -= healthDecrease;\\r\\n            emit gameCode(requestId, currentJailBreaks[requestId].player, 1);\\r\\n            return;\\r\\n        }\\r\\n        if (((randomness % 23015) % 5) == 1) {\\r\\n            // really high chance of getting spotted\\r\\n            // 1 in 5 chance character is almost getting arrested\\r\\n            uint256 agilityRequiredtoEscape = ((randomness % 54321) % 1000); // player still has chance to escape\\r\\n            if (\\r\\n                currentJailBreaks[requestId].agility > agilityRequiredtoEscape\\r\\n            ) {\\r\\n                if (((randomness % 2214) % 2) == 1) {\\r\\n                    // gain XP!\\r\\n                    NFTCharacterDepositLedger[\\r\\n                        currentJailBreaks[requestId].player\\r\\n                    ].agility += 1;\\r\\n                }\\r\\n                emit gameCode(\\r\\n                    requestId,\\r\\n                    currentJailBreaks[requestId].player,\\r\\n                    3\\r\\n                );\\r\\n                return; // escaped but no money given\\r\\n            } else {\\r\\n                NFTCharacterDepositLedger[msg.sender].arrested = true;\\r\\n                NFTCharacterDepositLedger[msg.sender].freetoPlayAgain =\\r\\n                    block.timestamp +\\r\\n                    259200; //player arrested for 3 days.\\r\\n                emit gameCode(\\r\\n                    requestId,\\r\\n                    currentJailBreaks[requestId].player,\\r\\n                    2\\r\\n                );\\r\\n                return; //  playerArrested\\r\\n            }\\r\\n        }\\r\\n        if (currentJailBreaks[requestId].breakInStyle == 0) {\\r\\n            //player is sneaking in\\r\\n            uint256 sneakInExperienceRequired = ((randomness % 235674) % 1000); // difficulty will be somewhere between 0 to 10000\\r\\n            if (\\r\\n                currentJailBreaks[requestId].sneak > sneakInExperienceRequired\\r\\n            ) {\\r\\n                NFTCharacterDepositLedger[\\r\\n                    currentJailBreaks[requestId].targetPlayer\\r\\n                ].arrested = false;\\r\\n                if (((randomness % 2214) % 2) == 1) {\\r\\n                    // gain XP!\\r\\n                    NFTCharacterDepositLedger[\\r\\n                        currentJailBreaks[requestId].player\\r\\n                    ].sneak += 1;\\r\\n                }\\r\\n                emit gameCode(\\r\\n                    requestId,\\r\\n                    currentJailBreaks[requestId].targetPlayer,\\r\\n                    5\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n            emit gameCode(requestId, currentJailBreaks[requestId].player, 4);\\r\\n            return;\\r\\n        }\\r\\n        if (currentJailBreaks[requestId].breakInStyle == 1) {\\r\\n            // player is breaking in with charm\\r\\n            uint256 charmInExperienceRequired = ((randomness % 453678) % 1000);\\r\\n            if (\\r\\n                currentJailBreaks[requestId].charm > charmInExperienceRequired\\r\\n            ) {\\r\\n                NFTCharacterDepositLedger[\\r\\n                    currentJailBreaks[requestId].targetPlayer\\r\\n                ].arrested = false;\\r\\n                if (((randomness % 2214) % 2) == 1) {\\r\\n                    // gain XP!\\r\\n                    NFTCharacterDepositLedger[\\r\\n                        currentJailBreaks[requestId].player\\r\\n                    ].charm += 1;\\r\\n                }\\r\\n                emit gameCode(\\r\\n                    requestId,\\r\\n                    currentJailBreaks[requestId].targetPlayer,\\r\\n                    5\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n            emit gameCode(requestId, currentJailBreaks[requestId].player, 4);\\r\\n            return;\\r\\n        }\\r\\n        if (currentJailBreaks[requestId].breakInStyle == 2) {\\r\\n            // player is breaking in with strength\\r\\n            uint256 strengthInExperienceRequired = ((randomness % 786435) %\\r\\n                1000);\\r\\n            if (\\r\\n                currentJailBreaks[requestId].strength >\\r\\n                strengthInExperienceRequired\\r\\n            ) {\\r\\n                NFTCharacterDepositLedger[\\r\\n                    currentJailBreaks[requestId].targetPlayer\\r\\n                ].arrested = false;\\r\\n                if (((randomness % 2214) % 4) == 1) {\\r\\n                    // gain XP!\\r\\n                    NFTCharacterDepositLedger[\\r\\n                        currentJailBreaks[requestId].player\\r\\n                    ].strength += 1;\\r\\n                }\\r\\n                emit gameCode(\\r\\n                    requestId,\\r\\n                    currentJailBreaks[requestId].targetPlayer,\\r\\n                    5\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n            emit gameCode(requestId, currentJailBreaks[requestId].player, 4);\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function vrfPlayPVP(uint256 randomness, bytes32 requestId) internal {\\r\\n        // only when randomness is returned can this function be called.\\r\\n        if ((randomness % 100) == 1) {\\r\\n            //  really high chance of getting killed\\r\\n            // 1 in 100 chance character dies\\r\\n            NFTCharacterDepositLedger[currentPVPGamePlays[requestId].player]\\r\\n                .isDeposited = false; //\\r\\n            emit gameCode(requestId, currentPVPGamePlays[requestId].player, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (((randomness % 143456) % 11) == 3) {\\r\\n            //really high chance of getting injured\\r\\n            // 1 in 11 chance character is injured\\r\\n            uint256 healthDecrease = ((randomness % 123456) % 99); // player can lose up to 99 health every 1 in 100\\r\\n            if (\\r\\n                (100 - currentPVPGamePlays[requestId].health + healthDecrease) >\\r\\n                100\\r\\n            ) {\\r\\n                // players don't have to heal if they get injured before but if they get injured again and its greater than 100, they die\\r\\n                NFTCharacterDepositLedger[msg.sender].isDeposited = false; //\\r\\n                emit gameCode(\\r\\n                    requestId,\\r\\n                    currentPVPGamePlays[requestId].player,\\r\\n                    0\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n            NFTCharacterDepositLedger[currentPVPGamePlays[requestId].player]\\r\\n                .health -= healthDecrease;\\r\\n            emit gameCode(requestId, currentPVPGamePlays[requestId].player, 1);\\r\\n            return;\\r\\n        }\\r\\n        // no chance of getting arrested since you are a robbing another player\\r\\n        // There is nothing stopping players with 800 sneak targeting players with 300 sneak.\\r\\n        // It is assumed that the 800 sneak character will be more vulnerbale to strength attacks.\\r\\n        // Players have to decide if they want to play more defensivly by equally levelling up each trait\\r\\n        // or focus on one specfic trait which allows them to attack better but have worse defense.\\r\\n        // Oh and please hire me.\\r\\n        if (currentPVPGamePlays[requestId].breakInStyle == 0) {\\r\\n            //player is sneaking in\\r\\n            uint256 sneakInExperienceRequired = ((randomness % 235674) % 1000) +\\r\\n                currentPVPGamePlays[requestId].targetPlayerSneak; // difficulty will be somewhere between 0 to 10000 plus the difficulty level which will be about 100 to 950\\r\\n            if (\\r\\n                currentPVPGamePlays[requestId].sneak > sneakInExperienceRequired\\r\\n            ) {\\r\\n                uint256 totalWon = jewelDepositLedger[\\r\\n                    currentPVPGamePlays[requestId].targetPlayer\\r\\n                ] / 20; // player can only lose 5% max each day\\r\\n                if (((randomness % 2214) % 2) == 1) {\\r\\n                    // gain XP!\\r\\n                    NFTCharacterDepositLedger[\\r\\n                        currentPVPGamePlays[requestId].player\\r\\n                    ].sneak += 1;\\r\\n                }\\r\\n                jewelDepositLedger[\\r\\n                    currentPVPGamePlays[requestId].targetPlayer\\r\\n                ] -= totalWon;\\r\\n                jewelDepositLedger[\\r\\n                    currentPVPGamePlays[requestId].player\\r\\n                ] += totalWon;\\r\\n                NFTCharacterDepositLedger[currentPVPGamePlays[requestId].player]\\r\\n                    .lootingTimeout = block.timestamp + 86400; // players can only loot once a day\\r\\n                NFTCharacterDepositLedger[\\r\\n                    currentPVPGamePlays[requestId].targetPlayer\\r\\n                ].lootingTimeout = block.timestamp + 86400; // players can only get looted once a day\\r\\n                emit gameCode(\\r\\n                    requestId,\\r\\n                    currentPVPGamePlays[requestId].player,\\r\\n                    totalWon\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n            emit gameCode(requestId, currentPVPGamePlays[requestId].player, 4);\\r\\n            return;\\r\\n        }\\r\\n        if (currentPVPGamePlays[requestId].breakInStyle == 1) {\\r\\n            // player is breaking in with charm\\r\\n            uint256 charmInExperienceRequired = ((randomness % 453678) % 1000) +\\r\\n                currentPVPGamePlays[requestId].targetPlayerCharm;\\r\\n            if (\\r\\n                currentPVPGamePlays[requestId].charm > charmInExperienceRequired\\r\\n            ) {\\r\\n                uint256 totalWon = jewelDepositLedger[\\r\\n                    currentPVPGamePlays[requestId].targetPlayer\\r\\n                ] / 20;\\r\\n                if (((randomness % 2214) % 2) == 1) {\\r\\n                    // gain XP!\\r\\n                    NFTCharacterDepositLedger[\\r\\n                        currentPVPGamePlays[requestId].player\\r\\n                    ].charm += 1;\\r\\n                }\\r\\n                jewelDepositLedger[\\r\\n                    currentPVPGamePlays[requestId].player\\r\\n                ] += totalWon;\\r\\n                NFTCharacterDepositLedger[currentPVPGamePlays[requestId].player]\\r\\n                    .lootingTimeout = block.timestamp + 86400; // players can only loot once a day\\r\\n                NFTCharacterDepositLedger[\\r\\n                    currentPVPGamePlays[requestId].targetPlayer\\r\\n                ].lootingTimeout = block.timestamp + 86400; // players can only get looted once a day\\r\\n                emit gameCode(\\r\\n                    requestId,\\r\\n                    currentPVPGamePlays[requestId].player,\\r\\n                    totalWon\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n            emit gameCode(requestId, currentPVPGamePlays[requestId].player, 4);\\r\\n            return;\\r\\n        }\\r\\n        if (currentPVPGamePlays[requestId].breakInStyle == 2) {\\r\\n            // player is breaking in with strength\\r\\n            uint256 strengthInExperienceRequired = ((randomness % 786435) %\\r\\n                1000) + currentPVPGamePlays[requestId].targetPlayerStrength; // strength is used for daylight robbery\\r\\n            if (\\r\\n                currentPVPGamePlays[requestId].strength >\\r\\n                strengthInExperienceRequired\\r\\n            ) {\\r\\n                uint256 totalWon = jewelDepositLedger[\\r\\n                    currentPVPGamePlays[requestId].targetPlayer\\r\\n                ] / 20; // player can only lose 5% max each day\\r\\n                if (((randomness % 2214) % 2) == 1) {\\r\\n                    // gain XP!\\r\\n                    NFTCharacterDepositLedger[\\r\\n                        currentPVPGamePlays[requestId].player\\r\\n                    ].strength += 1;\\r\\n                }\\r\\n                jewelDepositLedger[\\r\\n                    currentPVPGamePlays[requestId].targetPlayer\\r\\n                ] -= totalWon;\\r\\n                jewelDepositLedger[\\r\\n                    currentPVPGamePlays[requestId].player\\r\\n                ] += totalWon;\\r\\n                NFTCharacterDepositLedger[currentPVPGamePlays[requestId].player]\\r\\n                    .lootingTimeout = block.timestamp + 86400; // players can only loot once a day\\r\\n                NFTCharacterDepositLedger[\\r\\n                    currentPVPGamePlays[requestId].targetPlayer\\r\\n                ].lootingTimeout = block.timestamp + 86400; // players can only get looted once a day\\r\\n                emit gameCode(\\r\\n                    requestId,\\r\\n                    currentPVPGamePlays[requestId].player,\\r\\n                    totalWon\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n            emit gameCode(requestId, currentPVPGamePlays[requestId].player, 4);\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRandomNumber() internal returns (bytes32 requestId) {\\r\\n        // internal\\r\\n        require(\\r\\n            LINK.balanceOf(address(this)) >= fee,\\r\\n            \\\"Not enough LINK - fill contract with faucet\\\"\\r\\n        );\\r\\n        return requestRandomness(keyHash, fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Callback function used by VRF Coordinator\\r\\n     */\\r\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        if (currentGameMode[requestId].gameMode == 0) {\\r\\n            vrfPlayGame(randomness, requestId);\\r\\n        }\\r\\n        if (currentGameMode[requestId].gameMode == 1) {\\r\\n            vrfJailBreak(randomness, requestId);\\r\\n        }\\r\\n        if (currentGameMode[requestId].gameMode == 2) {\\r\\n            vrfPlayPVP(randomness, requestId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function changeInheritance(address newInheritor) public onlyOwner {\\r\\n        nextOwner = newInheritor;\\r\\n    }\\r\\n\\r\\n    function ownerCheckIn() public onlyOwner {\\r\\n        lastCheckIn = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function changeCheckInTime(uint256 newCheckInTimeInterval)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        checkInTimeInterval = newCheckInTimeInterval; // let owner change check in case he know he will be away for a while.\\r\\n    }\\r\\n\\r\\n    function passDownInheritance() internal {\\r\\n        transferOwnership(nextOwner);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes calldata /* checkData */\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            bool upkeepNeeded,\\r\\n            bytes memory /* performData */\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            block.timestamp > (lastCheckIn + checkInTimeInterval),\\r\\n            bytes(\\\"\\\")\\r\\n        ); // make sure to check in at least once every 6 months\\r\\n    }\\r\\n\\r\\n    function performUpkeep(\\r\\n        bytes calldata /* performData */\\r\\n    ) external override onlyKeeper {\\r\\n        passDownInheritance();\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) public onlyOwner returns (bool) {\\r\\n        require(amount <= address(this).balance);\\r\\n        payable(msg.sender).transfer(amount); //if the owner send to sender\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdrawErc20(IERC20 token) public onlyOwner {\\r\\n        require(\\r\\n            token.transfer(msg.sender, token.balanceOf(address(this))),\\r\\n            \\\"Transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        // nothing to do but accept money\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x435bf7b751a25f7d7748a85bc04f1d4817cf7bdbdaac41a79883d92f0a43e445\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052683635c9adc5dea0000060065542600755620d2f006008553480156200002957600080fd5b5060405162003c2438038062003c248339810160408190526200004c9162000142565b6001600160601b0319606088811b821660a05287901b1660805262000078620000723390565b620000d3565b600294909455600392909255600580546001600160a01b039283166001600160a01b031991821617909155600a805493831693821684179055600b80548216909317909255600c805491909316911617905550620001c59050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b03811681146200013d57600080fd5b919050565b600080600080600080600060e0888a0312156200015e57600080fd5b620001698862000125565b9650620001796020890162000125565b95506040880151945060608801519350620001976080890162000125565b9250620001a760a0890162000125565b9150620001b760c0890162000125565b905092959891949750929550565b60805160601c60a05160601c613a176200020d600039600081816115100152611d380152600081816106a501528181610ea7015281816117d70152611d090152613a176000f3fe6080604052600436106101dc5760003560e01c80636c67370e116101025780639e082d7311610095578063d5c6c55611610064578063d5c6c55614610615578063db78dabd1461062b578063e91a7ca614610641578063f2fde38b1461066157600080fd5b80639e082d7314610595578063b993b264146105b5578063c7e42b1b146105d5578063cb34f83a146105f557600080fd5b80638da5cb5b116100d15780638da5cb5b146104565780638f7c31dd1461047457806394985ddd146104a15780639a530dad146104c157600080fd5b80636c67370e146103c45780636e04ff0d146103f3578063715018a61461042157806375b80d981461043657600080fd5b80634585e33b1161017a5780635d12ace4116101495780635d12ace4146103375780635e38c9541461035757806369b491411461036c57806369f3331d1461038c57600080fd5b80634585e33b146102c25780634685aa53146102e25780635966572f146102f75780635a6447301461031757600080fd5b80632e1a7d4d116101b65780632e1a7d4d1461025257806339dd4f6d1461028257806342619f661461029757806343330dfb146102ad57600080fd5b80630a43dc39146101e8578063180ab0951461021b57806322c8f8ab1461023d57600080fd5b366101e357005b600080fd5b3480156101f457600080fd5b5061020861020336600461362c565b610681565b6040519081526020015b60405180910390f35b34801561022757600080fd5b5061023b61023636600461365c565b610a07565b005b34801561024957600080fd5b5061023b610a69565b34801561025e57600080fd5b5061027261026d3660046135fa565b610b4d565b6040519015158152602001610212565b34801561028e57600080fd5b5061023b610bbf565b3480156102a357600080fd5b5061020860045481565b3480156102b957600080fd5b5061023b610bef565b3480156102ce57600080fd5b5061023b6102dd366004613531565b610c84565b3480156102ee57600080fd5b5061023b610ca7565b34801561030357600080fd5b5061023b6103123660046134c9565b610d4d565b34801561032357600080fd5b5061023b6103323660046135fa565b610d99565b34801561034357600080fd5b506102086103523660046136c4565b610e83565b34801561036357600080fd5b5061023b6110c0565b34801561037857600080fd5b5061023b6103873660046135fa565b6112b8565b34801561039857600080fd5b506009546103ac906001600160a01b031681565b6040516001600160a01b039091168152602001610212565b3480156103d057600080fd5b506103e46103df3660046135fa565b6113c5565b604051610212939291906137e7565b3480156103ff57600080fd5b5061041361040e366004613531565b61146f565b6040516102129291906137ad565b34801561042d57600080fd5b5061023b6114a0565b34801561044257600080fd5b5061023b6104513660046135fa565b6114d6565b34801561046257600080fd5b506001546001600160a01b03166103ac565b34801561048057600080fd5b5061020861048f3660046134c9565b60146020526000908152604090205481565b3480156104ad57600080fd5b5061023b6104bc36600461350f565b611505565b3480156104cd57600080fd5b506105366104dc3660046134c9565b601360205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a909a0154989960ff808a169a610100909a048116999716968c565b604080519c8d529a151560208d0152981515998b019990995260608a0196909652931515608089015260a088019290925260c087015260e086015261010085015261012084015261014083019190915261016082015261018001610212565b3480156105a157600080fd5b5061023b6105b03660046135fa565b611587565b3480156105c157600080fd5b5061023b6105d03660046135a3565b6115ba565b3480156105e157600080fd5b5061023b6105f03660046134c9565b611649565b34801561060157600080fd5b5061020861061036600461362c565b6117b3565b34801561062157600080fd5b5061020860085481565b34801561063757600080fd5b5061020860075481565b34801561064d57600080fd5b5061023b61065c3660046135fa565b611ac4565b34801561066d57600080fd5b5061023b61067c3660046134c9565b611c6d565b6003546040516370a0823160e01b8152306004820152600091906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156106e757600080fd5b505afa1580156106fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071f9190613613565b10156107465760405162461bcd60e51b815260040161073d90613839565b60405180910390fd5b6001600160a01b038216600090815260136020526040902060019081015460ff161515146107b65760405162461bcd60e51b815260206004820152601d60248201527f4e6f2054617267657420436861726163746572204465706f7369746564000000604482015260640161073d565b33600090815260136020526040902060019081015460ff1615151461081d5760405162461bcd60e51b815260206004820152601f60248201527f596f752068617665206e6f20436861726163746572204465706f736974656400604482015260640161073d565b6001600160a01b0382163314156108765760405162461bcd60e51b815260206004820152601c60248201527f596f752063616e6e6f7420726f622066726f6d20796f757273656c6600000000604482015260640161073d565b33600090815260136020526040902060050154421161089457600080fd5b6001600160a01b03821660009081526013602052604090206005015442116108bb57600080fd5b6001600160a01b038216600090815260146020526040902054670de0b6b3a7640000106108e757600080fd5b6001600160a01b03821660009081526014602052604090205461090c906002906138d1565b336000908152601460205260409020541161092657600080fd5b6000610936600254600354611d05565b600081815260116020908152604080832060029055600f80835281842080546001600160a01b0319908116339081178355600183018c9055600880840180546001600160a01b038e1694168417905590875260138087528588206007808201546004870155818401546005870155600a80830154828801556009808401546006808a0191909155938401546003890155958b52928952968920968701548286015591860154600b850155850154600d84015584820154600c8401559390930154948690529252015591505092915050565b6001546001600160a01b03163314610a315760405162461bcd60e51b815260040161073d90613884565b6000848152600e6020908152604090912061ffff8085166001830155831660028201558451610a6292860190613391565b5050505050565b33600090815260136020526040902060019081015460ff16151514610ad05760405162461bcd60e51b815260206004820152601760248201527f436861726163746572204e6f74204465706f7369746564000000000000000000604482015260640161073d565b33600090815260136020526040902060060154606411610aef57600080fd5b600654336000908152601460205260409020541015610b0d57600080fd5b6006543360009081526014602052604081208054909190610b2f908490613904565b90915550503360009081526013602052604090206064600690910155565b6001546000906001600160a01b03163314610b7a5760405162461bcd60e51b815260040161073d90613884565b47821115610b8757600080fd5b604051339083156108fc029084906000818181858888f19350505050158015610bb4573d6000803e3d6000fd5b50600190505b919050565b6001546001600160a01b03163314610be95760405162461bcd60e51b815260040161073d90613884565b42600755565b33600090815260136020526040902060040154421015610c685760405162461bcd60e51b815260206004820152602e60248201527f596f75206d7573742077616974203720646179732073696e636520796f75207360448201526d74617274656420706c6179696e6760901b606482015260840161073d565b336000908152601360205260409020600301805460ff19169055565b6005546001600160a01b03163314610c9b57600080fd5b610ca3611e8f565b5050565b33600090815260136020526040902060019081015460ff16151514610d0e5760405162461bcd60e51b815260206004820152601760248201527f436861726163746572204e6f74206465706f7369746564000000000000000000604482015260640161073d565b336000908152601360205260409020600301805460ff19166001179055610d384262093a806138b9565b33600090815260136020526040902060040155565b6001546001600160a01b03163314610d775760405162461bcd60e51b815260040161073d90613884565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b33600090815260136020526040902060010154610100900460ff1615610dd15760405162461bcd60e51b815260040161073d9061380c565b600c546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610e2357600080fd5b505af1158015610e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5b91906134ed565b503360009081526014602052604081208054839290610e7b9084906138b9565b909155505050565b6003546040516370a0823160e01b8152306004820152600091906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610ee957600080fd5b505afa158015610efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f219190613613565b1015610f3f5760405162461bcd60e51b815260040161073d90613839565b33600090815260136020526040902060019081015460ff16151514610f9f5760405162461bcd60e51b8152602060048201526016602482015275139bc810da185c9858dd195c8811195c1bdcda5d195960521b604482015260640161073d565b33600090815260136020526040902060010154610100900460ff1615610fd75760405162461bcd60e51b815260040161073d9061380c565b600d54821061101b5760405162461bcd60e51b815260206004820152601060248201526f4e6f2047616d65205363656e6172696f60801b604482015260640161073d565b600061102b600254600354611d05565b6000818152601160209081526040808320839055601080835281842080546001600160a01b031916339081178255600282018b9055600382018c9055600182018a90558552601384529184206007808201546005850155600880830154600680870191909155600a84015491860191909155600983015491850191909155015493859052909152600401559150509392505050565b33600090815260136020526040902060019081015460ff161515146111205760405162461bcd60e51b8152602060048201526016602482015275139bc810da185c9858dd195c8811195c1bdcda5d195960521b604482015260640161073d565b33600090815260136020526040902060010154610100900460ff16156111585760405162461bcd60e51b815260040161073d9061380c565b600a805433600090815260136020526040908190208054600682015460078301546008840154600985015494909701549451631d56cc6560e01b81526004810193909352602483019190915260448201526064810194909452608484015260a48301526001600160a01b031690631d56cc659060c401602060405180830381600087803b1580156111e857600080fd5b505af11580156111fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122091906134ed565b50600b5433600081815260136020526040908190205490516323b872dd60e01b8152306004820152602481019290925260448201526001600160a01b03909116906323b872dd90606401600060405180830381600087803b15801561128457600080fd5b505af1158015611298573d6000803e3d6000fd5b5050336000908152601360205260409020600101805460ff191690555050565b336000908152601460205260409020548111156113215760405162461bcd60e51b815260206004820152602160248201527f547279696e6720746f20776974686472617720746f6f206d756368206d6f6e656044820152607960f81b606482015260840161073d565b600c5460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561136d57600080fd5b505af1158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a591906134ed565b503360009081526014602052604081208054839290610e7b908490613904565b600e602052600090815260409020805481906113e09061391b565b80601f016020809104026020016040519081016040528092919081815260200182805461140c9061391b565b80156114595780601f1061142e57610100808354040283529160200191611459565b820191906000526020600020905b81548152906001019060200180831161143c57829003601f168201915b5050505050908060010154908060020154905083565b6000606060085460075461148391906138b9565b421160405180602001604052806000815250915091509250929050565b6001546001600160a01b031633146114ca5760405162461bcd60e51b815260040161073d90613884565b6114d46000611ea4565b565b6001546001600160a01b031633146115005760405162461bcd60e51b815260040161073d90613884565b600855565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461157d5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015260640161073d565b610ca38282611ef6565b6001546001600160a01b031633146115b15760405162461bcd60e51b815260040161073d90613884565b60065542600755565b6001546001600160a01b031633146115e45760405162461bcd60e51b815260040161073d90613884565b600d546000818152600e60209081526040909120855161160692870190613391565b506000818152600e6020526040812061ffff85166001808301919091556002909101849055600d80549192909161163e9084906138b9565b909155505050505050565b6001546001600160a01b031633146116735760405162461bcd60e51b815260040161073d90613884565b6040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a082319060240160206040518083038186803b1580156116bc57600080fd5b505afa1580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f49190613613565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561173a57600080fd5b505af115801561174e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177291906134ed565b6117b05760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161073d565b50565b6003546040516370a0823160e01b8152306004820152600091906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561181957600080fd5b505afa15801561182d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118519190613613565b101561186f5760405162461bcd60e51b815260040161073d90613839565b6001600160a01b038216600090815260136020526040902060019081015460ff161515146118df5760405162461bcd60e51b815260206004820152601d60248201527f4e6f2054617267657420436861726163746572204465706f7369746564000000604482015260640161073d565b33600090815260136020526040902060019081015460ff161515146119465760405162461bcd60e51b815260206004820152601f60248201527f596f752068617665206e6f20436861726163746572204465706f736974656400604482015260640161073d565b6001600160a01b0382166000908152601360205260409020600190810154610100900460ff161515146119bb5760405162461bcd60e51b815260206004820152601a60248201527f436861726163746572206973206e6f7420696e20507269736f6e000000000000604482015260640161073d565b6001600160a01b038216331415611a145760405162461bcd60e51b815260206004820152601860248201527f596f752063616e6e6f74206672656520796f757273656c660000000000000000604482015260640161073d565b6000611a24600254600354611d05565b6000818152601160209081526040808320600190819055601280845282852080546001600160a01b03199081163390811783559382018c9055600780830180546001600160a01b038e169316929092179091559286526013855292852091820154600384015560088201546004840155600a8201546006808501919091556009830154600585015590910154938590529091526002015591505092915050565b33600090815260136020526040902060019081015460ff1615151415611b2c5760405162461bcd60e51b815260206004820152601b60248201527f43686172616374657220416c7265616479204465706f73697465640000000000604482015260640161073d565b600b546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401600060405180830381600087803b158015611b7e57600080fd5b505af1158015611b92573d6000803e3d6000fd5b505033600090815260136020526040908190208481556001908101805460ff19169091179055600a5490516347c4ef2560e01b8152600481018590526001600160a01b0390911692506347c4ef25915060240160a060405180830381600087803b158015611bff57600080fd5b505af1158015611c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3791906136f0565b33600090815260136020526040902060068101919091556009810191909155600a81019190915560088101919091556007015550565b6001546001600160a01b03163314611c975760405162461bcd60e51b815260040161073d90613884565b6001600160a01b038116611cfc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161073d565b6117b081611ea4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f000000000000000000000000000000000000000000000000000000000000000084866000604051602001611d75929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401611da29392919061377d565b602060405180830381600087803b158015611dbc57600080fd5b505af1158015611dd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df491906134ed565b5060008381526020818152604080832054815180840188905280830185905230606082015260808082018390528351808303909101815260a090910190925281519183019190912086845292909152611e4e9060016138b9565b60008581526020818152604091829020929092558051808301879052808201849052815180820383018152606090910190915280519101205b949350505050565b6009546114d4906001600160a01b0316611c6d565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600082815260116020526040902054611f1357611f138183611f55565b60008281526011602052604090205460011415611f3457611f348183612752565b60008281526011602052604090205460021415610ca357610ca38183612d7a565b611f616107d083613956565b60011415611fcf57600081815260106020818152604080842080546001600160a01b03908116865260138452828620600101805460ff1916905586865293909252905490516000805160206139c283398151915293611fc393869316916137c8565b60405180910390a15050565b6014611fde6202306084613956565b611fe89190613956565b6001141561211d57600060636120016201e24085613956565b61200b9190613956565b600083815260106020526040902060040154909150606490829061202f9083613904565b61203991906138b9565b11156120a657600082815260106020818152604080842080546001600160a01b03908116865260138452828620600101805460ff1916905587865293909252905490516000805160206139c28339815191529361209993879316916137c8565b60405180910390a1505050565b6000828152601060209081526040808320546001600160a01b031683526013909152812060060180548392906120dd908490613904565b9091555050600082815260106020526040908190205490516000805160206139c2833981519152916120999185916001600160a01b0316906001906137c8565b601461212b6159e784613956565b6121359190613956565b600114156122a75760006103e861214e61d43185613956565b6121589190613956565b60008381526010602052604090206005015490915081101561220d5760026121826108a685613956565b61218c9190613956565b600114156121d2576000828152601060209081526040808320546001600160a01b03168352601390915281206007018054600192906121cc9084906138b9565b90915550505b600082815260106020526040908190205490516000805160206139c2833981519152916120999185916001600160a01b0316906003906137c8565b6000828152601060209081526040808320546001600160a01b0316835260139091529020600101805461ff00191661010017905561224e426202a3006138b9565b600083815260106020818152604080842080546001600160a01b039081168652601384528286206002908101979097559488905292909152905490516000805160206139c28339815191529361209993879316916137c8565b60008181526010602052604090206002015461248e5760008181526010602081815260408084206001808201548652600e84529185209091015485855292909152600301546102ee6122fc6203989a87613956565b6123069190613956565b61231091906138b9565b61231a91906138b9565b60008381526010602052604090206007015490915081101561245357600082815260106020818152604080842060018101548552600e835290842060020154868552929091526003015461236e91906138e5565b6000848152601060209081526040808320546001600160a01b0316835260149091528120805492935083929091906123a79084906138b9565b90915550600290506123bb6108a686613956565b6123c59190613956565b6001141561240b576000838152601060209081526040808320546001600160a01b03168352601390915281206009018054600192906124059084906138b9565b90915550505b600083815260106020526040908190205490516000805160206139c2833981519152916124459186916001600160a01b03169085906137c8565b60405180910390a150505050565b600082815260106020526040908190205490516000805160206139c2833981519152916120999185916001600160a01b0316906004906137c8565b600081815260106020526040902060020154600114156125f05760008181526010602081815260408084206001808201548652600e84529185209091015485855292909152600301546102ee6124e76206ec2e87613956565b6124f19190613956565b6124fb91906138b9565b61250591906138b9565b60008381526010602052604090206008015490915081101561245357600082815260106020818152604080842060018101548552600e835290842060020154868552929091526003015461255991906138e5565b6000848152601060209081526040808320546001600160a01b0316835260149091528120805492935083929091906125929084906138b9565b90915550600290506125a66108a686613956565b6125b09190613956565b6001141561240b576000838152601060209081526040808320546001600160a01b0316835260139091528120600a018054600192906124059084906138b9565b60008181526010602052604090206002908101541415610ca35760008181526010602081815260408084206001808201548652600e84529185209091015485855292909152600301546102ee612649620c000387613956565b6126539190613956565b61265d91906138b9565b61266791906138b9565b60008381526010602052604090206006015490915081101561245357600082815260106020818152604080842060018101548552600e83529084206002015486855292909152600301546126bb91906138e5565b6000848152601060209081526040808320546001600160a01b0316835260149091528120805492935083929091906126f49084906138b9565b90915550600290506127086108a686613956565b6127129190613956565b6001141561240b576000838152601060209081526040808320546001600160a01b03168352601390915281206008018054600192906124059084906138b9565b61275e6103e883613956565b600114156127c057600081815260126020818152604080842080546001600160a01b03908116865260138452828620600101805460ff1916905586865293909252905490516000805160206139c283398151915293611fc393869316916137c8565b600a6127cf6202306084613956565b6127d99190613956565b600114156128fa57600060636127f26201e24085613956565b6127fc9190613956565b60008381526012602052604090206002015490915060649082906128209083613904565b61282a91906138b9565b111561288357336000908152601360209081526040808320600101805460ff1916905584835260129091528082205490516000805160206139c2833981519152926120999286926001600160a01b0390911691906137c8565b6000828152601260209081526040808320546001600160a01b031683526013909152812060060180548392906128ba908490613904565b9091555050600082815260126020526040908190205490516000805160206139c2833981519152916120999185916001600160a01b0316906001906137c8565b60056129086159e784613956565b6129129190613956565b60011415612a685760006103e861292b61d43185613956565b6129359190613956565b6000838152601260205260409020600301549091508110156129ea57600261295f6108a685613956565b6129699190613956565b600114156129af576000828152601260209081526040808320546001600160a01b03168352601390915281206007018054600192906129a99084906138b9565b90915550505b600082815260126020526040908190205490516000805160206139c2833981519152916120999185916001600160a01b0316906003906137c8565b336000908152601360205260409020600101805461ff001916610100179055612a16426203f4806138b9565b3360009081526013602090815260408083206002908101949094558583526012909152908190205490516000805160206139c2833981519152926120999286926001600160a01b0390911691906137c8565b600081815260126020526040902060010154612bc05760006103e8612a906203989a85613956565b612a9a9190613956565b600083815260126020526040902060050154909150811015612b85576000828152601260209081526040808320600701546001600160a01b0316835260139091529020600101805461ff00191690556002612af76108a685613956565b612b019190613956565b60011415612b47576000828152601260209081526040808320546001600160a01b0316835260139091528120600901805460019290612b419084906138b9565b90915550505b600082815260126020526040908190206007015490516000805160206139c2833981519152916120999185916001600160a01b0316906005906137c8565b600082815260126020526040908190205490516000805160206139c2833981519152916120999185916001600160a01b0316906004906137c8565b60008181526012602052604090206001908101541415612c9d5760006103e8612bec6206ec2e85613956565b612bf69190613956565b600083815260126020526040902060060154909150811015612b85576000828152601260209081526040808320600701546001600160a01b0316835260139091529020600101805461ff00191690556002612c536108a685613956565b612c5d9190613956565b60011415612b47576000828152601260209081526040808320546001600160a01b0316835260139091528120600a01805460019290612b419084906138b9565b60008181526012602052604090206001015460021415610ca35760006103e8612cc9620c000385613956565b612cd39190613956565b600083815260126020526040902060040154909150811015612b85576000828152601260209081526040808320600701546001600160a01b0316835260139091529020600101805461ff00191690556004612d306108a685613956565b612d3a9190613956565b60011415612b47576000828152601260209081526040808320546001600160a01b0316835260139091528120600801805460019290612b419084906138b9565b612d85606483613956565b60011415612de7576000818152600f6020818152604080842080546001600160a01b03908116865260138452828620600101805460ff1916905586865293909252905490516000805160206139c283398151915293611fc393869316916137c8565b600b612df66202306084613956565b612e009190613956565b60031415612f215760006063612e196201e24085613956565b612e239190613956565b6000838152600f60205260409020600301549091506064908290612e479083613904565b612e5191906138b9565b1115612eaa57336000908152601360209081526040808320600101805460ff19169055848352600f9091528082205490516000805160206139c2833981519152926120999286926001600160a01b0390911691906137c8565b6000828152600f60209081526040808320546001600160a01b03168352601390915281206006018054839290612ee1908490613904565b90915550506000828152600f6020526040908190205490516000805160206139c2833981519152916120999185916001600160a01b0316906001906137c8565b6000818152600f602052604090206001015461316b576000818152600f60205260408120600c01546103e8612f596203989a86613956565b612f639190613956565b612f6d91906138b9565b6000838152600f6020526040902060060154909150811015613130576000828152600f60209081526040808320600801546001600160a01b03168352601491829052822054612fbc91906138d1565b90506002612fcc6108a686613956565b612fd69190613956565b6001141561301c576000838152600f60209081526040808320546001600160a01b03168352601390915281206009018054600192906130169084906138b9565b90915550505b6000838152600f60209081526040808320600801546001600160a01b03168352601490915281208054839290613053908490613904565b90915550506000838152600f60209081526040808320546001600160a01b0316835260149091528120805483929061308c9084906138b9565b9091555061309f905042620151806138b9565b6000848152600f60209081526040808320546001600160a01b0316835260139091529020600501556130d442620151806138b9565b6000848152600f6020818152604080842060088101546001600160a01b039081168652601384528286206005019690965593889052919052905490516000805160206139c28339815191529261244592879291169085906137c8565b6000828152600f6020526040908190205490516000805160206139c2833981519152916120999185916001600160a01b0316906004906137c8565b6000818152600f602052604090206001908101541415613298576000818152600f60205260408120600d01546103e86131a76206ec2e86613956565b6131b19190613956565b6131bb91906138b9565b6000838152600f6020526040902060070154909150811015613130576000828152600f60209081526040808320600801546001600160a01b0316835260149182905282205461320a91906138d1565b9050600261321a6108a686613956565b6132249190613956565b60011415613264576000838152600f60209081526040808320546001600160a01b0316835260139091528120600a018054600192906130539084906138b9565b6000838152600f60209081526040808320546001600160a01b0316835260149091528120805483929061308c9084906138b9565b6000818152600f602052604090206001015460021415610ca3576000818152600f60205260408120600b01546103e86132d4620c000386613956565b6132de9190613956565b6132e891906138b9565b6000838152600f6020526040902060050154909150811015613130576000828152600f60209081526040808320600801546001600160a01b0316835260149182905282205461333791906138d1565b905060026133476108a686613956565b6133519190613956565b6001141561301c576000838152600f60209081526040808320546001600160a01b03168352601390915281206008018054600192906130169084906138b9565b82805461339d9061391b565b90600052602060002090601f0160209004810192826133bf5760008555613405565b82601f106133d857805160ff1916838001178555613405565b82800160010185558215613405579182015b828111156134055782518255916020019190600101906133ea565b50613411929150613415565b5090565b5b808211156134115760008155600101613416565b600082601f83011261343b57600080fd5b813567ffffffffffffffff8082111561345657613456613996565b604051601f8301601f19908116603f0116810190828211818310171561347e5761347e613996565b8160405283815286602085880101111561349757600080fd5b836020870160208301376000602085830101528094505050505092915050565b803561ffff81168114610bba57600080fd5b6000602082840312156134db57600080fd5b81356134e6816139ac565b9392505050565b6000602082840312156134ff57600080fd5b815180151581146134e657600080fd5b6000806040838503121561352257600080fd5b50508035926020909101359150565b6000806020838503121561354457600080fd5b823567ffffffffffffffff8082111561355c57600080fd5b818501915085601f83011261357057600080fd5b81358181111561357f57600080fd5b86602082850101111561359157600080fd5b60209290920196919550909350505050565b6000806000606084860312156135b857600080fd5b833567ffffffffffffffff8111156135cf57600080fd5b6135db8682870161342a565b9350506135ea602085016134b7565b9150604084013590509250925092565b60006020828403121561360c57600080fd5b5035919050565b60006020828403121561362557600080fd5b5051919050565b6000806040838503121561363f57600080fd5b823591506020830135613651816139ac565b809150509250929050565b6000806000806080858703121561367257600080fd5b84359350602085013567ffffffffffffffff81111561369057600080fd5b61369c8782880161342a565b9350506136ab604086016134b7565b91506136b9606086016134b7565b905092959194509250565b6000806000606084860312156136d957600080fd5b505081359360208301359350604090920135919050565b600080600080600060a0868803121561370857600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6000815180845260005b818110156137565760208185018101518683018201520161373a565b81811115613768576000602083870101525b50601f01601f19169290920160200192915050565b60018060a01b03841681528260208201526060604082015260006137a46060830184613730565b95945050505050565b8215158152604060208201526000611e876040830184613730565b9283526001600160a01b03919091166020830152604082015260600190565b6060815260006137fa6060830186613730565b60208301949094525060400152919050565b60208082526013908201527221b430b930b1ba32b91034b710283934b9b7b760691b604082015260600190565b6020808252602b908201527f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060408201526a1dda5d1a0819985d58d95d60aa1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156138cc576138cc61396a565b500190565b6000826138e0576138e0613980565b500490565b60008160001904831182151516156138ff576138ff61396a565b500290565b6000828210156139165761391661396a565b500390565b600181811c9082168061392f57607f821691505b6020821081141561395057634e487b7160e01b600052602260045260246000fd5b50919050565b60008261396557613965613980565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146117b057600080fdfee8c04b5f7e76c9af6cbeb7096731c7cd35891adcd4c6f15401de8ad204d7c234a2646970667358221220242bae4395eee240681a27ad55c6ff42169ccaa946e4dbe1a7e4ff49f899876264736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 79,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "nonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 292,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4154,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "keyHash",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 4156,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "fee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4158,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "randomResult",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4160,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "keeperRegistryAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4178,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "hospitalBill",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4182,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "lastCheckIn",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4185,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "checkInTimeInterval",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4187,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "nextOwner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 4190,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "IBreakInNFTMinter",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(INFTMinter)4146"
      },
      {
        "astId": 4193,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "breakInNFT",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC721)1423"
      },
      {
        "astId": 4196,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "socialLegoToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)466"
      },
      {
        "astId": 4373,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "differentGameScenarios",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4378,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "gameScenarios",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(scenarios)4255_storage)"
      },
      {
        "astId": 4383,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "currentPVPGamePlays",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_struct(PvP)4360_storage)"
      },
      {
        "astId": 4388,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "currentGamePlays",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_struct(gamePlay)4314_storage)"
      },
      {
        "astId": 4393,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "currentGameMode",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_struct(gameModes)4363_storage)"
      },
      {
        "astId": 4398,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "currentJailBreaks",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_struct(jailBreak)4331_storage)"
      },
      {
        "astId": 4403,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "NFTCharacterDepositLedger",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_struct(depostedCharacter)4295_storage)"
      },
      {
        "astId": 4407,
        "contract": "contracts/breakInGame.sol:BreakInGame",
        "label": "jewelDepositLedger",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)466": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)1423": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_contract(INFTMinter)4146": {
        "encoding": "inplace",
        "label": "contract INFTMinter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(depostedCharacter)4295_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BreakInGame.depostedCharacter)",
        "numberOfBytes": "32",
        "value": "t_struct(depostedCharacter)4295_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(PvP)4360_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BreakInGame.PvP)",
        "numberOfBytes": "32",
        "value": "t_struct(PvP)4360_storage"
      },
      "t_mapping(t_bytes32,t_struct(gameModes)4363_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BreakInGame.gameModes)",
        "numberOfBytes": "32",
        "value": "t_struct(gameModes)4363_storage"
      },
      "t_mapping(t_bytes32,t_struct(gamePlay)4314_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BreakInGame.gamePlay)",
        "numberOfBytes": "32",
        "value": "t_struct(gamePlay)4314_storage"
      },
      "t_mapping(t_bytes32,t_struct(jailBreak)4331_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BreakInGame.jailBreak)",
        "numberOfBytes": "32",
        "value": "t_struct(jailBreak)4331_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(scenarios)4255_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BreakInGame.scenarios)",
        "numberOfBytes": "32",
        "value": "t_struct(scenarios)4255_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PvP)4360_storage": {
        "encoding": "inplace",
        "label": "struct BreakInGame.PvP",
        "members": [
          {
            "astId": 4333,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "player",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4335,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "breakInStyle",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4337,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "difficultyLevel",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4339,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "health",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4341,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "agility",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4343,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "strength",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4345,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "sneak",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4347,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "charm",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4349,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "targetPlayer",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 4351,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "targetPlayerHealth",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 4353,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "targetPlayerAgility",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 4355,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "targetPlayerStrength",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 4357,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "targetPlayerSneak",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 4359,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "targetPlayerCharm",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(depostedCharacter)4295_storage": {
        "encoding": "inplace",
        "label": "struct BreakInGame.depostedCharacter",
        "members": [
          {
            "astId": 4272,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "NFTID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4274,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "isDeposited",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 4276,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "arrested",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 4278,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "freetoPlayAgain",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4280,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "playingPVP",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 4282,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "canStopPlayingPVP",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4284,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "lootingTimeout",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4286,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "health",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4288,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "agility",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4290,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "strength",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4292,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "sneak",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 4294,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "charm",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(gameModes)4363_storage": {
        "encoding": "inplace",
        "label": "struct BreakInGame.gameModes",
        "members": [
          {
            "astId": 4362,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "gameMode",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(gamePlay)4314_storage": {
        "encoding": "inplace",
        "label": "struct BreakInGame.gamePlay",
        "members": [
          {
            "astId": 4297,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "player",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4299,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "scenario",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4301,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "breakInStyle",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4303,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "difficultyLevel",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4305,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "health",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4307,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "agility",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4309,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "strength",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4311,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "sneak",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4313,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "charm",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(jailBreak)4331_storage": {
        "encoding": "inplace",
        "label": "struct BreakInGame.jailBreak",
        "members": [
          {
            "astId": 4316,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "player",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4318,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "breakInStyle",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4320,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "health",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4322,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "agility",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4324,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "strength",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4326,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "sneak",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4328,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "charm",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4330,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "targetPlayer",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(scenarios)4255_storage": {
        "encoding": "inplace",
        "label": "struct BreakInGame.scenarios",
        "members": [
          {
            "astId": 4250,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4252,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "riskBaseDifficulty",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4254,
            "contract": "contracts/breakInGame.sol:BreakInGame",
            "label": "payoutAmountBase",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x1AABb946003D1a2B44973F890Ce8671Ee245D1F4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperRegistryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_socialLegoToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "buyLargeTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyMassiveTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyMediumTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buySmallTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCheckInTimeInterval",
          "type": "uint256"
        }
      ],
      "name": "changeCheckInTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newInheritor",
          "type": "address"
        }
      ],
      "name": "changeInheritance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkInTimeInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "largePurchaseTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastCheckIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massivePurchaseTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediumPurchaseTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerCheckIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setLargeStorePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setMassiveStorePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setMediumStorePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setsmallStorePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smallPurchaseTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaedd75acba5f5ee4069c5f0db6519c83e4e037b91589a54fba50cbcf9559126b",
  "receipt": {
    "to": null,
    "from": "0xDeAdA90a7B242FC396eB277717a31e67A6005c93",
    "contractAddress": "0x1AABb946003D1a2B44973F890Ce8671Ee245D1F4",
    "transactionIndex": 43,
    "gasUsed": "1235138",
    "logsBloom": "0x
    "blockHash": "0x8fb824bf03391483689272f530218e87aa75141c72544a19a7589b48e4108a65",
    "transactionHash": "0xaedd75acba5f5ee4069c5f0db6519c83e4e037b91589a54fba50cbcf9559126b",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 26500800,
        "transactionHash": "0xaedd75acba5f5ee4069c5f0db6519c83e4e037b91589a54fba50cbcf9559126b",
        "address": "0x1AABb946003D1a2B44973F890Ce8671Ee245D1F4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000deada90a7b242fc396eb277717a31e67a6005c93"
        ],
        "data": "0x",
        "logIndex": 105,
        "blockHash": "0x8fb824bf03391483689272f530218e87aa75141c72544a19a7589b48e4108a65"
      },
      {
        "transactionIndex": 43,
        "blockNumber": 26500800,
        "transactionHash": "0xaedd75acba5f5ee4069c5f0db6519c83e4e037b91589a54fba50cbcf9559126b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000deada90a7b242fc396eb277717a31e67a6005c93",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000009ab5bb58f338e0000000000000000000000000000000000000000000000003e23e033f0247991000000000000000000000000000000000000000000000dd38558a008df8364420000000000000000000000000000000000000000000000003e1a34d83a954603000000000000000000000000000000000000000000000dd385624b64951297d0",
        "logIndex": 106,
        "blockHash": "0x8fb824bf03391483689272f530218e87aa75141c72544a19a7589b48e4108a65"
      }
    ],
    "blockNumber": 26500800,
    "cumulativeGasUsed": "3630137",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6179B349067af80D0c171f43E6d767E4A00775Cd",
    "0x9F110D35EF38857cf684ceC01D19F9806907D47a"
  ],
  "solcInputHash": "0fe244a96d5e7d7382f6e351ada9a92a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_socialLegoToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyLargeTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMassiveTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMediumTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySmallTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCheckInTimeInterval\",\"type\":\"uint256\"}],\"name\":\"changeCheckInTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newInheritor\",\"type\":\"address\"}],\"name\":\"changeInheritance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkInTimeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"largePurchaseTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCheckIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massivePurchaseTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediumPurchaseTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCheckIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setLargeStorePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setMassiveStorePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setMediumStorePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setsmallStorePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smallPurchaseTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SocialLegoStore.sol\":\"onlineStore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/SocialLegoStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n\\r\\ncontract onlineStore is KeeperCompatibleInterface, Ownable {\\r\\n    address keeperRegistryAddress;\\r\\n    IERC20 socialLegoToken; //address of SocialLego token\\r\\n\\r\\n    modifier onlyKeeper() {\\r\\n        require(msg.sender == keeperRegistryAddress);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    uint256 public lastCheckIn = block.timestamp;\\r\\n    uint256 public checkInTimeInterval = 864000; //default to six months\\r\\n    address public nextOwner;\\r\\n\\r\\n    uint256 public massivePurchaseTokenPrice = 0.001 * 10**18; // 1 Million tokens is 1 Ether\\r\\n    uint256 public largePurchaseTokenPrice = 0.00015 * 10**18; // 100,000 tokens is 0.15 Ether\\r\\n    uint256 public mediumPurchaseTokenPrice = 0.00004 * 10**18; // 20,0000 tokens is 0.04 Ether\\r\\n    uint256 public smallPurchaseTokenPrice = 0.000025 * 10**18; // 10,0000 tokens is 0.025 Ether\\r\\n\\r\\n    constructor(address _keeperRegistryAddress, address _socialLegoToken) {\\r\\n        keeperRegistryAddress = _keeperRegistryAddress;\\r\\n        socialLegoToken = IERC20(_socialLegoToken);\\r\\n    }\\r\\n\\r\\n    function buyMassiveTokens() public payable {\\r\\n        // how many tokens they want to purchase\\r\\n        require(\\r\\n            socialLegoToken.balanceOf(address(this)) >= 1000000 * 10**10,\\r\\n            \\\"Not Enought Tokens in Contract\\\"\\r\\n        ); // require this contract to have at least 1,000,000 tokens before executing\\r\\n        require(\\r\\n            msg.value >= massivePurchaseTokenPrice,\\r\\n            \\\"Send the right amount of eth\\\"\\r\\n        ); // there is a bug when calling the contract through moralis that the msg.value did not equal required even though msg.value was correct.\\r\\n        socialLegoToken.transfer(msg.sender, 1000000 * 10**18); // send a million tokens.\\r\\n    }\\r\\n\\r\\n    function buyLargeTokens() public payable {\\r\\n        // how many tokens they want to purchase\\r\\n        require(\\r\\n            socialLegoToken.balanceOf(address(this)) >= 100000 * 10**10,\\r\\n            \\\"Not Enought Tokens in Contract\\\"\\r\\n        ); // require this contract to have at least 1,000,000 tokens before executing\\r\\n        require(\\r\\n            msg.value >= largePurchaseTokenPrice,\\r\\n            \\\"Send the right amount of eth\\\"\\r\\n        ); // require this contract to have at least 1,000,000 tokens before executing\\r\\n        socialLegoToken.transfer(msg.sender, 100000 * 10**18); // send 100,0000 tokens.\\r\\n    }\\r\\n\\r\\n    function buyMediumTokens() public payable {\\r\\n        // how many tokens they want to purchase\\r\\n        require(\\r\\n            socialLegoToken.balanceOf(address(this)) >= 20000 * 10**10,\\r\\n            \\\"Not Enought Tokens in Contract\\\"\\r\\n        ); // require this contract to have at least 1,000,000 tokens before executing\\r\\n        require(\\r\\n            msg.value >= mediumPurchaseTokenPrice,\\r\\n            \\\"Send the right amount of eth\\\"\\r\\n        ); // require this contract to have at least 1,000,000 tokens before executing\\r\\n        socialLegoToken.transfer(msg.sender, 20000 * 10**18); // send 20,0000 tokens.\\r\\n    }\\r\\n\\r\\n    function buySmallTokens() public payable {\\r\\n        // how many tokens they want to purchase\\r\\n        require(\\r\\n            socialLegoToken.balanceOf(address(this)) >= 10000 * 10**10,\\r\\n            \\\"Not Enought Tokens in Contract\\\"\\r\\n        ); // require this contract to have at least 1,000,000 tokens before executing\\r\\n        require(\\r\\n            msg.value >= smallPurchaseTokenPrice,\\r\\n            \\\"Send the right amount of eth\\\"\\r\\n        ); // require this contract to have at least 1,000,000 tokens before executing\\r\\n        socialLegoToken.transfer(msg.sender, 10000 * 10**18); // send 10,0000 tokens.\\r\\n    }\\r\\n\\r\\n    function withdrawErc20(IERC20 token) public onlyOwner {\\r\\n        //withdraw all ERC-20 that get accidently sent since this is an only ether store.\\r\\n        require(\\r\\n            token.transfer(msg.sender, token.balanceOf(address(this))),\\r\\n            \\\"Transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) public onlyOwner returns (bool) {\\r\\n        require(amount <= address(this).balance);\\r\\n        payable(msg.sender).transfer(amount); //if the owner send to sender\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setMassiveStorePrice(uint256 newPrice) public onlyOwner {\\r\\n        require(newPrice <= massivePurchaseTokenPrice * 2, \\\"too high price\\\"); // just in case you fat finger a number and accidently set a number too high or too low\\r\\n        require(newPrice >= massivePurchaseTokenPrice / 2, \\\"too low price\\\");\\r\\n        massivePurchaseTokenPrice = newPrice;\\r\\n    }\\r\\n\\r\\n    function setLargeStorePrice(uint256 newPrice) public onlyOwner {\\r\\n        require(newPrice <= largePurchaseTokenPrice * 2, \\\"too high price\\\"); // just in case you fat finger a number and accidently set a number too high or too low\\r\\n        require(newPrice >= largePurchaseTokenPrice / 2, \\\"too low price\\\");\\r\\n        largePurchaseTokenPrice = newPrice;\\r\\n    }\\r\\n\\r\\n    function setMediumStorePrice(uint256 newPrice) public onlyOwner {\\r\\n        require(newPrice <= mediumPurchaseTokenPrice * 2, \\\"too high price\\\"); // just in case you fat finger a number and accidently set a number too high or too low\\r\\n        require(newPrice >= mediumPurchaseTokenPrice / 2, \\\"too low price\\\");\\r\\n        mediumPurchaseTokenPrice = newPrice;\\r\\n    }\\r\\n\\r\\n    function setsmallStorePrice(uint256 newPrice) public onlyOwner {\\r\\n        require(newPrice <= smallPurchaseTokenPrice * 2, \\\"too high price\\\"); // just in case you fat finger a number and accidently set a number too high or too low\\r\\n        require(newPrice >= smallPurchaseTokenPrice / 2, \\\"too low price\\\");\\r\\n        smallPurchaseTokenPrice = newPrice;\\r\\n    }\\r\\n\\r\\n    function changeInheritance(address newInheritor) public onlyOwner {\\r\\n        nextOwner = newInheritor;\\r\\n    }\\r\\n\\r\\n    function ownerCheckIn() public onlyOwner {\\r\\n        lastCheckIn = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function changeCheckInTime(uint256 newCheckInTimeInterval)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        checkInTimeInterval = newCheckInTimeInterval; // let owner change check in case he know he will be away for a while.\\r\\n    }\\r\\n\\r\\n    function passDownInheritance() internal {\\r\\n        transferOwnership(nextOwner);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes calldata /* checkData */\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        returns (\\r\\n            bool upkeepNeeded,\\r\\n            bytes memory /* performData */\\r\\n        )\\r\\n    {\\r\\n        //upkeepNeeded = (block.timestamp > (lastCheck + 5184000));\\r\\n        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.\\r\\n        return (\\r\\n            block.timestamp > (lastCheckIn + checkInTimeInterval),\\r\\n            bytes(\\\"\\\")\\r\\n        ); // make sure to check in at least once every 6 months\\r\\n    }\\r\\n\\r\\n    function performUpkeep(\\r\\n        bytes calldata /* performData */\\r\\n    ) external override onlyKeeper {\\r\\n        passDownInheritance();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2b28b55edc390ad0ef2f32826472d2c6557fef4c2e2b600834968a50cb5804dd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 292,
        "contract": "contracts/SocialLegoStore.sol:onlineStore",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3069,
        "contract": "contracts/SocialLegoStore.sol:onlineStore",
        "label": "keeperRegistryAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3072,
        "contract": "contracts/SocialLegoStore.sol:onlineStore",
        "label": "socialLegoToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)466"
      },
      {
        "astId": 3087,
        "contract": "contracts/SocialLegoStore.sol:onlineStore",
        "label": "lastCheckIn",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3090,
        "contract": "contracts/SocialLegoStore.sol:onlineStore",
        "label": "checkInTimeInterval",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3092,
        "contract": "contracts/SocialLegoStore.sol:onlineStore",
        "label": "nextOwner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3099,
        "contract": "contracts/SocialLegoStore.sol:onlineStore",
        "label": "massivePurchaseTokenPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3106,
        "contract": "contracts/SocialLegoStore.sol:onlineStore",
        "label": "largePurchaseTokenPrice",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3113,
        "contract": "contracts/SocialLegoStore.sol:onlineStore",
        "label": "mediumPurchaseTokenPrice",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3120,
        "contract": "contracts/SocialLegoStore.sol:onlineStore",
        "label": "smallPurchaseTokenPrice",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)466": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}